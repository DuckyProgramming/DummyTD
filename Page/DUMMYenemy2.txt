enemy.prototype.update = function(){
	this.name = this.rememberName;
	if(this.hitTimer>0){
		this.hitTimer--;
	}
	if(this.name === "Lead Balloon"||this.name === "Titanium Balloon"||this.name === "Steel Balloon"){
		this.extraSpin++;
		for(var j in this.balloonSpots){
			if(dist(this.balloonSpots[j][0],this.balloonSpots[j][1],this.balloonSpotsGoal[j][0],this.balloonSpotsGoal[j][1])>1){
				this.balloonDirection = atan2(this.balloonSpots[j][0]-this.balloonSpotsGoal[j][0],this.balloonSpots[j][1]-this.balloonSpotsGoal[j][1]);
				this.balloonSpots[j][0]-=sin(this.balloonDirection);
				this.balloonSpots[j][1]-=cos(this.balloonDirection);
			}
		}
		if(this.life>=this.maxLife/4){
			this.rate = 0;
		}
		else{
			this.speed = this.standardSpeed/2;
		}
		if(this.life<this.maxLife*3/4&&!this.popped[2]){
			this.popped[2] = true;
			this.balloonSpotsGoal = [[5,-24],[-5,24],[0,0]];
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[2][0]-sin(this.extraSpin)*this.balloonSpots[2][1],this.y+sin(this.extraSpin)*this.balloonSpots[2][0]+cos(this.extraSpin)*this.balloonSpots[2][1],6,1,0));
		}
		else if(this.life<this.maxLife/2&&!this.popped[1]){
			this.popped[1] = true;
			this.balloonSpotsGoal = [[-10,15],[0,0],[0,0]];
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[1][0]-sin(this.extraSpin)*this.balloonSpots[1][1],this.y+sin(this.extraSpin)*this.balloonSpots[1][0]+cos(this.extraSpin)*this.balloonSpots[1][1],6,1,0));
		}
		else if(this.life<this.maxLife/4&&!this.popped[0]){
			this.popped[0] = true;
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[0][0]-sin(this.extraSpin)*this.balloonSpots[0][1],this.y+sin(this.extraSpin)*this.balloonSpots[0][0]+cos(this.extraSpin)*this.balloonSpots[0][1],6,1,0));
		}
	}
	else if(this.name === "White Balloon"){
		this.extraSpin++;
		for(var j in this.balloonSpots){
			if(dist(this.balloonSpots[j][0],this.balloonSpots[j][1],this.balloonSpotsGoal[j][0],this.balloonSpotsGoal[j][1])>1){
				this.balloonDirection = atan2(this.balloonSpots[j][0]-this.balloonSpotsGoal[j][0],this.balloonSpots[j][1]-this.balloonSpotsGoal[j][1]);
				this.balloonSpots[j][0]-=sin(this.balloonDirection);
				this.balloonSpots[j][1]-=cos(this.balloonDirection);
			}
		}
		if(this.life>=this.maxLife/7){
			this.rate = 0;
			if(this.stuns[0]>0){
				this.stuns[0] = 0;
			}
		}
		else{
			this.speed = this.standardSpeed/2;
		}
		if(this.life<this.maxLife*6/7&&!this.popped[5]){
			this.popped[5] = true;
			this.balloonSpotsGoal = [[sin(72)*25,cos(72)*25],[sin(144)*25,cos(144)*25],[sin(216)*25,cos(216)*25],[sin(288)*25,cos(288)*25],[0,25],[0,0]];
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[5][0]-sin(this.extraSpin)*this.balloonSpots[5][1],this.y+sin(this.extraSpin)*this.balloonSpots[5][0]+cos(this.extraSpin)*this.balloonSpots[5][1],6,1,0));
		}
		else if(this.life<this.maxLife*5/7&&!this.popped[4]){
			this.popped[4] = true;
			this.balloonSpotsGoal = [[-20,-20],[-20,20],[20,-20],[20,20],[0,0],[0,0]];
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[4][0]-sin(this.extraSpin)*this.balloonSpots[4][1],this.y+sin(this.extraSpin)*this.balloonSpots[4][0]+cos(this.extraSpin)*this.balloonSpots[4][1],6,1,0));
		}
		else if(this.life<this.maxLife*4/7&&!this.popped[3]){
			this.popped[3] = true;
			this.balloonSpotsGoal = [[-25,-14],[25,-14],[0,28],[0,0],[0,0],[0,0]];
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[3][0]-sin(this.extraSpin)*this.balloonSpots[3][1],this.y+sin(this.extraSpin)*this.balloonSpots[3][0]+cos(this.extraSpin)*this.balloonSpots[3][1],6,1,0));
		}
		else if(this.life<this.maxLife*3/7&&!this.popped[2]){
			this.popped[2] = true;
			this.balloonSpotsGoal = [[5,-24],[-5,24],[0,0],[0,0],[0,0],[0,0]];
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[2][0]-sin(this.extraSpin)*this.balloonSpots[2][1],this.y+sin(this.extraSpin)*this.balloonSpots[2][0]+cos(this.extraSpin)*this.balloonSpots[2][1],6,1,0));
		}
		else if(this.life<this.maxLife*2/7&&!this.popped[1]){
			this.popped[1] = true;
			this.balloonSpotsGoal = [[-10,15],[0,0],[0,0],[0,0],[0,0],[0,0]];
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[1][0]-sin(this.extraSpin)*this.balloonSpots[1][1],this.y+sin(this.extraSpin)*this.balloonSpots[1][0]+cos(this.extraSpin)*this.balloonSpots[1][1],6,1,0));
		}
		else if(this.life<this.maxLife/7&&!this.popped[0]){
			this.popped[0] = true;
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[0][0]-sin(this.extraSpin)*this.balloonSpots[0][1],this.y+sin(this.extraSpin)*this.balloonSpots[0][0]+cos(this.extraSpin)*this.balloonSpots[0][1],6,1,0));
		}
	}
	else if(this.name === "Zebra Balloon"){
		this.extraSpin++;
		for(var j in this.balloonSpots){
			if(dist(this.balloonSpots[j][0],this.balloonSpots[j][1],this.balloonSpotsGoal[j][0],this.balloonSpotsGoal[j][1])>1){
				this.balloonDirection = atan2(this.balloonSpots[j][0]-this.balloonSpotsGoal[j][0],this.balloonSpots[j][1]-this.balloonSpotsGoal[j][1]);
				this.balloonSpots[j][0]-=sin(this.balloonDirection);
				this.balloonSpots[j][1]-=cos(this.balloonDirection);
			}
		}
		if(this.life>=this.maxLife/3){
			this.rate = 0;
			if(this.stuns[0]>0){
				this.stuns[0] = 0;
			}
		}
		else{
			this.speed = this.standardSpeed/2;
		}
		if(this.life<this.maxLife*2/3&&!this.popped[1]){
			this.popped[1] = true;
			this.balloonSpotsGoal = [[-10,15],[0,0]];
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[1][0]-sin(this.extraSpin)*this.balloonSpots[1][1],this.y+sin(this.extraSpin)*this.balloonSpots[1][0]+cos(this.extraSpin)*this.balloonSpots[1][1],6,1.5,0));
		}
		else if(this.life<this.maxLife/3&&!this.popped[0]){
			this.popped[0] = true;
			bursts.push(new burst(this.x+cos(this.extraSpin)*this.balloonSpots[0][0]-sin(this.extraSpin)*this.balloonSpots[0][1],this.y+sin(this.extraSpin)*this.balloonSpots[0][0]+cos(this.extraSpin)*this.balloonSpots[0][1],6,1.5,0));
		}
	}
	else if(this.name === "Controlled"){
		if(this.life<=0&&this.maxLife === 800){
			this.maxLife*=2.5;
			this.life = this.maxLife;
			this.ice = 0;
			this.defense+=10;
			this.speed = 0;
		}
		else if(this.maxLife === 2000){
			this.life-=0.5;
			if(this.shrike<50){
				this.shrike+=2.5;
			}
			else if(this.shrike<100){
				this.shrike+=0.25;
			}
			if(this.time%7 === 0){
				for(var j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<this.shrike){
						towers[j].stun = 5;
					}
				}
			}
			this.randomSpin+=0.05;
		}
	}
	else if(this.name === "Balloon"||this.name === "Camo Balloon"||this.name === "Regen Balloon"||this.name === "Balloon X"){
		this.extraSpin++;
		if(this.life>=this.maxLife*3/5){
			this.rate = 0;
			if(this.name === "Regen Balloon"&&this.life<this.maxLife){
				this.life+=0.2;
			}
		}
		else{
			if(!this.popped){
				this.popped = true;
				bursts.push(new burst(this.x-sin(this.extraSpin)*15,this.y+cos(this.extraSpin)*15,6,1,0));
			}
			if(this.name === "Camo Balloon"){
				this.hidden = false;
			}
			this.speed = this.standardSpeed/2;
		}
	}
	else if(this.name === "Contradiction"){
		if(this.life<=0&&this.maxLife === 6500){
			this.maxLife = 16000;
			this.life = this.maxLife;
			this.ice = 0;
			this.defense = 18;
			this.speed = 0;
		}
		else if(this.maxLife === 16000){
			this.life--;
			if(this.shrike<50){
				this.shrike+=2.5;
			}
			else if(this.shrike<100){
				this.shrike+=0.25;
			}
			if(this.time%5 === 0){
				for(var j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<this.shrike){
						towers[j].stun = 5;
					}
				}
			}
			this.randomSpin+=0.05;
		}
	}
	else if(this.name === "Quandary"){
		if(this.life<=0&&this.maxLife === 1450){
			this.maxLife = 3650;
			this.life = this.maxLife;
			this.ice = 0;
			this.defense = 4;
			this.speed = 0;
		}
		else if(this.maxLife === 3650){
			this.life-=0.25;
			if(this.shrike<50){
				this.shrike+=2.5;
			}
			else if(this.shrike<100){
				this.shrike+=0.25;
			}
			if(this.time%6 === 0){
				for(var j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<this.shrike){
						towers[j].stun = 5;
					}
				}
			}
			this.randomSpin+=0.05;
		}
	}
	this.defense = max(min(0,this.baseDefense),this.defense);
 	if(this.life>0){
		if(this.correct&&scene === "game"){
			for(j in towers){
				if((dist(this.x,this.y,towers[j].x,towers[j].y)<15+towerTypes[towers[j].type].size)&&!(this.name === "Buried"&&this.buryTimer>0&&this.buriedTimer<461)){
					if(abs(this.x-towers[j].x)<this.speed/2){
						this.x = towers[j].x;
					}
					if(abs(this.y-towers[j].y)<this.speed/2){
						this.y = towers[j].y;
					}
					this.runDirection = atan2(this.x-towers[j].x,this.y-towers[j].y);
					towers[j].velX = -sin(this.runDirection);
					towers[j].velY = -cos(this.runDirection);
					for(l=0;l<10;l++){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<15+towerTypes[towers[j].type].size){
							towers[j].x+=towers[j].velX;
							towers[j].y+=towers[j].velY;
						}
					}
					if(this.name === "Discord"||this.name === "Envisioned"){
						towers[j].absorbed = true;
					}
				}
			}
		}
		if(this.shock>0){
			this.life-=1/5;
			this.shock--;
		}
		if(this.enemyX>0){
			this.enemyX--;
		}
		if(this.burn[1]>0&&this.name !== "Demon"&&this.name !== "Molten Titan"&&this.name !== "Molten"){
			if(this.time%60 === 0){
				this.burn[1]--;
				this.life-=this.burn[0];
			}
			if(this.time%15 === 0){
				bursts.push(new burst(this.x,this.y,19,this.size*10,random(0,360)));
			}
			this.stuns[0] = 0;
		}
		if(this.fade<255){
			this.fade+=15;
		}
		this.life-=this.DOT;
		this.works = true;
		for(j=0;j<this.stuns.length;j++){
			if(this.stuns[j]>0&&!((j === 6||j === 7)&&frameCount%2 === 0)){
				if(this.SS){
					this.stuns[j] = 0;
				}
				else{
					this.stuns[j]--;
					this.works = false;
				}
			}
		}
		for(var j in this.bombs){
			if(this.bombs[j][2]>0){
				this.bombs[j][2]--;
			}
			else if(this.bombs[j][2] === 0){
				this.bombs[j][2]--;
				this.bombs[j][3] = true;
				bursts.push(new burst(this.x+sin(this.bombs[j][0])*-this.bombs[j][1]+cos(this.bombs[j][0])*-this.bombs[j][1],this.y+cos(this.bombs[j][0])*this.bombs[j][1]+sin(this.bombs[j][0])*-this.bombs[j][1],12,1.25,0));
				for(j in enemies){
					if(dist(enemies[j].x,enemies[j].y,this.x,this.y)<100&&!(enemies[j].name === "Ghost"&&enemies[j].activated)){
						if((enemies[j].name === "Slow King"||enemies[j].name === "Charge"||enemies[j].name === "Frozen"||enemies[j].name === "Deep Freeze"||enemies[j].name === "Frost King"||enemies[j].name === "Raider"||enemies[j].name === "Energized Raider")&&enemies[j].shield>0&&enemies[j].activated){
							enemies[j].shield-=(100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*3/10;
						}
						else if(enemies[j].name === "Vindicator"&&enemies[j].shield>0&&enemies[j].activated){
							enemies[j].shield-=max(1,(100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*3/10-100);
						}
						else if((enemies[j].name === "Gold Guard"||enemies[j].name === "Golden")&&enemies[j].activated){
							enemies[j].life-=((100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*3/10)*0.05;
						}
						else if(!(enemies[j].name === "Zebra Balloon"&&enemies[j].life>=enemies[j].maxLife/3&&enemies[j].activated)){
							enemies[j].life-=max(min(1,(100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*3/10),(100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*3/10-enemies[j].defense);
						}
					}
				}
				this.bombs.splice(j,1);
			}
		}
		{
			if(options[9]){
				this.life+=this.maxLife*this.speed*(this.ice*0.6+0.4)/600;
				this.life = min(this.life,this.maxLife);
			}
			if(options[16]&&floor(random(0,120)) === 0){
				this.stuns[8] = random(10,30);
			}
			if(this.name === "Lead Boss"||this.name === "Titanium Boss"||this.name === "Steel Boss"){
				if(this.life>=this.maxLife/2){
					this.lead = true;
				}
				else{
					this.lead = false;
				}
			}
			else if(this.name === "Lead Balloon"||this.name === "Titanium Balloon"||this.name === "Steel Balloon"){
				if(this.life>=this.maxLife/4){
					this.lead = true;
				}
				else{
					this.lead = false;
				}
			}
			else if(this.name === "Lead"||this.name === "Clanker"||this.name === "Mega Clanker"||this.name === "Repossessed Armor"){
				this.lead = true;
			}
			if((this.name === "Hidden"||this.name === "Shadow Boss"||this.name === "Hidden Normal Boss"||this.name === "Hidden.gs")&&this.time%15 === 0||this.name === "Hiding"&&this.time%30 === 0){
				bursts.push(new burst(this.x,this.y,0,this.size*10,random(0,360)));
			}
			else if(this.name === "Slow King"||this.name === "Frost King"||this.name === "Elite Raybeamer"||this.name === "True Vanguard"||this.name === "Avant Guard"||this.name === "Shielding Boss"||this.name === "Shielder"||this.name === "Robotic Guard"||this.name === "Oppressor"||this.name === "Chaotic Machine"||this.name === "Melting King"){
				if(this.time%15 === 0&&this.name === "Slow King"){
					bursts.push(new burst(this.x,this.y,8,this.size*10,random(0,360)));
				}
				if(this.shield<=0&&this.shieldFade>0){
					this.shieldFade-=17;
				}
				else if((this.name === "True Vanguard"||this.name === "Avant Guard"||this.name === "Robotic Guard"||this.name === "Oppressor")&&this.time%300 === 0){
					this.wantAttack = floor(random(0,2));
				}
			}
			else if(this.name === "Fallen Rusher"||this.name === "Rusher"){
				if(this.life<this.maxLife*7/8){
					this.speed = this.standardSpeed/3;
				}
				else{
					this.speed = this.standardSpeed;
				}
			}
			else if(this.name === "Glider"||this.name === "Anomaly"){
				if(this.life<this.maxLife*5/6){
					this.speed = this.standardSpeed/2.5;
				}
				else{
					this.speed = this.standardSpeed;
				}
			}
			else if(this.name === "Jetpacker"){
				if(this.life<this.maxLife*4/5){
					this.speed = this.standardSpeed/2.5;
				}
				else{
					this.speed = this.standardSpeed;
				}
			}
			else if(this.name === "Glitch"||this.name === "Error"||this.name === "Redistributor"||this.name === "Nope"||this.name === "Glitched Angel"){
				for(j in this.colors){
					if(floor(random(0,50)) === 0){
						this.colors[j] = this.colorChances[floor(random(0,10))];
					}
				}
				if(this.time%15 === 0){
					bursts.push(new burst(this.x,this.y,13,this.size*10,random(0,360)));
					bursts[bursts.length-1].color = this.colorChances[floor(random(0,10))];
				}
				if(this.name !== "Redistributor"){
					if(this.time%60 === 1&&this.size<1.4){
						this.size*=1.4;
					}
					else if(this.time%60 === 5&&this.size>1){
						this.size/=1.4;
						for(j=0;j<8;j++){
							bursts.push(new burst(this.x,this.y,13,this.size*10,random(0,360)));
							bursts[bursts.length-1].color = this.colorChances[floor(random(0,10))];
						}
					}
				}
			}
			else if(this.name === "Gold Guard"&&this.life<this.maxLife*3/4&&this.activated){
				this.life+=15;
				this.life = min(this.life,(this.maxLife*3/4)-0.1);
			}
			else if(this.name === "Circuit"&&this.time%4 === 0){
				bursts.push(new burst(this.x,this.y,4,8,random(0,360)));
			}
			else if(this.name === "Molten"&&this.time%10 === 0){
				this.distance = sqrt(random(0,256));
				this.spin = random(0,360);
				bursts.push(new burst(this.x+sin(this.spin)*this.distance,this.y+cos(this.spin)*this.distance,21,this.size*10,random(0,360)));
				if(this.life<this.maxLife&&this.activated){
					this.life++;
					this.life = min(this.life,(this.maxLife)-0.1);
				}
				if(this.stuns[0]>0){
					this.stuns[0] = 0;
				}
			}
			else if(this.name === "Molten Titan"||this.name === "Scorcher"){
				if(this.time%300 === 0){
					this.wantAttack = floor(random(0,3));
				}
				if(this.time%10 === 0){
					this.distance = sqrt(random(0,1600));
					this.spin = random(0,360);
					bursts.push(new burst(this.x+sin(this.spin)*this.distance,this.y+cos(this.spin)*this.distance,21,this.size*10,random(0,360)));
				}
			}
			else if(this.name === "Void Reaver"||this.name === "Nuclear Void Reaver"){
				if(this.spawnTimer>0){
					this.spawnTimer--;
					if(this.shieldFade<255){
						this.shieldFade+=5;
					}
					if(this.spawnTimer === 600||this.spawnTimer === 480||this.spawnTimer === 360||this.spawnTimer === 240){
						enemies.push(new enemy(levels[level].startX[this.path%levels[level].paths.length],levels[level].startY[this.path%levels[level].paths.length],26,this.path));
					}
				}
				else if(this.shieldFade>0){
					this.shieldFade-=5;
				}
				if(this.time%5 === 0&&this.armorFade<=0){
					if(this.life<75000||this.name === "Nuclear Void Reaver"&&this.life<100000){
						bursts.push(new burst(this.x,this.y,10,this.size*16,random(0,360)));
					}
					else{
						bursts.push(new burst(this.x,this.y,10,this.size*10,random(0,360)));
					}
				}
				if(this.time%300 === 0){
					if(this.armorFade<=0){
						this.wantAttack = floor(random(2,4.5));
					}
					else{
						this.wantAttack = floor(random(0,1.5));
					}
				}
			}
			else if(this.name === "Void Shadow"&&this.time%15 === 0){
				bursts.push(new burst(this.x,this.y,10,this.size*10,random(0,360)));
			}
			else if(this.name === "Amalgamation"&&this.activated){
				this.life+=5;
				this.life = min(this.life,this.maxLife-0.1);
			}
			else if(this.name === "Developer"){
				if(this.shieldTimer>0){
					this.shieldTimer--;
					if(this.shieldFade<255){
						this.shieldFade+=5;
					}
				}
				else if(this.shieldFade>0){
					this.shieldFade-=5;
				}
				if(this.time%10 === 0){
					bursts.push(new burst(this.x,this.y,26,this.size*12,random(0,360)));
				}
				if(this.time%300 === 0){
					this.wantAttack = floor(random(0,5));
				}
			}
			else if((this.name === "Frozen"||this.name === "Deep Freeze"||this.name === "Frost King"||this.name === "Snow")&&this.activated){
				this.stuns[0] = 0;
			}
			else if(this.name === "Sword Boss"&&this.time%300 === 0&&this.swordFly === 0){
				this.wantAttack = floor(random(1,4));
			}
			else if(this.name === "Fallen Princess"&&this.time%300 === 0){
				this.wantAttack = floor(random(0,8));
			}
			else if(this.name === "Ruined Boss"&&this.time%8 === 0){
				bursts.push(new burst(this.x,this.y,32,this.size*10,random(0,360)));
			}
			else if(this.name === "Energy"&&this.time%5 === 0){
				bursts.push(new burst(this.x,this.y,34,this.size*10,random(0,360)));
			}
			else if((this.name === "Mummy"||this.name === "Strong Mummy")&&this.activated){
				if(this.bandageFade<=0){
					this.speed = this.standardSpeed*2.5;
				}
				else{
					if(this.life<=this.maxLife/2){
						this.bandageFade-=15;
					}
					this.speed = this.standardSpeed;
				}
			}
			else if(this.name === "Angered"&&this.activated){
				this.speed = 1.5+(this.maxLife-this.life)/5;
			}
			else if(this.name === "Awakening"&&this.activated){
				this.speed = 0.75+(this.maxLife-this.life)/this.maxLife*3;
			}
			else if(this.name === "Second Boss"&&this.time%15 === 0){
				bursts.push(new burst(this.x,this.y,39,this.size*12,random(0,360)));
				bursts[bursts.length-1].color = [10,43,7];
			}
			else if(this.name === "Acidic"&&this.time%10 === 0){
				this.distance = sqrt(random(0,256));
				this.spin = random(0,360);
				bursts.push(new burst(this.x+sin(this.spin)*this.distance,this.y+cos(this.spin)*this.distance,21,this.size*10,random(0,360)));
				if(this.life<this.maxLife&&this.activated){
					this.life+=14;
					this.life = min(this.life,(this.maxLife)-0.1);
				}
			}
			else if(this.name === "Cyber Sentinel"&&this.activated){
				if(this.shieldFade<=0){
					this.speed = this.standardSpeed/2;
				}
				else{
					if(this.life<=this.maxLife*3/4){
						this.shieldFade-=15;
					}
					this.speed = this.standardSpeed;
				}
			}
			else if(this.name === "Unholy Amalgamation"&&this.activated){
				this.life+=100;
				this.life = min(this.life,this.maxLife-0.1);
			}
			else if(this.name === "Fallen Supplier"&&!this.dropped){
				for(j in enemies){
					if(enemies[j].name === "Fallen Princess"&&enemies[j].armorFade<=0&&enemies[j].armorFade2<=0&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<40){
						this.dropped = true;
						enemies[j].armorActivated2 = true;
					}
				}
			}
			else if(this.name === "Irritating Balloon"){
				this.life+=1/6;
				this.life = min(this.life,this.maxLife-0.1);
			}
			else if(this.name === "Depressed"&&dist(this.x,this.y,mouseX,mouseY)<15&&mouseIsPressed){
				this.life = 0;
			}
			else if((this.name === "Moss, the Guardian"||this.name === "Moon Goddess"||this.name === "Brilliancy"||this.name === "Chronos"||this.name === "The Collector"||this.name === "Broken Overlord"||this.name === "Keres")&&this.time%300 === 0){
				this.wantAttack = floor(random(0,4));
			}
			else if(this.name === "Glitched Giant"){
				for(j in this.colors){
					if(floor(random(0,50)) === 0){
						this.colors[j] = this.colorChances[floor(random(0,10))];
					}
				}
				if(this.time%15 === 0){
					bursts.push(new burst(this.x,this.y,13,this.size*10,random(0,360)));
					bursts[bursts.length-1].color = this.colorChances[floor(random(0,10))];
				}
				if(this.time%60 === 1&&this.size<2){
					this.size*=1.4;
				}
				else if(this.time%60 === 5&&this.size>2){
					this.size/=1.4;
					for(j=0;j<8;j++){
						bursts.push(new burst(this.x,this.y,13,this.size*10,random(0,360)));
						bursts[bursts.length-1].color = this.colorChances[floor(random(0,10))];
					}
				}
			}
			else if((this.name === "Returned Mage"||this.name === "Vengeful Champion"||this.name === "True Ignitus"||this.name === "Ennealis"||this.name === "Dimension Wanderer"||this.name === "Watcher"||this.name === "Vengeful Ignitus"||this.name === "Councilman"||this.name === "Zenith"||this.name === "Octrax"||this.name === "Galactic Commander")&&this.time%300 === 0){
				this.wantAttack = floor(random(0,3));
			}
			else if((this.name === "Cysian Master"||this.name === "Robotic Overseer"||this.name === "Grand Eye of the Seer"||this.name === "Saber Champion"||this.name === "Hollow Champion"||this.name === "Exiled Overseer"||this.name === "The Vanguard"||this.name === "Boltmaster"||this.name === "Umbra"||this.name === "Tharea the Shattered"||this.name === "Entity-C"||this.name === "Compact Leviathan")&&this.time%300 === 0){
				this.wantAttack = floor(random(0,2));
			}
			else if(this.name === "Elemental Energy"&&this.time%10 === 0){
				bursts.push(new burst(this.x,this.y,13,this.size*10,random(0,360)));
				bursts[bursts.length-1].color = [255,255,255];
			}
			else if(this.name === "Discord"||this.name === "Envisioned"){
				for(j in towers){
					if((dist(this.x,this.y,towers[j].x,towers[j].y)<150)){
						this.runDirection = atan2(this.x-towers[j].x,this.y-towers[j].y);
						towers[j].velX = sin(this.runDirection)*(150-dist(this.x,this.y,towers[j].x,towers[j].y))/600;
						towers[j].velY = cos(this.runDirection)*(150-dist(this.x,this.y,towers[j].x,towers[j].y))/600;
					}
				}
			}
			else if(this.name === "Cursed Fire"&&this.activated){
				this.life+=3;
				this.life = min(this.life,this.maxLife-0.1);
			}
			else if(this.name === "BuffRocketLauncher"){
				for(j in enemies){
					if(dist(this.x,this.y,enemies[j].x,enemies[j].y)<125&&enemies[j].speed<enemies[j].standardSpeed*1.5&&enemies[j].life>0&&enemies[j].maxLife<10000){
						enemies[j].speed = enemies[j].standardSpeed*1.5;
					}
				}
			}
			else if(this.name === "Buff2RocketLauncher"){
				for(j in enemies){
					if(dist(this.x,this.y,enemies[j].x,enemies[j].y)<125&&enemies[j].defense<16&&enemies[j].life>0&&enemies[j].maxLife<10000){
						enemies[j].defense = 16;
					}
				}
			}
			else if((this.name === "Eternal Awakened King"||this.name === "The Awakened Void"||this.name === "Illumina")&&this.time%300 === 0){
				this.wantAttack = floor(random(0,5));
			}
			else if(this.name === "Checkpoint"){
				this.life-=0.25;
			}
			else if(this.name === "Inconsistent"){
				for(j in this.colors){
					if(floor(random(0,10)) === 0){
						this.colors[j] = this.colorChances[floor(random(0,10))];
					}
				}
				if(this.time%15 === 1&&this.size<1.4){
					this.size*=1.4;
				}
				else if(this.time%15 === 5&&this.size>1){
					this.size/=1.4;
					for(j=0;j<3;j++){
						bursts.push(new burst(this.x,this.y,13,this.size*10,random(0,360)));
						bursts[bursts.length-1].color = this.colorChances[floor(random(0,10))];
					}
				}
			}
			else if(this.name === "Irreconcilable"||this.name === "Unimaginable"||this.name === "Cracked Core"){
				for(j in this.colors){
					if(floor(random(0,10)) === 0){
						this.colors[j] = this.colorChances[floor(random(0,10))];
					}
				}
				if(this.name === "Irreconcilable"){
					if(this.time%15 === 1&&this.size<2.45){
						this.size*=1.4;
					}
					else if(this.time%15 === 5&&this.size>1.75){
						this.size/=1.4;
						for(j=0;j<6;j++){
							bursts.push(new burst(this.x,this.y,13,this.size*10,random(0,360)));
							bursts[bursts.length-1].color = this.colorChances[floor(random(0,10))];
						}
					}
				}
			}
			else if(this.name === "Wire"){
				this.stuns[1] = 0;
				this.stuns[2] = 0;
			}
			else if(this.name === "Limited Annihilator"&&this.activated){
				this.life = min(this.life+0.1,this.maxLife);
			}
			else if(this.name === "Waterflame"&&this.time%10 === 0){
				this.distance = sqrt(random(0,256));
				this.spin = random(0,360);
				bursts.push(new burst(this.x+sin(this.spin)*this.distance,this.y+cos(this.spin)*this.distance,56,this.size*10,random(0,360)));
				if(this.life<this.maxLife&&this.activated){
					this.life+=2;
					this.life = min(this.life,(this.maxLife)-0.1);
				}
			}
			else if(this.name === "Fire Tank"){
				this.stuns[0] = 0;
				if(this.itme%10 === 0){
					this.distance = sqrt(random(0,400));
					this.spin = random(0,360);
					bursts.push(new burst(this.x+sin(this.spin)*this.distance,this.y+cos(this.spin)*this.distance,21,this.size*10,random(0,360)));
				}
				if(this.time%30 === 0){
					for(j in towers){
						if((dist(this.x,this.y,towers[j].x,towers[j].y)<60)){
							towers[j].stun = 15;
						}
					}
				}
			}
			else if(this.name === "Legacy"){
				if(this.defense>0){
					this.defense--;
					if(this.time%15 === 0){
						bursts.push(new burst(this.x-cos(this.direction)*5-sin(this.direction)*2,this.y+cos(this.direction)*2-sin(this.direction)*5,58,this.size*8,random(0,360)));
					}
				}
			}
			else if(this.name === "Mesh"){
				if(this.time%3 === 0){
					this.shapes.push([random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),255]);
				}
				for(var k=0;k<this.shapes.length;k++){
					this.shapes[k][6]-=17;
				}
			}
			else if(this.name === "Recollection"){
				this.defense = 10+sin(this.time*2)*10;
			}
			else if(this.name === "Plasma Hero"&&this.activated){
				this.life = min(this.life+=10,this.maxLife);
			}
			else if(this.name === "Financial Crisis"){
				money = max(money-0.2,0);
			}
			else if(this.name === "Palliatus"){
				this.speed*=1.0001;
			}
			if(this.name === "Templar"&&this.activated){
				this.maxDamage = 10;
			}
			else if(this.name === "Awakened Templar"&&this.activated){
				this.maxDamage = 100;
			}
			else if((this.name === "Void Reaver"||this.name === "Nuclear Void Reaver")&&this.spawnTimer>0&&this.activated){
				this.maxDamage = 7;
			}
			else if(this.name === "Developer"&&this.shieldTimer>0&&this.activated){
				this.maxDamage = 13;
			}
			else if(this.name === "Indigentia"){
				this.maxDamage = max(1,this.life/10);
			}
			else{
				this.maxDamage = 0;
			}
		}//exclusives
		if(this.works){
			this.rate+=this.speed;
			this.time++;
			if(this.name === "Fallen Reaper"&&this.activated){
				this.recharge--;
				if(this.recharge<=0){
					this.recharge = 510;
				}
				if(this.recharge>450){
					if(this.recharge>480){
						this.handMove+=0.35;
					}
					else{
						this.handMove-=0.35;
					}
					this.speed = 0;
					if(this.recharge === 480){
						for(j=0;j<floor(random(2,4));j++){
							enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),floor(random(0,4)),this.value));
							enemies[enemies.length-1].correct = false;
							enemies[enemies.length-1].position = this.position;
							enemies[enemies.length-1].positionMove = this.positionMove;
							enemies[enemies.length-1].totalDistance = this.totalDistance-50;
							enemies[enemies.length-1].direction = this.direction;
							enemies[enemies.length-1].reward = 0;
						}
					}
				}
				else{
					this.speed = this.standardSpeed;
					this.handMove = 0;
				}
			}
			else if((this.name === "Mega Speedy"||this.name === "Mega Quick")&&this.activated){
				if(this.time%150 === 75){
					this.speed = this.standardSpeed*3;
					this.randomGen = random(0,360/7);
					for(j=0;j<7;j++){
						bursts.push(new burst(this.x,this.y,2,25,this.randomGen+j*360/7));
					}
				}
				else if(this.speed>this.standardSpeed){
					this.speed-=1/10;
				}
			}
			else if((this.name === "Circuit"||this.name === "Bolt"||this.name === "Shock"||this.name === "Volt King"||this.name === "Lightning King"||this.name === "Nerf"||this.name === "Reconvenant"||this.name === "Discharge")&&this.activated){
				for(j in this.shocks){
					this.shocks[j][2]-=17;
					if(this.shocks[j][2]<=0){
						this.shocks[j][2] = 255;
						this.shocks[j][0] = random(0,360);
						this.shocks[j][1] = random(15,50);
					}
				}
				if(this.time%160 === 159&&this.name === "Circuit"){
					bursts.push(new burst(this.x,this.y,3,5,0));
					for(j in enemies){
						if(enemies[j].life<=100000){
							enemies[j].speed*=1.25;
							enemies[j].standardSpeed*=1.25;
							enemies[j].zaps++;
							for(var k=0;k<enemies[j].zaps;k++){
								bursts.push(new burst(enemies[j].x+k*16-enemies[j].zaps*8+8,enemies[j].y,5,1,0));
							}
						}
					}
				}
				else if(this.time%160 === 159&&this.name === "Nerf"){
					bursts.push(new burst(this.x,this.y,52,5,0));
					for(j in towers){
						towers[j].inhibit2 = 600;
						bursts.push(new burst(towers[j].x,towers[j].y,53,1,0));
					}
				}
			}
			else if(this.name === "Templar"||this.name === "Awakened Templar"){
				if(this.recharge === 0){
					this.shouldShoot = false;
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<30&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.recharge = 600;
						}
					}
				}
				else{
					this.recharge--;
					if(this.recharge>=450&&this.shouldShoot){
						this.speed = 0;
						if(this.recharge>=480){
							if(this.time%9 === 0){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-50+cos(this.direction+this.extraSpin)*-3,this.y+cos(this.direction+this.extraSpin)*50+sin(this.direction+this.extraSpin)*-3,0,this.direction+this.extraSpin));
							}
							if(this.recharge%60<45&&this.recharge%60>=15){
								this.extraSpin-=2.5;
							}
							else{
								this.extraSpin+=2.5;
							}
						}
					}
					else{
						this.speed = this.standardSpeed;
						this.extraSpin = 0;
					}
				}
			}
			else if(this.name === "Health Cultist"&&this.time%60 === 0&&this.activated){
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<125&&enemies[j].life<enemies[j].maxLife&&enemies[j].life>0&&enemies[j].maxLife<10000){
						enemies[j].life+=enemies[j].maxLife/6;
						enemies[j].life = min(enemies[j].life,enemies[j].maxLife);
						bursts.push(new burst(enemies[j].x,enemies[j].y,14,0.8,0));
						enemies[j].hitTimer = 600;
					}
				}
			}
			else if((this.name === "SCT"||this.name === "Adventurist"||this.name === "Elite Raybeamer"||this.name === "Agent Ducky"||this.name === "RocketLauncher"||this.name === "SniperRifle"||this.name === "GiantRocketLauncher"||this.name === "GiantRocketRapid"||this.name === "GiantRocketBurst"||this.name === "GiantShotgun"||this.name === "EnergyRocketLauncher"||this.name === "SniperBow"||this.name === "SniperInhibitor"||this.name === "BuffRocketLauncher"||this.name === "ChiefBlastLauncher"||this.name === "ChargeGiantRocket"||this.name === "GiantDemolitions"||this.name === "ChargeGiantBurst"||this.name === "Demolitions"||this.name === "ScoutBall"||this.name === "GiantScoutBall"||this.name === "Buff2RocketLauncher"||this.name === "Shotgun"||this.name === "SirNukesalot"||this.name === "ChargeSniperBow"||this.name === "GiantBurstDemolitions"||this.name === "GiantRocketHeal"||this.name === "ChargeRocketLauncher"||this.name === "Awakened SCT"||this.name === "PurgeGun"||this.name === "Button Man"||this.name === "Sharpshooter"||this.name === "Broderick"||this.name === "Gluckschmerz"||this.name === "Normal.gs"||this.name === "Quick.gs"||this.name === "Hefty.gs"||this.name === "Hidden.gs"||this.name === "Glass Cannon")&&this.activated){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(!this.shouldShoot&&(dist(this.x,this.y,towers[j].x,towers[j].y)<200||this.name === "SniperRifle"||this.name === "SniperBow"||this.name === "SniperInhibitor")&&floor(random(0,10)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal.x = towers[j].x;
							this.extraSpinGoal.y = towers[j].y;
							this.shouldShoot = true;
							this.recharge = 600;
						}
					}
				}
				else if(this.recharge>560){
					if(this.extraSpin<atan2(this.x-this.extraSpinGoal.x,this.extraSpinGoal.y-this.y)-this.direction-5){
						this.extraSpin+=10;
					}
					else if(this.extraSpin>atan2(this.x-this.extraSpinGoal.x,this.extraSpinGoal.y-this.y)-this.direction+5){
						this.extraSpin-=10;
					}
					if(abs(this.extraSpin-atan2(this.x-this.extraSpinGoal.x,this.extraSpinGoal.y-this.y)-this.direction)<5){
						this.recharge = 561;
						this.extraSpin = atan2(this.x-this.extraSpinGoal.x,this.extraSpinGoal.y-this.y)-this.direction;
					}
				}
				else if((this.recharge === 560||this.recharge === 550||this.recharge === 540)&&(this.name === "SCT"||this.name === "Adventurist"||this.name === "Awakened SCT"||this.name === "Button Man"||this.name === "Broderick")){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6,3,this.direction+this.extraSpin));
				}
				else if(this.recharge === 550&&(this.name === "Elite Raybeamer"||this.name === "Agent Ducky"||this.name === "Gluckschmerz"||this.name === "Normal.gs"||this.name === "Quick.gs"||this.name === "Hefty.gs"||this.name === "Hidden.gs")){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6,3,this.direction+this.extraSpin));
				}
				else if(this.recharge === 550&&(this.name === "RocketLauncher"||this.name === "GiantRocketLauncher"||this.name === "GiantRocketRapid"||this.name === "GiantRocketBurst"||this.name === "GiantRocketHeal"||this.name === "Glass Cannon")){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,38,this.direction+this.extraSpin));
					if(this.name === "GiantRocketBurst"){
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,38,this.direction+this.extraSpin-15));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,38,this.direction+this.extraSpin+15));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,38,this.direction+this.extraSpin-30));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,38,this.direction+this.extraSpin+30));
					}
					else if(this.name === "GiantRocketHeal"){
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,38,this.direction+this.extraSpin-20));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,38,this.direction+this.extraSpin+20));
						this.life+=3000;
						this.life = min(this.life,this.maxLife);
					}
				}
				else if(this.recharge === 550&&this.name === "SniperRifle"){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6*this.size,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6*this.size,16,this.direction+this.extraSpin));
				}
				else if(this.recharge === 550&&this.name === "GiantShotgun"){
					for(var k=0;k<15;k++){
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6*this.size,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6*this.size,45,this.direction+this.extraSpin+random(-25,25)));
					}
				}
				else if(this.recharge === 550&&(this.name === "EnergyRocketLauncher"||this.name === "BuffRocketLauncher"||this.name === "ChargeGiantRocket"||this.name === "ChargeGiantBurst"||this.name === "Buff2RocketLauncher"||this.name === "ChargeRocketLauncher")){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,46,this.direction+this.extraSpin));
					if(this.name === "ChargeGiantBurst"){
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,46,this.direction+this.extraSpin-15));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,46,this.direction+this.extraSpin+15));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,46,this.direction+this.extraSpin-30));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,46,this.direction+this.extraSpin+30));
					}
				}
				else if(this.recharge === 550&&this.name === "SniperBow"){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-10*this.size,this.y+cos(this.direction+this.extraSpin)*10*this.size,43,this.direction+this.extraSpin));
				}
				else if(this.recharge === 550&&this.name === "SniperInhibitor"){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6*this.size,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6*this.size,47,this.direction+this.extraSpin));
				}
				else if(this.recharge === 550&&this.name === "ChiefBlastLauncher"){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,48,this.direction+this.extraSpin));
				}
				else if(this.recharge === 550&&(this.name === "GiantDemolitions"||this.name === "Demolitions"||this.name === "GiantBurstDemolitions")){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,49,this.direction+this.extraSpin));
					if(this.name === "GiantBurstDemolitions"){
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,49,this.direction+this.extraSpin-15));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,49,this.direction+this.extraSpin+15));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,49,this.direction+this.extraSpin-30));
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,49,this.direction+this.extraSpin+30));
					}
				}
				else if(this.recharge === 550&&(this.name === "ScoutBall"||this.name === "GiantScoutBall")){
					bursts.push(new shot(this.x+cos(this.direction+this.extraSpin)*-9*this.size,this.y+sin(this.direction+this.extraSpin)*-9*this.size,50,this.direction+this.extraSpin));
				}
				else if(this.recharge === 550&&this.name === "Shotgun"){
					for(var k=0;k<3;k++){
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6*this.size,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6*this.size,45,this.direction+this.extraSpin+random(-25,25)));
					}
				}
				else if(this.recharge === 550&&this.name === "SirNukesalot"){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,51,this.direction+this.extraSpin));
				}
				else if(this.recharge === 550&&this.name === "ChargeSniperBow"){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-10*this.size,this.y+cos(this.direction+this.extraSpin)*10*this.size,52,this.direction+this.extraSpin));
				}
				else if((this.recharge>=540&&this.recharge<580&&this.recharge%5 === 0)&&this.name === "PurgeGun"){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6,63,this.direction+this.extraSpin+random(-3,3)));
				}
				else if((this.recharge === 560||this.recharge === 550||this.recharge === 540)&&this.name === "Sharpshooter"){
					bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6,64,this.direction+this.extraSpin));
				}
				if(this.name === "Button Man"&&this.recharge === 480){
					this.recharge = 600;
				}
				if(this.recharge>500&&this.recharge<540&&this.name !== "Button Man"){
					if(this.extraSpin<-5){
						this.extraSpin+=10;
					}
					else if(this.extraSpin>5){
						this.extraSpin-=10;
					}
				}
				if(!(this.name === "SCT"||this.name === "Adventurist"||this.name === "Elite Raybeamer"||this.name === "Agent Ducky"||this.name === "Awakened SCT")&&this.recharge<360||(this.name === "GiantRocketRapid"||this.name === "GiantDemolitions"||this.name === "GiantScoutBall")&&this.recharge<500){
					this.recharge = 0;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Soul Stealer"||this.name === "Electrolysis"||this.name === "Desolator"){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(!this.shouldShoot&&dist(this.x,this.y,towers[j].x,towers[j].y)<60&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							this.shouldShoot = true;
							this.recharge = 900;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=810){
					if(this.extraSpin<this.extraSpinGoal-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>this.extraSpinGoal+2){
						this.extraSpin-=4;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<2){
						this.recharge = 810;
					}
				}
				else if(this.recharge>=795){
					this.handMoveX++;
					this.handMoveY+=1.8;
					this.handSpin+=2;
				}
				else if(this.recharge>=775&&this.recharge<790){
					this.handSpin-=4;
				}
				else if(this.recharge === 772){
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<30&&(dist(this.x,this.y,towers[j].x,towers[j].y)<65||(this.name === "Electrolysis"||this.name === "Desolator")&&dist(this.x,this.y,towers[j].x,towers[j].y)<104)){
							towers[j].stun = max(towers[j].stun,300);
							if(this.name === "Desolator"){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),600,this.path));
							}
							else{
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),20,this.path));
							}
							enemies[enemies.length-1].correct = false;
							enemies[enemies.length-1].position = this.position;
							enemies[enemies.length-1].positionMove = this.positionMove;
							enemies[enemies.length-1].totalDistance = this.totalDistance-50;
							enemies[enemies.length-1].direction = this.direction;
							enemies[enemies.length-1].reward = false;
						}
					}
				}
				else if(this.recharge>=755&&this.recharge<770){
					this.handMoveX--;
					this.handMoveY-=1.8;
					this.handSpin+=2;
				}
				else if(this.recharge>=660&&this.recharge<750){
					if(this.extraSpin<-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>2){
						this.extraSpin-=4;
					}
				}
				if(this.recharge === 655||abs(this.extraSpin)<2&&this.recharge<750){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Summoner Boss"){
				if(this.time%600<32){
					this.handMove+=0.2;
					this.speed = 0;
				}
				else if(this.time%600<64){
					this.handMove-=0.2;
				}
				else{
					this.speed = this.standardSpeed;
				}
				if(this.time%600 === 32){
					bursts.push(new burst(this.x,this.y,9,4,0));
					for(j=0;j<4;j++){
						if(j === 0&&mode !== 0){
							enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),14,this.path));
						}
						else{
							enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),5,this.path));
						}
						enemies[enemies.length-1].correct = false;
						enemies[enemies.length-1].position = this.position;
						enemies[enemies.length-1].positionMove = this.positionMove;
						enemies[enemies.length-1].totalDistance = this.totalDistance-50;
						enemies[enemies.length-1].direction = this.direction;
						enemies[enemies.length-1].reward = false;
					}
				}
			}
			else if(this.name === "Fallen Guardian"||this.name === "Nuclear Guardian"||this.name === "Divine Guardian"||this.name === "Awakened Guardian"){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(!this.shouldShoot&&dist(this.x,this.y,towers[j].x,towers[j].y)<75&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							this.shouldShoot = true;
							this.recharge = 600;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=510){
					if(this.extraSpin<this.extraSpinGoal-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>this.extraSpinGoal+2){
						this.extraSpin-=4;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<2){
						this.recharge = 510;
					}
				}
				else if(this.recharge>=500){
					this.handSpin+=9;
				}
				else if(this.recharge>=485){
					this.handMove+=0.4;
				}
				else if(this.recharge === 483){
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<20&&dist(this.x,this.y,towers[j].x,towers[j].y)<75){
							if(this.name === "Nuclear Guardian"){
								towers[j].stun = max(towers[j].stun,195);
							}
							else if(this.name === "Divine Guardian"||this.name === "Awakened Guardian"){
								towers[j].stun = max(towers[j].stun,240);
							}
							else{
								towers[j].stun = max(towers[j].stun,165);
							}
						}
					}
				}
				else if(this.recharge>=465&&this.recharge<480){
					this.handMove-=0.4;
				}
				else if(this.recharge>=455&&this.recharge<465){
					this.handSpin-=9;
				}
				else if(this.recharge>=365&&this.recharge<455){
					if(this.extraSpin<-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>+2){
						this.extraSpin-=4;
					}
				}
				if(this.recharge === 360||abs(this.extraSpin)<2&&this.recharge<455){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Unknown"||this.name === "Amalgamation"||this.name === "Sentinel"||this.name === "Custodian"||this.name === "Awakened Unknown"||this.name === "Known"){
 				if(this.attackTimer<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<80&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.usingAttack = 0;
							this.attackTimer = 600;
						}
					}
				}
				else{
					if(this.attackTimer === 600){
						this.speed = 0;
					}
					else if(this.attackTimer>540&&this.attackTimer<600){
						this.size = this.baseSize+sin(((this.attackTimer)-540)*3)/2;
					}
					else if(this.attackTimer === 540){
						bursts.push(new burst(this.x,this.y,6,4,0));
						this.speed = this.standardSpeed;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<80){
								towers[j].stun = max(towers[j].stun,75);
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Fallen Soul"||this.name === "SpyBot"||this.name === "KnightBot"||this.name === "ChargeKnightBot"||this.name === "BoostRocketLauncher"||this.name === "SamuraiBot"||this.name === "GiantKnightBot"||this.name === "Awakened Soul"||this.name === "PurgeStaff"){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(!this.shouldShoot&&(dist(this.x,this.y,towers[j].x,towers[j].y)<52||(this.name === "SamuraiBot"||this.name === "GiantKnightBot")&&dist(this.x,this.y,towers[j].x,towers[j].y)<78||this.name === "PurgeStaff"&&dist(this.x,this.y,towers[j].x,towers[j].y)<65)&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							this.shouldShoot = true;
							this.recharge = 450;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=360){
					if(this.extraSpin<this.extraSpinGoal-4){
						this.extraSpin+=8;
					}
					else if(this.extraSpin>this.extraSpinGoal+4){
						this.extraSpin-=8;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<4){
						this.recharge = 360;
					}
				}
				else if(this.recharge>=350){
					this.handMove++;
				}
				else if(this.recharge === 347){
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<30&&(dist(this.x,this.y,towers[j].x,towers[j].y)<52||(this.name === "SamuraiBot"||this.name === "GiantKnightBot")&&dist(this.x,this.y,towers[j].x,towers[j].y)<78||this.name === "PurgeStaff"&&dist(this.x,this.y,towers[j].x,towers[j].y)<65)){
							if(this.name === "ChargeKnightBot"||this.name === "GiantKnightBot"){
								towers[j].stun = max(towers[j].stun,420);
							}
							else if(this.name === "KnightBot"){
								towers[j].stun = max(towers[j].stun,210);
							}
							else if(this.name === "SamuraiBot"){
								towers[j].stun = max(towers[j].stun,270);
							}
							else if(this.name === "PurgeStaff"){
								towers[j].stun = max(towers[j].stun,900);
							}
							else{
								towers[j].stun = max(towers[j].stun,90);
							}
						}
					}
				}
				else if(this.recharge>=335&&this.recharge<345){
					this.handMove--;
				}
				else if(this.recharge>=240&&this.recharge<330){
					if(this.extraSpin<-4){
						this.extraSpin+=8;
					}
					else if(this.extraSpin>4){
						this.extraSpin-=8;
					}
				}
				if(this.recharge === 240||abs(this.extraSpin)<4&&this.recharge<330){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
				if(this.name === "BoostRocketLauncher"&&this.time%300 === 0){
					this.life-=20;
					bursts.push(new burst(this.x,this.y,12,0.9,0));
				}
			}
			else if(this.name === "Gold Guard"){
				if(this.life<this.maxLife*3/4){
					if(this.recharge<=0){
						this.shouldShoot = false;
						for(j in towers){
							if(!this.shouldShoot&&dist(this.x,this.y,towers[j].x,towers[j].y)<60&&floor(random(0,5)) === 0&&towers[j].stun<=0){
								this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
								this.shouldShoot = true;
								this.recharge = 450;
								this.speed = 0;
							}
						}
					}
					else if(this.recharge>=360){
						if(this.extraSpin<this.extraSpinGoal-3){
							this.extraSpin+=6;
						}
						else if(this.extraSpin>this.extraSpinGoal+3){
							this.extraSpin-=6;
						}
						if(abs(this.extraSpin-this.extraSpinGoal)<3){
							this.recharge = 360;
						}
					}
					else if(this.recharge>=350){
						this.handMove+=2.5;
					}
					else if(this.recharge === 347){
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<30&&dist(this.x,this.y,towers[j].x,towers[j].y)<60){
								towers[j].stun = max(towers[j].stun,210);
							}
						}
					}
					else if(this.recharge>=335&&this.recharge<345){
						this.handMove-=2.5;
					}
					else if(this.recharge>=240&&this.recharge<330){
						if(this.extraSpin<-3){
							this.extraSpin+=6;
						}
						else if(this.extraSpin>3){
							this.extraSpin-=6;
						}
					}
					if(this.recharge === 240||abs(this.extraSpin)<3&&this.recharge<330){
						this.speed = this.standardSpeed/5;
					}
					if(this.recharge>0){
						this.recharge--;
					}
				}
				else{
					this.speed = this.standardSpeed;
					this.handMove = 0;
					this.recharge = 0;
					this.extraSpin = 0;
					this.extraSpinGoal = 0;
				}
			}
			else if(this.name === "Vindicator"||this.name === "Firewall"){
				if(this.shield>0&&this.name === "Firewall"){
					this.defense = 200;
				}
				else if(this.shield>0){
					this.defense = 100;
				}
				else{
					this.defense = 0;
				}
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(!this.shouldShoot&&dist(this.x,this.y,towers[j].x,towers[j].y)<240&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							this.shouldShoot = true;
							this.recharge = 600;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=510){
					if(this.extraSpin<this.extraSpinGoal-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>this.extraSpinGoal+2){
						this.extraSpin-=4;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<2){
						this.recharge = 510;
					}
				}
				else if(this.recharge>=495){
					this.handMoveX++;
					this.handMoveY+=1.8;
					this.handSpin++;
				}
				else if(this.recharge>=460&&this.recharge<490){
					this.handSpin--;
					this.hammerSpin+=24;
					this.hammerMove = sin((-this.recharge+490)*6)*80;
				}
				else if(this.recharge === 457){
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<15&&dist(this.x,this.y,towers[j].x,towers[j].y)<240){
							if(this.name === "Firewall"){
								towers[j].stun = max(towers[j].stun,360);
							}
							else{
								towers[j].stun = max(towers[j].stun,270);
							}
						}
					}
				}
				else if(this.recharge>=440&&this.recharge<455){
					this.handMoveX--;
					this.handMoveY-=1.8;
					this.handSpin++;
				}
				else if(this.recharge>=345&&this.recharge<435){
					if(this.extraSpin<-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>2){
						this.extraSpin-=4;
					}
				}
				if(this.recharge === 330||abs(this.extraSpin)<2&&this.recharge<435){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Molten Titan"||this.name === "Scorcher"){
				if(this.attackTimer<=0){
					if(this.wantAttack === 0){
						this.shouldShoot = false;
						for(j in towers){
							if((dist(this.x,this.y,towers[j].x,towers[j].y)<120&&this.name === "Molten Titan"||dist(this.x,this.y,towers[j].x,towers[j].y)<96&&this.name === "Scorcher")&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 0;
								this.attackTimer = 300;
							}
						}
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 1;
							this.attackTimer = 395;
						}
					}
					else if(this.wantAttack === 2){
						this.shouldShoot = false;
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<40&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 2;
								this.attackTimer = 365;
							}
						}
					}
					else if(this.wantAttack === 3){
						this.shouldShoot = false;
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<25&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 3;
								this.attackTimer = 365;
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240&&this.name === "Molten Titan"){
							bursts.push(new burst(this.x,this.y,6,5,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<120){
									towers[j].stun = max(towers[j].stun,210);
								}
							}
						}
						else if(this.attackTimer === 240&&this.name === "Scorcher"){
							bursts.push(new burst(this.x,this.y,6,4,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<96){
									towers[j].stun = max(towers[j].stun,150);
								}
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 395){
							this.speed = 0;
						}
						else if(this.attackTimer>=390){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>345){
							this.handSpin-=2;
						}
						else if(this.attackTimer>295&&(this.attackTimer%10 === 0&&this.name === "Molten Titan"||this.attackTimer%25 === 0&&this.name === "Scorcher")){
							enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),31,this.path));
							enemies[enemies.length-1].correct = false;
							enemies[enemies.length-1].position = this.position;
							enemies[enemies.length-1].positionMove = this.positionMove;
							enemies[enemies.length-1].totalDistance = this.totalDistance-50;
							enemies[enemies.length-1].direction = this.direction;
							enemies[enemies.length-1].reward = false;
						}
						else if(this.attackTimer>240&&this.attackTimer<=285){
							this.handSpin+=2;
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed;
							this.handSpin = 0;
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer === 365){
							this.speed = 0;
						}
						else if(this.attackTimer>=360){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>300){
							this.handSpin-=2.5;
						}
						else if(this.attackTimer>240){
							this.handSpin+=2.5;
							if(this.attackTimer>250&&(this.attackTimer%10 === 0&&this.name === "Molten Titan"||this.attackTimer%20 === 0&&this.name === "Scorcher")){
								bursts.push(new shot(this.x,this.y,7,this.direction+90+this.handSpin));
							}
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed;
							this.handSpin = 0;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Void Reaver"||this.name === "Nuclear Void Reaver"){
				if(this.name === "Nuclear Void Reaver"){
					for(j in this.shocks){
						this.shocks[j][2]-=17;
						if(this.shocks[j][2]<=0){
							this.shocks[j][2] = 255;
							this.shocks[j][0] = random(0,360);
								this.shocks[j][1] = random(15,50);
						}
					}
				}
				if(this.attackTimer<=0||(this.life<75000||this.name === "Nuclear Void Reaver"&&this.life<100000)&&this.attackTimer<=240){
					if(this.life<75000||this.name === "Nuclear Void Reaver"&&this.life<100000){
						this.speed = this.standardSpeed*3;
						if(this.name === "Nuclear Void Reaver"){
							this.color2Goal = [0,255,0];
						}
						else{
							this.color2Goal = [100,0,0];
						}
						for(j in this.color2){
							if(this.color2[j]<this.color2Goal[j]){
								this.color2[j]++;
							}
							if(this.color2[j]>this.color2Goal[j]){
								this.color2[j]--;
							}
						}
					}
					else{
						if((this.life<=300000||this.name === "Nuclear Void Reaver"&&this.life<=400000)&&this.armorFade>0){
							this.usingAttack = 5;
							this.attackTimer = 375;
						}
						else if(this.wantAttack === 0){
							this.shouldShoot = false;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<125&&!this.shouldShoot&&towers[j].stun<=0){
									this.shouldShoot = true;
									this.usingAttack = 0;
									this.attackTimer = 300;
								}
							}
						}
						else if(this.wantAttack === 1){
							this.shouldShoot = false;
							if(floor(random(0,300)) === 0&&!this.shouldShoot){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 395;
							}
						}
						else if(this.wantAttack === 2){
							this.shouldShoot = false;
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<40&&!this.shouldShoot&&towers[j].stun<=0){
									this.shouldShoot = true;
									this.usingAttack = 2;
									this.attackTimer = 365;
								}
							}
						}
						else if(this.wantAttack === 3){
							this.shouldShoot = false;
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<25&&!this.shouldShoot&&towers[j].stun<=0){
									this.shouldShoot = true;
									this.usingAttack = 3;
									this.attackTimer = 365;
								}
							}
						}
						else if(this.wantAttack === 4){
							this.shouldShoot = false;
							if(floor(random(0,300)) === 0&&!this.shouldShoot){
								this.shouldShoot = true;
								this.usingAttack = 4;
								this.attackTimer = 425;
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
									if(this.name === "Nuclear Void Reaver"){
										towers[j].stun = max(towers[j].stun,360);
									}
									else{
										towers[j].stun = max(towers[j].stun,240);
									}
								}
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 395){
							this.speed = 0;
						}
						else if(this.attackTimer>=390){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>345){
							this.handSpin-=2;
						}
						else if(this.attackTimer>295&&(this.name === "Void Reaver"&&this.time%8 === 0||this.name === "Nuclear Void Reaver"&&this.time%5 === 0)){
							enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.spawns[floor(random(0,this.spawns.length-0.5))],this.path));
							enemies[enemies.length-1].correct = false;
							enemies[enemies.length-1].position = this.position;
							enemies[enemies.length-1].positionMove = this.positionMove;
							enemies[enemies.length-1].totalDistance = this.totalDistance-50;
							enemies[enemies.length-1].direction = this.direction;
							enemies[enemies.length-1].reward = false;
						}
						else if(this.attackTimer>240&&this.attackTimer<=285){
							this.handSpin+=2;
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed;
							this.handSpin = 0;
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer === 365){
							this.speed = 0;
						}
						else if(this.attackTimer>=360){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>300){
							this.handSpin-=2;
						}
						else if(this.attackTimer>240){
							this.handSpin+=2;
							if(this.attackTimer>=270&&(this.name === "Void Reaver"&&this.attackTimer%10 === 0||this.name === "Nuclear Void Reaver"&&this.time%8 === 0)){
								bursts.push(new shot(this.x,this.y,1,this.direction+90+this.handSpin));
							}
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed*2;
							this.handSpin = 0;
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer === 365){
							this.speed = 0;
						}
						else if(this.attackTimer>=360){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>315){
							this.handSpin-=2;
						}
						else if(this.attackTimer>285&&this.attackTimer%7 === 0){
							bursts.push(new burst(this.x,this.y,11,25,this.direction+90));
						}
						else if(this.attackTimer === 285){
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction))<25||this.name === "Nuclear Void Reaver"&&abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction))<30){
									towers[j].stun = 600;
									enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),20,this.path));
									enemies[enemies.length-1].correct = false;
									enemies[enemies.length-1].position = this.position;
									enemies[enemies.length-1].positionMove = this.positionMove;
									enemies[enemies.length-1].totalDistance = this.totalDistance-50;
									enemies[enemies.length-1].direction = this.direction;
									enemies[enemies.length-1].reward = false;
								}
							}
						}
						else if(this.attackTimer>240&&this.attackTimer<285){
							this.handSpin+=2;
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed*2;
							this.handSpin = 0;
						}
					}
					else if(this.usingAttack === 4){
						if(this.attackTimer === 425){
							this.speed = 0;
						}
						else if(this.attackTimer>=420){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>240){
							this.handSpin-=2;
							if(this.name === "Void Reaver"&&this.attackTimer%30 === 0||this.name === "Nuclear Void Reaver"&&this.time%20 === 0){
								bursts.push(new shot(this.x,this.y,1,this.direction+90+this.handSpin));
							}
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed*2;
							this.handSpin = 0;
						}
					}
					else if(this.usingAttack === 5){
						if(this.attackTimer === 375){
							this.speed = 0;
						}
						else if(this.attackTimer>255&&this.attackTimer<375){
							this.size = this.baseSize+sin(((this.attackTimer)-255)*1.5);
						}
						else if(this.attackTimer>240&&this.attackTimer<=255){
							this.armorFade-=18;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,6,0));
							bursts.push(new burst(this.x,this.y,6,10,0));
							bursts.push(new burst(this.x,this.y,6,16,0));
							this.speed = this.standardSpeed*2;
							this.spawnTimer = 720;
							enemies.push(new enemy(levels[level].startX[this.path%levels[level].paths.length],levels[level].startY[this.path%levels[level].paths.length],26,this.path));
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
									if(this.name === "Nuclear Void Reaver"){
										towers[j].stun = max(towers[j].stun,450);
									}
									else{
										towers[j].stun = max(towers[j].stun,300);
									}
								}
							}
							for(j=0;j<12;j++){
								bursts.push(new shot(this.x,this.y,1,this.direction+j*30));
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Speedy King"&&this.activated){
				if(this.time%720 === 719){
					bursts.push(new burst(this.x,this.y,24,1,0));
					this.speed*=1.1;
					this.standardSpeed*=1.1;
					this.zaps++;
					for(var k=0;k<this.zaps;k++){
						bursts.push(new burst(this.x+k*16-this.zaps*8+8,this.y,5,1,0));
					}
				}
			}
			else if(this.name === "Gravekeeper"){
				if(this.recharge<=0){
					this.shouldShoot = false;
					if(floor(random(0,300)) === 0&&!this.shouldShoot){
						this.shouldShoot = true;
						this.recharge = 600;
						this.speed = 0;
					}
				}
				else if(this.recharge>=585){
					this.handMoveX++;
					this.handMoveY+=1.8;
					this.handSpin+=2;
				}
				else if(this.recharge>=490&&this.recharge<580){
					if(this.recharge>=520&&this.recharge<550){
						this.handSpin+=2;
					}
					else{
						this.handSpin-=2;
					}
					if(this.recharge%15 === 0){
						enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.spawns[floor(random(0,this.spawns.length))],this.path));
						enemies[enemies.length-1].correct = false;
						enemies[enemies.length-1].position = this.position;
						enemies[enemies.length-1].positionMove = this.positionMove;
						enemies[enemies.length-1].totalDistance = this.totalDistance-50;
						enemies[enemies.length-1].direction = this.direction;
						enemies[enemies.length-1].reward = false;
					}
				}
				else if(this.recharge>=470&&this.recharge<485){
					this.handMoveX--;
					this.handMoveY-=1.8;
					this.handSpin+=2;
				}
				if(this.recharge === 470){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Jaxe"||this.name === "Expired Jaxe"||this.name === "Minion Jaxe"){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(!this.shouldShoot&&(dist(this.x,this.y,towers[j].x,towers[j].y)<90&&this.name !== "Minion Jaxe"||dist(this.x,this.y,towers[j].x,towers[j].y)<75)&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							this.shouldShoot = true;
							this.recharge = 600;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=510){
					if(this.extraSpin<this.extraSpinGoal-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>this.extraSpinGoal+2){
						this.extraSpin-=4;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<2){
						this.recharge = 510;
					}
				}
				else if(this.recharge>=495){
					this.handMoveX++;
					this.handMoveY+=1.8;
					this.handSpin+=2.5;
				}
				else if(this.recharge>=475&&this.recharge<490){
					this.handSpin-=5;
				}
				else if(this.recharge === 472){
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<60&&(dist(this.x,this.y,towers[j].x,towers[j].y)<120&&this.name !== "Minion Jaxe"||dist(this.x,this.y,towers[j].x,towers[j].y)<100)){
							if(this.name === "Minion Jaxe"){
								towers[j].stun = max(towers[j].stun,480);
							}
							else{
								towers[j].stun = max(towers[j].stun,720);
							}
						}
					}
				}
				else if(this.recharge>=455&&this.recharge<470){
					this.handMoveX--;
					this.handMoveY-=1.8;
					this.handSpin+=2.5;
				}
				else if(this.recharge>=360&&this.recharge<450){
					if(this.extraSpin<-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>2){
						this.extraSpin-=4;
					}
				}
				if(this.recharge === 355||abs(this.extraSpin)<2&&this.recharge<450){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Developer"){
				if(this.attackTimer<=0){
					if(this.wantAttack === 0){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<150&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 0;
								this.attackTimer = 300;
							}
						}
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 1;
							this.attackTimer = 395;
						}
					}
					else if(this.wantAttack === 2){
						this.shouldShoot = false;
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<45&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 2;
								this.attackTimer = 365;
							}
						}
					}
					else if(this.wantAttack === 3){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 3;
							this.attackTimer = 255;
						}
					}
					else if(this.wantAttack === 4){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 4;
							this.attackTimer = 425;
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							for(j=0;j<30;j++){
								bursts.push(new burst(this.x,this.y,26,this.size*random(12,36),random(0,360)));
							}
							bursts.push(new burst(this.x,this.y,6,7,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<150){
									towers[j].stun = max(towers[j].stun,360);
								}
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 395){
							this.speed = 0;
						}
						else if(this.attackTimer>=390){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>345){
							this.handSpin-=2;
						}
						else if(this.attackTimer>295&&this.attackTimer%15 === 0){
							enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),55,this.path));
							enemies[enemies.length-1].correct = false;
							enemies[enemies.length-1].position = this.position;
							enemies[enemies.length-1].positionMove = this.positionMove;
							enemies[enemies.length-1].totalDistance = this.totalDistance-50;
							enemies[enemies.length-1].direction = this.direction;
							enemies[enemies.length-1].reward = false;
						}
						else if(this.attackTimer>240&&this.attackTimer<=285){
							this.handSpin+=2;
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed;
							this.handSpin = 0;
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer === 365){
							this.speed = 0;
						}
						else if(this.attackTimer>=360){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>300){
							this.handSpin-=2.5;
						}
						else if(this.attackTimer>240){
							this.handSpin+=2.5;
							if(this.attackTimer>=260&&this.time%4 === 0){
								bursts.push(new shot(this.x-sin(this.direction+90+this.handSpin)*20*this.size,this.y+cos(this.direction+90+this.handSpin)*20*this.size,11,this.direction+90+this.handSpin));
							}
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed;
							this.handSpin = 0;
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer>=250){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
								this.speed = 0;
							}
						}
						else if(this.attackTimer === 230){
							this.shieldTimer = 540;
						}
						else if(this.attackTimer === 210){
							this.speed = this.standardSpeed;
							this.handSpin = 0;
						}
					}
					else if(this.usingAttack === 4){
						if(this.attackTimer === 425){
							this.speed = 0;
						}
						else if(this.attackTimer>=420){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>240){
							this.handSpin-=2;
							if(this.time%9 === 0){
								bursts.push(new shot(this.x-sin(this.direction+90+this.handSpin)*20*this.size,this.y+cos(this.direction+90+this.handSpin)*20*this.size,11,this.direction+90+this.handSpin));
							}
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed;
							this.handSpin = 0;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Sword Boss"){
				if(this.attackTimer<=0){
					if(this.swordFly === 0){
						if(this.life<this.maxLife/4&&this.gotSword){
							this.attackTimer = 150;
							this.usingAttack = 4;
							this.speed = 0;
						}
						if(this.life<=this.maxLife*3/4&&!this.gotSword){
							this.attackTimer = 200;
							this.usingAttack = 0;
							this.speed = 0;
						}
						if(this.gotSword&&this.attackTimer === 0&&this.wantAttack === 1){
							this.shouldShoot = false;
							for(j in towers){
								if(!this.shouldShoot&&dist(this.x,this.y,towers[j].x,towers[j].y)<100&&floor(random(0,5)) === 0&&towers[j].stun<=0){
									this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
									this.shouldShoot = true;
									this.attackTimer = 300;
									this.usingAttack = 1;
									this.speed = 0;
								}
							}
						}
						if(this.attackTimer === 0&&this.wantAttack === 2){
							this.shouldShoot = false;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<110&&!this.shouldShoot&&towers[j].stun<=0){
									this.shouldShoot = true;
									this.usingAttack = 2;
									this.attackTimer = 150;
								}
							}
						}
						if(this.gotSword&&this.attackTimer === 0&&this.wantAttack === 3){
							this.shouldShoot = false;
							if(floor(random(0,1200)) === 0){
								this.shouldShoot = true;
								this.attackTimer = 300;
								this.usingAttack = 3;
								this.speed = 0;
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer>=195){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>=150){
							this.handSpin+=3;
							this.handMove-=0.3;
							if(this.attackTimer === 150){
								this.gotSword = true;
								bursts.push(new burst(this.x,this.y,6,8,0));
								for(j in towers){
									if(dist(this.x,this.y,towers[j].x,towers[j].y)<150){
										towers[j].stun = max(towers[j].stun,300);
									}
								}
							}
						}
						else if(this.attackTimer>=60){
							this.life+=this.maxLife/360;
							this.handMove-=0.1;
						}
						else if(this.attackTimer>=15){
							this.handSpin-=3;
							this.handMove+=0.5;
							this.swordSpin+=2;
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer>=210){
							if(this.extraSpin<this.extraSpinGoal-2){
								this.extraSpin+=4;
							}
							else if(this.extraSpin>this.extraSpinGoal+2){
								this.extraSpin-=4;
							}
							if(abs(this.extraSpin-this.extraSpinGoal)<2){
								this.attackTimer = 210;
							}
						}
						else if(this.attackTimer>=180){
							this.handSpin-=3;
							this.swordSpin+=3;
						}
						else if(this.attackTimer>=165){
							this.handMove-=0.5;
							if(this.attackTimer === 165){
								for(j in towers){
									if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<30&&dist(this.x,this.y,towers[j].x,towers[j].y)<105){
										towers[j].stun = max(towers[j].stun,1200);
									}
								}
							}
						}
						else if(this.attackTimer>=150){
							this.handMove+=0.5;
						}
						else if(this.attackTimer>=120){
							this.handSpin+=3;
							this.swordSpin-=3;
						}
						else if(this.attackTimer>=30){
							if(this.extraSpin<-2){
								this.extraSpin+=4;
							}
							else if(this.extraSpin>2){
								this.extraSpin-=4;
							}
							if(abs(this.extraSpin)<2){
								this.attackTimer = 30;
							}
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer === 150){
							this.speed = 0;
						}
						else if(this.attackTimer>90&&this.attackTimer<150){
							this.size = this.baseSize+sin(((this.attackTimer)-90)*3)/2;
						}
						else if(this.attackTimer === 90){
							bursts.push(new burst(this.x,this.y,6,6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
									towers[j].stun = max(towers[j].stun,300);
								}
							}
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer>=270){
							this.handSpin-=3;
							this.swordSpin+=3;
						}
						else if(this.attackTimer>=255){
							this.handMove-=0.5;
						}
						else if(this.attackTimer>=75){
							if(this.attackTimer%10 === 0){
								enemies.push(new enemy(levels[level].startX[this.path],levels[level].startY[this.path],14,this.path));
								enemies[enemies.length-1].reward = false;
								enemies[enemies.length-1].speed*=3;
								enemies[enemies.length-1].standardSpeed*=3;
							}
						}
						else if(this.attackTimer>=60){
							this.handMove+=0.5;
						}
						else if(this.attackTimer>=30){
							this.handSpin+=3;
							this.swordSpin-=3;
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 4){
						if(this.attackTimer>=145){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>=140){
							this.handSpin-=3;
							this.swordSpin+=3;
						}
						else if(this.attackTimer>=80){
							this.swordFly+=20;
							if(this.attackTimer === 80){
								bursts.push(new burst(this.x-sin(this.direction)*1200,this.y+cos(this.direction)*1200,28,100,0));
								for(j in towers){
									towers[j].stun = max(towers[j].stun,240);
								}
								this.gotSword = false;
							}
						}
						else if(this.attackTimer>=75){
							this.handSpin+=3;
							this.swordSpin-=3;
						}
						else{
							this.speed = this.standardSpeed*2;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Dodgeable"&&this.activated){
				if(this.scare){
					this.speed = this.standardSpeed*3;
					if(this.time%3 === 0){
						bursts.push(new burst(this.x,this.y,2,15,random(0,360)));
					}
				}
				else{
					this.speed = this.standardSpeed;
				}
				this.scare = false;
			}
			else if(this.name === "Undodgeable"&&this.activated){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<150&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.usingAttack = 0;
							this.attackTimer = 600;
						}
					}
				}
				else{
					if(this.attackTimer === 600){
						this.speed = 0;
					}
					else if(this.attackTimer>540&&this.attackTimer<600){
						this.size = this.baseSize+sin(((this.attackTimer)-540)*3)/2;
					}
					else if(this.attackTimer === 540){
						bursts.push(new burst(this.x,this.y,6,10,0));
						this.speed = this.standardSpeed;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<225){
								towers[j].stun = max(towers[j].stun,360);
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Precision"&&this.activated){
				if(this.scare>0){
					this.scare--;
					this.speed = this.standardSpeed*2;
					if(this.time%10 === 0){
						bursts.push(new burst(this.x,this.y,2,15,random(0,360)));
					}
				}
				else{
					this.speed = this.standardSpeed;
				}
			}
			else if((this.name === "Ruined Boss"||this.name === "HeavyWeight"||this.name === "LightWeight"||this.name === "CaptainPunch")&&this.activated){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if((dist(this.x,this.y,towers[j].x,towers[j].y)<50||dist(this.x,this.y,towers[j].x,towers[j].y)<100&&this.name === "CaptainPunch")&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							this.recharge = 610;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=600){
					if(this.rate%45>=1){
						this.rate++;
						this.recharge++;
					}
				}
				else if(this.recharge>=510){
					if(this.extraSpin<this.extraSpinGoal-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>this.extraSpinGoal+2){
						this.extraSpin-=4;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<2){
						this.recharge = 510;
					}
				}
				else if(this.recharge>=495){
					this.handSpin-=6;
				}
				else if(this.recharge>=480){
					this.handMove-=0.6;
				}
				else if(this.recharge === 477){
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<40&&dist(this.x,this.y,towers[j].x,towers[j].y)<65||abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<60&&dist(this.x,this.y,towers[j].x,towers[j].y)<130&&this.name === "CaptainPunch"){
							if(this.name === "LightWeight"){
								towers[j].stun = max(towers[j].stun,450);
							}
							else if(this.name === "CaptainPunch"){
								towers[j].stun = max(towers[j].stun,2250);
							}
							else{
								towers[j].stun = max(towers[j].stun,750);
							}
						}
					}
				}
				else if(this.recharge>=460&&this.recharge<475){
					this.handMove+=0.6;
				}
				else if(this.recharge>=445&&this.recharge<460){
					this.handSpin+=6;
				}
				else if(this.recharge>=355&&this.recharge<445){
					if(this.extraSpin<-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>2){
						this.extraSpin-=4;
					}
				}
				if(this.recharge === 355||abs(this.extraSpin)<2&&this.recharge<440){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if((this.name === "Raider"||this.name === "Energized Raider")&&this.activated){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<200&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = ((atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)+720)%360;
							this.recharge = 900;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=810){
					if(this.extraSpin<this.extraSpinGoal-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>this.extraSpinGoal+2){
						this.extraSpin-=4;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<2){
						this.recharge = 810;
					}
				}
				else if(this.recharge === 807){
					if(this.name === "Energized Raider"){
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-22+cos(this.direction+this.extraSpin)*1,this.y+cos(this.direction+this.extraSpin)*22+sin(this.direction+this.extraSpin)*1,15,this.direction+this.extraSpin));
						for(j=0;j<5;j++){
							bursts.push(new burst(this.x+sin(this.direction+this.extraSpin)*-22+cos(this.direction+this.extraSpin)*1,this.y+cos(this.direction+this.extraSpin)*22+sin(this.direction+this.extraSpin)*1,33,random(7,18),this.direction+this.extraSpin+90+random(-25,25)));
						}
					}
					else{
						bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-22+cos(this.direction+this.extraSpin)*1,this.y+cos(this.direction+this.extraSpin)*22+sin(this.direction+this.extraSpin)*1,14,this.direction+this.extraSpin));
						for(j=0;j<5;j++){
							bursts.push(new burst(this.x+sin(this.direction+this.extraSpin)*-22+cos(this.direction+this.extraSpin)*1,this.y+cos(this.direction+this.extraSpin)*22+sin(this.direction+this.extraSpin)*1,21,random(7,18),this.direction+this.extraSpin+90+random(-25,25)));
						}
					}
				}
				else if(this.recharge>=710&&this.recharge<800){
					if(this.extraSpin<-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>2){
						this.extraSpin-=4;
					}
				}
				if(this.recharge === 710||abs(this.extraSpin)<2&&this.recharge<790){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if((this.name === "Buried"||this.name === "Flanker")&&this.activated){
				if(this.buryTimer>0){
					if(this.buryTimer<661&&this.buryTimer%15 === 0){
						bursts.push(new burst(this.x,this.y,35,this.size*10,random(0,360)));
					}
					if(this.buryTimer<31){
						this.burying-=1/30;
						this.collideSize-=100;
						this.collideSize2-=100;
						this.speed = 0;
					}
					else if(this.buryTimer>=631&&this.buryTimer<661){
						this.burying+=1/30;
						this.collideSize+=100;
						this.collideSize2+=100;
						this.speed = 0;
					}
					else{
						if(level !== 0&&this.buryTimer%4 === 0){
							this.buryTimer++;
						}
						this.speed = this.standardSpeed;
					}
					this.buryTimer++;
				}
				else if(this.life<=this.maxLife/2&&this.buryTimer === 0){
					this.buryTimer++;
				}
			}
			else if(this.name === "Ducky"||this.name === "War Machine"||this.name === "Hectisce"){
				if(this.recharge === 0){
					this.shouldShoot = false;
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<20&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.recharge = 900;
						}
					}
				}
				else{
					this.recharge--;
					if(this.recharge>=600&&this.shouldShoot){
						this.speed = 0;
						if(this.recharge>=660){
							if(this.time%15 === 0&&this.name === "Ducky"){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-30+cos(this.direction+this.extraSpin)*-31,this.y+cos(this.direction+this.extraSpin)*30+sin(this.direction+this.extraSpin)*-31,16,this.direction+this.extraSpin+random(-15,15)));
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-30+cos(this.direction+this.extraSpin)*31,this.y+cos(this.direction+this.extraSpin)*30+sin(this.direction+this.extraSpin)*31,16,this.direction+this.extraSpin+random(-15,15)));
							}
							else if(this.time%15 === 0&&this.name === "War Machine"){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-30+cos(this.direction+this.extraSpin)*-48,this.y+cos(this.direction+this.extraSpin)*30+sin(this.direction+this.extraSpin)*-48,16,this.direction+this.extraSpin+random(-15,15)));
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-30+cos(this.direction+this.extraSpin)*48,this.y+cos(this.direction+this.extraSpin)*30+sin(this.direction+this.extraSpin)*48,16,this.direction+this.extraSpin+random(-15,15)));
							}
							else if(this.time%25 === 0&&this.name === "Hectisce"){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-27+cos(this.direction+this.extraSpin)*-25,this.y+cos(this.direction+this.extraSpin)*27+sin(this.direction+this.extraSpin)*-25,16,this.direction+this.extraSpin+random(-5,5)));
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-27+cos(this.direction+this.extraSpin)*25,this.y+cos(this.direction+this.extraSpin)*27+sin(this.direction+this.extraSpin)*25,16,this.direction+this.extraSpin+random(-5,5)));
							}
							if(this.name === "War Machine"){
								if(this.recharge%120<90&&this.recharge%120>=30){
									this.extraSpin--;
								}
								else{
									this.extraSpin++;
								}
							}
							else{
								if(this.recharge%120<90&&this.recharge%120>=30){
									this.extraSpin-=1.5;
								}
								else{
									this.extraSpin+=1.5;
								}
							}
						}
					}
					else{
						this.speed = this.standardSpeed;
						this.extraSpin = 0;
					}
				}
			}
			else if(this.name === "Necromancer 2"&&this.activated){
				if(this.time%240>=180&&this.time%240<210){
					this.handMove-=2;
					this.speed = 0;
				}
				else if(this.time%240>=210){
					this.handMove+=2;
					if(this.time%240 === 210){
						for(j=0;j<2;j++){
							enemies.push(new enemy(this.x+random(-35,35),this.y+random(-35,35),95,this.path));
							enemies[enemies.length-1].correct = false;
							enemies[enemies.length-1].position = this.position;
							enemies[enemies.length-1].positionMove = this.positionMove;
							enemies[enemies.length-1].totalDistance = this.totalDistance-50;
							enemies[enemies.length-1].direction = this.direction;
							enemies[enemies.length-1].reward = false;
						}
					}
				}
				else{
					this.speed = this.standardSpeed;
				}
			}
			else if(this.name === "Stomper"&&this.activated){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<60&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.usingAttack = 0;
							this.attackTimer = 600;
						}
					}
				}
				else{
					if(this.attackTimer === 600){
						this.speed = 0;
					}
					else if(this.attackTimer>540&&this.attackTimer<600){
						this.size = this.baseSize+sin(((this.attackTimer)-540)*3)/4;
					}
					else if(this.attackTimer === 540){
						bursts.push(new burst(this.x,this.y,6,3,0));
						this.speed = this.standardSpeed;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<65){
								towers[j].stun = max(towers[j].stun,45);
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Dark Necromancer"&&this.time%75 === 0&&this.activated&&enemies.length<100){
				enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),floor(random(112,117)),this.value));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = 0;
			}
			else if(this.name === "Lord Boss"||this.name === "Fallen Mage"||this.name === "Awakened Mage"||this.name === "Deadlock"){
				if(this.recharge === 0){
					this.shouldShoot = false;
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<25&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.recharge = 605;
							this.speed = 0;
						}
					}
				}
				else{
					this.recharge--;
					if(this.recharge>=600){
						if(this.rate%45>=1){
							this.rate++;
							this.recharge++;
						}
					}
					else if(this.recharge>=570&&this.shouldShoot){
						this.handSpin+=3;
						if(this.recharge === 570&&(this.name === "Fallen Mage"||this.name === "Awakened Mage")){
							for(j=0;j<7;j++){
								bursts.push(new shot(this.x+sin(this.direction)*-15,this.y+cos(this.direction)*15,24,this.direction-30+j*10));
							}
						}
						else if(this.recharge === 570&&this.name === "Deadlock"){
							for(j=0;j<5;j++){
								bursts.push(new shot(this.x+sin(this.direction)*-15,this.y+cos(this.direction)*15,66,this.direction-24+j*12));
							}
						}
						else if(this.recharge === 570){
							for(j=0;j<5;j++){
								bursts.push(new shot(this.x+sin(this.direction)*-15,this.y+cos(this.direction)*15,23,this.direction-24+j*12));
							}
						}
					}
					else if(this.recharge>=510&&this.recharge<540&&this.shouldShoot){
						this.handSpin-=3;
					}
					else if(this.recharge<510){
						this.speed = this.standardSpeed;
						this.extraSpin = 0;
					}
				}
			}
			else if((this.name === "Fallen Tank"||this.name === "Golden Tank"||this.name === "Lunar Tank"||this.name === "Weak Tank")&&this.activated){
				if(this.time%300<90){
					this.handSpin+=8;
					if(this.time%300 === 45){
						bursts.push(new burst(this.x,this.y,6,3.5,0));
						this.speed = this.standardSpeed;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<55){
								towers[j].stun = max(towers[j].stun,120);
							}
						}
					}
				}
			}
			else if(this.name === "Fallen Princess"){
				if(this.armorActivated2&&this.armorFade2<255){
					this.armorFade2+=5;
					this.life+=this.maxLife/306;
				}
				if(this.shieldTimer>0){
					this.shieldTimer--;
					this.defense = 40;
					if(this.shieldFade<255){
						this.shieldFade+=5;
					}
				}
				else{
					if(this.shieldFade>0){
						this.shieldFade-=5;
					}
					this.defense = 0;
				}
				for(j in this.color2){
					if(this.eyeColor[j]<this.eyeColorGoal[j]){
						this.eyeColor[j]++;
					}
					if(this.eyeColor[j]>this.eyeColorGoal[j]){
						this.eyeColor[j]--;
					}
				}
				if(this.attackTimer<=0){
					if(this.life<=this.maxLife/6&&this.armorFade2 === 0&&this.armorFade3>0&&false){
						this.usingAttack = 9;
						this.attackTimer = 300;
						this.speed = 0;
					}
					else if(this.life<=this.maxLife/3&&this.armorFade>0){
						this.usingAttack = 8;
						this.attackTimer = 300;
						this.speed = 0;
					}
					else if(this.wantAttack === 0){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<75&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 0;
								this.attackTimer = 300;
							}
						}
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 1;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 2){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 2;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 3){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<95&&!this.shouldShoot&&towers[j].stun<=0){
								this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
								this.shouldShoot = true;
								this.usingAttack = 3;
								this.attackTimer = 400;
								this.speed = 0;
							}
						}
					}
					else if(this.wantAttack === 4){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 4;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 5){
						this.shouldShoot = false;
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<30&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 5;
								this.attackTimer = 400;
							}						
						}
					}
					else if(this.wantAttack === 6){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 6;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 7){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&units.length>=10&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 7;
							this.attackTimer = 300;
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
									towers[j].stun = max(towers[j].stun,330);
								}
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>=260){
							this.handSpin-=3;
						}
						else if(this.attackTimer>=220){
							this.handSpin+=3;
							if(this.attackTimer%4 === 0){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),8,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
							if(this.attackTimer%20 === 0){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),125,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer>264){
							this.handMoveX+=1/2;
							this.handMoveY+=1/2;
						}
						else if(this.attackTimer>250){
							this.handMoveY+=1/2;
						}
						else if(this.attackTimer>236){
							this.handMoveY-=1/2;
							if(this.attackTimer === 250){
								this.randomSpin = random(0,40);
								for(j=0;j<9;j++){
									bursts.push(new shot(this.x+sin(j*40+this.randomSpin)*1200,this.y-cos(j*40+this.randomSpin)*1200,24,j*40+this.randomSpin));
								}
							}
						}
						else if(this.attackTimer>200){
							this.handMoveX-=1/2;
							this.handMoveY-=1/2;
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer>=310){
							if(this.completeSpin<this.completeSpinGoal-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>this.completeSpinGoal+2){
								this.completeSpin-=4;
							}
							if(abs(this.completeSpin-this.completeSpinGoal)<2){
								this.attackTimer = 310;
							}
						}
						else if(this.attackTimer>=295){
							this.handMoveX+=1/2*36/15;
							this.handMoveY+=1/2*36/15;
							this.pointSpin+=2.5;
						}
						else if(this.attackTimer>=275&&this.attackTimer<290){
							this.pointSpin-=5;
						}
						else if(this.attackTimer === 272){
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<40&&dist(this.x,this.y,towers[j].x,towers[j].y)<105){
									towers[j].stun = max(towers[j].stun,900);
									enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),20,this.path));
									enemies[enemies.length-1].correct = false;
									enemies[enemies.length-1].position = this.position;
									enemies[enemies.length-1].positionMove = this.positionMove;
									enemies[enemies.length-1].totalDistance = this.totalDistance-50;
									enemies[enemies.length-1].direction = this.direction;
									enemies[enemies.length-1].reward = false;
								}
							}
						}
						else if(this.attackTimer>=255&&this.attackTimer<270){
							this.handMoveX-=1/2*36/15;
							this.handMoveY-=1/2*36/15;
							this.pointSpin+=2.5;
						}
						else if(this.attackTimer>=160&&this.attackTimer<250){
							if(this.completeSpin<-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>2){
								this.completeSpin-=4;
							}
						}
						if(this.attackTimer === 155||abs(this.completeSpin)<2&&this.attackTimer<250){
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 4){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>=270){
							this.handSpin-=4;
						}
						else if(this.attackTimer>=240){
							this.handSpin+=4;
							if(this.attackTimer === 260){
								this.shieldTimer = 1080;
							}
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 5){
						if(this.attackTimer>364){
							this.handMoveX+=1/2;
							this.handMoveY+=1/2;
						}
						else if(this.attackTimer>350){
							this.handMoveY+=1/2;
						}
						else if(this.attackTimer>336){
							this.handMoveY-=1/2;
							if(this.attackTimer === 350){
								for(j=0;j<13;j++){
									bursts.push(new shot(this.x-sin(this.direction)*80,this.y+cos(this.direction)*80,24,this.direction-42+j*7));
								}
							}
						}
						else if(this.attackTimer>300){
							this.handMoveX-=1/2;
							this.handMoveY-=1/2;
						}
					}
					else if(this.usingAttack === 6){
						if(this.attackTimer>=250){
							this.handMoveY+=0.5;
							if(this.attackTimer === 250){
								for(j in towers){
									if(floor(random(0,6)) === 0){
										towers[j].stun = 180;
										bursts.push(new burst(towers[j].x,towers[j].y,40,1,0));
									}
								}
							}
						}
						else if(this.attackTimer>=200){
							this.handMoveY-=0.5;
						}
					}
					else if(this.usingAttack === 7){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>=260){
							this.handSpin-=2;
						}
						else if(this.attackTimer>=220){
							this.handSpin+=2;
							if(this.attackTimer === 240){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),127,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
								enemies[enemies.length-1].rememberLife = -1;
								enemies[enemies.length-1].hitTimer = 0;
								enemies[enemies.length-1].collideSize2 = -10000000;
							}
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 8){
						if(this.attackTimer>270){
							this.armorFade-=10;
							this.handMoveY+=0.6;
							this.pointSpin-=3;
							this.defense = 200;
						}
						else if(this.attackTimer>170){
							this.life+=this.maxLife/600;
						}
						else if(this.attackTimer>140){
							this.handMoveY-=0.6;
							this.pointSpin+=3;
						}
						else if(this.attackTimer === 140){
							this.standardSpeed*=2;
							this.eyeColorGoal = [193,0,133];
							this.speed = this.standardSpeed;
							this.defense = 0;
							enemies.push(new enemy(levels[level].startX[this.path%levels[level].paths.length],levels[level].startY[this.path%levels[level].paths.length],126,this.path));
						}
					}
					else if(this.usingAttack === 9){
						if(this.attackTimer>=249){
							this.handSpin-=2;
						}
						else if(this.attackTimer>=75){
							if(this.attackTimer>=198){
								this.handSpin+=2;
								this.armorFade3-=5;
							}
							else if(this.attackTimer>=147){
								this.speed = this.standardSpeed;
								this.armorFade4+=5;
							}
							for(j in towers){
								towers[j].stun = 5;
								towers[j].direction+=30;
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Moss, the Guardian"){
				if(this.attackTimer<=0){
					if(this.life<this.maxLife/2&&this.dress>0){
						this.dress-=5;
					}
					if(this.life<this.maxLife/3&&this.bra>0&&false){
						this.bra-=5;
					}
					if(this.bra<=0&&this.nudityCensor<255){
						this.nudityCensor+=5;
					}
					if(this.wantAttack === 0){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<75&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 0;
								this.attackTimer = 300;
							}
						}
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 1;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 2){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&units.length>=5&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 2;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 3){
						this.shouldShoot = false;
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<30&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 5;
								this.attackTimer = 400;
							}						
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
									towers[j].stun = max(towers[j].stun,330);
								}
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>=260){
							this.handMove+=3;
						}
						else if(this.attackTimer>=220){
							this.handMove-=3;
							if(this.attackTimer%10 === 0){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),137,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
							if(this.attackTimer%20 === 0){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),145,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>=260){
							this.handMove+=3;
						}
						else if(this.attackTimer>=220){
							this.handMove-=3;
							if(this.attackTimer === 240){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),148,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
								enemies[enemies.length-1].rememberLife = -1;
								enemies[enemies.length-1].hitTimer = 0;
								enemies[enemies.length-1].collideSize2 = -10000000;
							}
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer>=370){
							this.handMove+3;
						}
						else if(this.attackTimer>=340){
							this.handMove-3;
							if(this.attackTimer === 369){
								this.randomSpin = random(0,360/7);
								for(j=0;j<13;j++){
									bursts.push(new shot(this.x-sin(this.direction)*80,this.y+cos(this.direction)*80,25,this.direction-42+j*7));
								}
							}
						}
						else if(this.attackTimer>300){
							this.handMoveX-=1/2;
							this.handMoveY-=1/2;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Mega BRC"){
				if(this.life<this.threshold){
					this.threshold-=this.maxLife/5;
					enemies.push(new enemy(this.x,this.y,this.type-5,this.path));
					enemies[enemies.length-1].correct = this.correct;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
				}
			}
			else if(this.name === "Static"&&this.time%120 === 0&&this.shield>0){
				bursts.push(new burst(this.x,this.y,42,2,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<95){
						towers[j].stun = max(towers[j].stun,30);
					}
				}
			}
			else if(this.name === "LPZ"){
				if(this.shield<=0&&this.shieldFade>0){
					this.shieldFade-=15;
				}
				if(this.shield<=0&&this.standardSpeed<1.1){
					this.speed*=1.25;
					this.standardSpeed*=1.25;
				}
				else if(this.shield>0&&this.time%150 === 0){
					this.fired = false;
					for(j in towers){
						if(dist(towers[j].x,towers[j].y,this.x,this.y)<200&&!this.fired&&floor(random(0,10)) === 0&&towers[j].stun<=0){
							this.fired = true;
							bursts.push(new shot(this.x,this.y,27,atan2(this.x-towers[j].x,towers[j].y-this.y)));
						}
					}
				}
			}
			else if(this.name === "Big Rage Balloon"&&this.time%120 === 0){
				this.fired = false;
				for(j in towers){
					if(dist(towers[j].x,towers[j].y,this.x,this.y)<125&&!this.fired&&floor(random(0,10)) === 0&&towers[j].stun<=0){
						this.fired = true;
						bursts.push(new shot(this.x,this.y,28,atan2(this.x-towers[j].x,towers[j].y-this.y)));
					}
				}
			}
			else if((this.name === "Shielded Mini MOAB"||this.name === "Shielded BRC")&&this.shield<=0&&this.shieldFade>0){
				this.shieldFade-=15;
			}
			else if(this.name === "Annoying Balloon"||this.name === "Irritating Balloon"){
				this.works = false;
				for(j in towers){
					if(towers[j].name === "City"&&towers[j].stage>=3){
						this.works = true;
					}
				}
				if(this.works){
					lives-=1/240;
					if(this.time%240 === 0){
						for(j in towers){
							if(towers[j].name === "Farm 3"&&towers[j].stage>=5){
								bursts.push(new drop(towers[j].x,towers[j].y,0,random(0,360),towers[j].range/random(45,60),towers[j].damage));
								bursts[bursts.length-1].color = [255,150,150];
							}
						}
					}
				}
				else{
					lives-=1/120;
					if(this.time%120 === 0){
						for(j in towers){
							if(towers[j].name === "Farm 3"&&towers[j].stage>=5){
								bursts.push(new drop(towers[j].x,towers[j].y,0,random(0,360),towers[j].range/random(45,60),towers[j].damage));
								bursts[bursts.length-1].color = [255,150,150];
							}
						}
					}
				}
			}
			else if(this.name === "4 Letter Word Balloon"){
				this.works = false;
				for(j in towers){
					if(towers[j].name === "City"&&towers[j].stage>=3){
						this.works = true;
					}
				}
				if(this.works){
					lives-=1/120;
					if(this.time%120 === 0){
						for(j in towers){
							if(towers[j].name === "Farm 3"&&towers[j].stage>=5){
								bursts.push(new drop(towers[j].x,towers[j].y,0,random(0,360),towers[j].range/random(45,60),towers[j].damage));
								bursts[bursts.length-1].color = [255,150,150];
							}
						}
					}
				}
				else{
					lives-=1/60;
					if(this.time%60 === 0){
						for(j in towers){
							if(towers[j].name === "Farm 3"&&towers[j].stage>=5){
								bursts.push(new drop(towers[j].x,towers[j].y,0,random(0,360),towers[j].range/random(45,60),towers[j].damage));
								bursts[bursts.length-1].color = [255,150,150];
							}
						}
					}
				}
			}
			else if(this.name === "Robot"&&this.time%120 === 0){
				this.fired = false;
				for(j in towers){
					if(dist(towers[j].x,towers[j].y,this.x,this.y)<120&&!this.fired&&floor(random(0,10)) === 0&&towers[j].stun<=0){
						this.fired = true;
						this.target = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
						bursts.push(new shot(this.x,this.y,29,atan2(this.x-towers[j].x,towers[j].y-this.y)));
					}
				}
			}
			else if(this.name === "Lunar Shield"){
				if(this.shield>0){
					this.defense = 10;
					this.speed = this.standardSpeed;
				}
				else{
					this.defense = 1;
					this.speed = this.standardSpeed/2;
				}
			}
			else if(this.name === "Lunar Servant"){
				this.recharge--;
				if(this.recharge<=0){
					this.recharge = 450;
				}
				if(this.recharge>390){
					if(this.recharge>420){
						this.handMove+=0.35;
					}
					else{
						this.handMove-=0.35;
					}
					if(this.recharge === 420){
						for(j=0;j<floor(random(5,9));j++){
							enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),this.spawns[floor(random(0,this.spawns.length))],this.value));
							enemies[enemies.length-1].correct = false;
							enemies[enemies.length-1].position = this.position;
							enemies[enemies.length-1].positionMove = this.positionMove;
							enemies[enemies.length-1].totalDistance = this.totalDistance-50;
							enemies[enemies.length-1].direction = this.direction;
							enemies[enemies.length-1].reward = 0;
						}
					}
				}
				else{
					this.handMove = 0;
				}
			}
			else if(this.name === "Moon Goddess"||this.name === "Brilliancy"||this.name === "The Collector"||this.name === "Keres"){
				if(this.shieldTimer>0){
					this.shieldTimer--;
					if(this.name === "Brilliancy"){
						this.defense = 35;
					}
					else if(this.name === "The Collector"){
						this.defense = 23;
					}
					else if(this.name === "Keres"){
						this.defense = 45;
					}
					else{
						this.defense = 80;
					}
					if(this.shieldFade<255){
						this.shieldFade+=5;
					}
				}
				else{
					if(this.shieldFade>0){
						this.shieldFade-=5;
					}
					this.defense = 0;
				}
				if(this.dress<=0&&this.time%150 === 0&&this.name !== "The Collector"){
					bursts.push(new burst(this.x,this.y,45,80,0));
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<60){
							towers[j].stun = max(towers[j].stun,75);
						}
					}
				}
				if(this.attackTimer<=0){
					if(this.life<=this.maxLife/2&&this.dress>0){
						this.usingAttack = 4;
						this.attackTimer = 300;
					}
					else if(this.wantAttack === 0){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<90&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 0;
								this.attackTimer = 360;
								this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							}
						}
					}
					else if(this.wantAttack === 1&&this.name !== "Brilliancy"&&this.name !== "The Collector"){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&towers.length>0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 1;
							this.attackTimer = 240;
						}
					}
					else if(this.wantAttack === 2){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 2;
							this.attackTimer = 240;
						}
					}
					else if(this.wantAttack === 3){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 3;
							this.attackTimer = 240;
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer>315){
							this.speed = 0;
							if(this.rate%45>=1){
								this.rate++;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>225){
							if(this.completeSpin<this.completeSpinGoal-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>this.completeSpinGoal+2){
								this.completeSpin-=4;
							}
							if(abs(this.completeSpin-this.completeSpinGoal)<2){
								this.attackTimer = 225;
							}
						}
						else if(this.attackTimer>207){
							this.armMove+=1/18;
						}
						else if(this.attackTimer>200){
							this.handMove+=1.5;
						}
						else if(this.attackTimer>193){
							this.handMove-=1.5;
							if(this.attackTimer === 200){
								for(j in towers){
									if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<60&&dist(this.x,this.y,towers[j].x,towers[j].y)<125){
										towers[j].stun = max(towers[j].stun,720);
										enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),20,this.path));
										enemies[enemies.length-1].correct = false;
										enemies[enemies.length-1].position = this.position;
										enemies[enemies.length-1].positionMove = this.positionMove;
										enemies[enemies.length-1].totalDistance = this.totalDistance-50;
										enemies[enemies.length-1].direction = this.direction;
										enemies[enemies.length-1].reward = false;
									}
								}
							}
						}
						else if(this.attackTimer>175){
							this.armMove-=1/18;
						}
						else if(this.attackTimer>85){
							if(this.completeSpin<-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>2){
								this.completeSpin-=4;
							}
						}
						if(this.attackTimer === 85||abs(this.completeSpin)<2&&this.attackTimer<175){
							this.speed = this.standardSpeed;
							this.armMove = 0;
							this.handMove = 0;
						}
					}
					else if(this.usingAttack === 1&&this.name === "Keres"){
						if(this.attackTimer === 135){
							this.speed = 0;
						}
						else if(this.attackTimer === 105){
							this.speed = this.standardSpeed;
						}
						if(this.attackTimer === 120){
							for(var k in towers){
								if(floor(random(0,4)) === 0){
									bursts.push(new shot(this.x,this.y,67,atan2(towers[k].x-this.x,this.y-towers[k].y)+180));
								}
							}
							for(k in units){
								if(floor(random(0,4)) === 0){
									bursts.push(new shot(this.x,this.y,67,atan2(units[k].x-this.x,this.y-units[k].y)+180));
								}
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 135){
							this.speed = 0;
						}
						else if(this.attackTimer === 105){
							this.speed = this.standardSpeed;
						}
						if(this.attackTimer === 120){
							for(var k in towers){
								if(floor(random(0,4)) === 0){
									bursts.push(new shot(this.x,this.y,33,atan2(towers[k].x-this.x,this.y-towers[k].y)+180));
								}
							}
							for(k in units){
								if(floor(random(0,4)) === 0){
									bursts.push(new shot(this.x,this.y,33,atan2(units[k].x-this.x,this.y-units[k].y)+180));
								}
							}
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer>120&&this.attackTimer<150){
							this.handMove+=0.35;
						}
						else if(this.attackTimer>90&&this.attackTimer<120){
							this.handMove-=0.35;
						}
						if(this.attackTimer === 120&&this.name !== "The Collector"){
							for(j=0;j<floor(random(15,27));j++){
								enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),this.spawns[floor(random(0,this.spawns.length))],this.value));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = 0;
							}
						}
						else if(this.attackTimer === 120&&this.name === "The Collector"){
							for(j=0;j<2;j++){
								enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),this.spawns[floor(random(0,this.spawns.length))],this.value));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = 0;
							}
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer>120&&this.attackTimer<150){
							this.handMove+=0.35;
						}
						else if(this.attackTimer>90&&this.attackTimer<120){
							this.handMove-=0.35;
						}
						if(this.attackTimer === 120){
							this.shieldTimer = 1200;
						}
					}
					else if(this.usingAttack === 4){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,7,0));
							this.standardSpeed*=1.5;
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<145){
									towers[j].stun = max(towers[j].stun,390);
								}
							}
						}
						else if(this.attackTimer>=180){
							this.dress-=1/60;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Builder"&&this.activated&&this.time%360 === 0){
				enemies.push(new enemy(this.x,this.y,233,this.value));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = 0;
			}
			else if(this.name === "Faded Summoner"&&this.activated&&this.time%720 === 0){
				for(j=0;j<floor(random(2,4));j++){
					enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),237,this.value));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].reward = 0;
				}
			}
			else if(this.name === "Engineer"&&this.activated&&this.time%90 === 0){
				enemies.push(new enemy(this.x,this.y,243,this.value));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = 0;
			}
			else if(this.name === "Returned Mage"){
				if(this.shieldTimer>0){
					this.shieldTimer--;
					this.defense = 20;
					if(this.shieldFade<255){
						this.shieldFade+=5;
					}
				}
				else{
					if(this.shieldFade>0){
						this.shieldFade-=5;
					}
					this.defense = 0;
				}
				if(this.attackTimer<=0){
					if(this.life<=this.maxLife/2&&this.clothes>0){
						this.usingAttack = 3;
						this.attackTimer = 300;
					}
					else if(this.life<this.maxLife/10&&false){
						this.usingAttack = 4;
						this.attackTimer = 10000000000;
					}
					else{
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&this.wantAttack !== 2&&towers.length>0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = this.wantAttack;
							this.attackTimer = 240;
						}
						else if(this.wantAttack === 2){
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<30&&!this.shouldShoot&&towers[j].stun<=0){
									this.shouldShoot = true;
									this.usingAttack = 2;
									this.attackTimer = 240;
								}						
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer>120&&this.attackTimer<150){
							this.handMoveB+=1/30;
						}
						else if(this.attackTimer>90&&this.attackTimer<120){
							this.handMoveB-=1/30;
						}
						if(this.attackTimer === 120){
							this.shieldTimer = 600;
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer>120&&this.attackTimer<150){
							this.handMoveB+=1/30;
						}
						else if(this.attackTimer>90&&this.attackTimer<120){
							this.handMoveB-=1/30;
						}
						if(this.attackTimer === 120){
							for(j=0;j<3;j++){
								enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),246,this.value));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = 0;
							}
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer>120&&this.attackTimer<150){
							this.handMove+=0.35;
						}
						else if(this.attackTimer>90&&this.attackTimer<120){
							this.handMove-=0.35;
						}
						if(this.attackTimer === 120){
							for(j=0;j<9;j++){
								bursts.push(new shot(this.x,this.y,37,this.direction-40+j*10));
							}
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,7,0));
							this.standardSpeed*=1.5;
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<145){
									towers[j].stun = max(towers[j].stun,390);
								}
							}
						}
						else if(this.attackTimer>=180){
							this.clothes-=1/60;
						}
					}
					else if(this.usingAttack === 4){
						if(this.rate%45>=1){
							this.rate+=0.5;
							this.attackTimer++;
						}
						if(this.defeatAnim<1){
							this.defeatAnim+=1/120;
						}
						if(this.under>0&&this.life<this.maxLife/25){
							this.under-=1/120;
						}
						if(this.rate%180<0){
							this.rate++;
						}
						this.speed*=0.95;
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Cysian Master"||this.name === "Boltmaster"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(floor(random(0,300)) === 0&&this.wantAttack === 0&&towers.length>0&&!this.shouldShoot){
						this.shouldShoot = true;
						this.usingAttack = this.wantAttack;
						this.attackTimer = 240;
					}
					else if(this.wantAttack === 1){
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<25&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 240;
							}						
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer>120&&this.attackTimer<150){
							this.handMove+=1/30;
						}
						else if(this.attackTimer>90&&this.attackTimer<120){
							this.handMove-=1/30;
						}
						if(this.attackTimer === 120){
							for(j=0;j<2;j++){
								if(this.name === "Boltmaster"){
									enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),239,this.value));
								}
								else{
									enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),242,this.value));
								}
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = 0;
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 240){
							this.speed = 0;
						}
						else if(this.attackTimer>=235){
							if(this.rate%45>=1){
								this.rate+=0.5;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>205){
							this.handMove+=1/30;
						}
						else if(this.attackTimer>175&&this.attackTimer%10 === 0){
							bursts.push(new burst(this.x,this.y,11,15,this.direction+90));
						}
						else if(this.attackTimer === 175){
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction))<25){
									towers[j].stun = 480;
									enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),20,this.path));
									enemies[enemies.length-1].correct = false;
									enemies[enemies.length-1].position = this.position;
									enemies[enemies.length-1].positionMove = this.positionMove;
									enemies[enemies.length-1].totalDistance = this.totalDistance-50;
									enemies[enemies.length-1].direction = this.direction;
									enemies[enemies.length-1].reward = false;
								}
							}
						}
						else if(this.attackTimer<175&&this.attackTimer>145){
							this.handMove-=1/30;
						}
						else if(this.attackTimer === 145){
							this.speed = this.standardSpeed;
							this.handMove = 0;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Robotic Overseer"||this.name === "Exiled Overseer"||this.name === "Galactic Commander"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(floor(random(0,300)) === 0&&(this.wantAttack === 0||this.wantAttack === 2)&&towers.length>0&&!this.shouldShoot){
						this.shouldShoot = true;
						this.usingAttack = this.wantAttack;
						this.attackTimer = 240;
					}
					else if(this.wantAttack === 1){
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<30&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 540;
							}						
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 240){
							this.speed = 0;
						}
						else if(this.attackTimer === 225){
							for(var k in towers){
								if(floor(random(0,3)) === 0&&this.name === "Robotic Overseer"||floor(random(0,2)) === 0&&this.name === "Exiled Overseer"||floor(random(0,4)) === 0&&this.name === "Galactic Commander"){
									bursts.push(new shot(this.x+cos(this.direction+this.extraSpin)*40,this.y+sin(this.direction+this.extraSpin)*-40,38,atan2(towers[k].x-this.x,this.y-towers[k].y)+180));
								}
							}
							for(k in units){
								if(floor(random(0,3)) === 0&&this.name === "Robotic Overseer"||floor(random(0,2)) === 0&&this.name === "Exiled Overseer"||floor(random(0,4)) === 0&&this.name === "Galactic Commander"){
									bursts.push(new shot(this.x+cos(this.direction+this.extraSpin)*40,this.y+sin(this.direction+this.extraSpin)*-40,38,atan2(units[k].x-this.x,this.y-units[k].y)+180));
								}
							}
						}
						else if(this.attackTimer === 210){
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer>=240){
							this.speed = 0;
							if(this.attackTimer>=300){
								if(this.time%15 === 0&&this.name === "Robotic Overseer"||this.time%12 === 0&&this.name === "Exiled Overseer"||this.time%20 === 0&&this.name === "Galactic Commander"){
									bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-50+cos(this.direction+this.extraSpin)*-25,this.y+cos(this.direction+this.extraSpin)*50+sin(this.direction+this.extraSpin)*-25,16,this.direction+this.extraSpin+random(-10,10)));
									bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-50+cos(this.direction+this.extraSpin)*25,this.y+cos(this.direction+this.extraSpin)*50+sin(this.direction+this.extraSpin)*25,16,this.direction+this.extraSpin+random(-10,10)));
								}
								if(this.attackTimer%120<90&&this.attackTimer%120>=30){
									this.extraSpin--;
								}
								else{
									this.extraSpin++;
								}
							}
						}
						else{
							this.speed = this.standardSpeed;
							this.extraSpin = 0;
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer === 240){
							this.speed = 0;
						}
						else if(this.attackTimer === 210){
							this.speed = this.standardSpeed;
						}
						if(this.attackTimer>=120&&this.attackTimer%5 === 0){
							enemies.push(new enemy(levels[level].startX[this.path],levels[level].startY[this.path],534,this.path));
							enemies[enemies.length-1].reward = false;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Pure Champion"||this.name === "Gilded Berserker"||this.name === "Juggernaut"||this.name === "Awakened Champion"||this.name === "Giant Edge"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<90&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.attackTimer = 360;
							this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
						}
					}
				}
				else{
					if(this.attackTimer>315){
						this.speed = 0;
						if(this.rate%45>=1){
							this.rate++;
							this.attackTimer++;
						}
					}
					else if(this.attackTimer>225){
						if(this.completeSpin<this.completeSpinGoal-2){
							this.completeSpin+=4;
						}
						else if(this.completeSpin>this.completeSpinGoal+2){
							this.completeSpin-=4;
						}
						if(abs(this.completeSpin-this.completeSpinGoal)<2){
							this.attackTimer = 225;
						}
					}
					else if(this.attackTimer>207){
						this.handMove[0]-=1;
						this.handMove[1]+=1;
					}
					else if(this.attackTimer>200){
						this.handMove[1]+=1.5;
					}
					else if(this.attackTimer>193){
						this.handMove[1]-=1.5;
						if(this.attackTimer === 200){
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<25&&dist(this.x,this.y,towers[j].x,towers[j].y)<130){
									towers[j].stun = max(towers[j].stun,540);
								}
							}
						}
					}
					else if(this.attackTimer>175){
						this.handMove[0]+=1;
						this.handMove[1]-=1;
					}
					else if(this.attackTimer>85){
						if(this.completeSpin<-2){
							this.completeSpin+=4;
						}
						else if(this.completeSpin>2){
							this.completeSpin-=4;
						}
					}
					if(this.attackTimer === 85||abs(this.completeSpin)<2&&this.attackTimer<175){
						this.speed = this.standardSpeed;
						this.handMove[0] = 0;
						this.handMove[1] = 0;
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "True Vanguard"||this.name === "Avant Guard"||this.name === "The Vanguard"||this.name === "True Ignitus"||this.name === "Robotic Guard"||this.name === "Watcher"||this.name === "Vengeful Ignitus"||this.name === "Oppressor"){
				if(this.shield<=0&&this.name === "Watcher"&&this.speed === this.standardSpeed){
					this.speed = this.standardSpeed*1.5;
				}
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					for(j in towers){
						if((dist(this.x,this.y,towers[j].x,towers[j].y)<90&&this.wantAttack !== 2||abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<30&&this.wantAttack === 2)&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.usingAttack = this.wantAttack;
							this.attackTimer = 360;
							this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer>355){
							this.speed = 0;
							if(this.rate%45>=1){
								this.rate++;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>235){
							if(this.completeSpin<this.completeSpinGoal-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>this.completeSpinGoal+2){
								this.completeSpin-=4;
							}
							if(abs(this.completeSpin-this.completeSpinGoal)<2){
								this.attackTimer = 235;
							}
						}
						else if(this.attackTimer>217){
							this.handMove-=5;
							this.pointSpin+=5;
						}
						else if(this.attackTimer>211||this.attackTimer<=199&&this.attackTimer>193){
							this.pointSpin-=10;
						}
						else if(this.attackTimer>193){
							this.pointSpin+=10;
							if(this.attackTimer === 205){
								for(j in towers){
									if(this.name === "True Vanguard"||this.name === "The Vanguard"||this.name === "True Ignitus"){
										if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<45&&dist(this.x,this.y,towers[j].x,towers[j].y)<130){
											towers[j].stun = max(towers[j].stun,960);
										}
									}
									else if(this.name === "Watcher"){
										if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<45&&dist(this.x,this.y,towers[j].x,towers[j].y)<115){
											towers[j].stun = max(towers[j].stun,840);
										}
									}
									else if(this.name === "Vengeful Ignitus"){
										if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<45&&dist(this.x,this.y,towers[j].x,towers[j].y)<145){
											towers[j].stun = max(towers[j].stun,1080);
										}
									}
									else{
										if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<45&&dist(this.x,this.y,towers[j].x,towers[j].y)<100){
											towers[j].stun = max(towers[j].stun,720);
										}
									}
								}
							}
						}
						else if(this.attackTimer>175){
							this.handMove+=5;
							this.pointSpin-=5;
						}
						else if(this.attackTimer>85){
							if(this.completeSpin<-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>2){
								this.completeSpin-=4;
							}
						}
						if(this.attackTimer === 85||abs(this.completeSpin)<2&&this.attackTimer<175){
							this.speed = this.standardSpeed;
							this.completeSpin = 0;
							this.armMove = 0;
							this.pointSpin = 0;
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 360){
							this.speed = 0;
						}
						else if(this.attackTimer>300&&this.attackTimer<360){
							this.size = this.baseSize+sin(((this.attackTimer)-300)*3)/2;
						}
						else if(this.attackTimer === 300&&(this.name === "True Vanguard"||this.name === "The Vanguard"||this.name === "True Ignitus")){
							bursts.push(new burst(this.x,this.y,6,6.4,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<140){
									towers[j].stun = max(towers[j].stun,420);
								}
							}
						}
						else if(this.attackTimer === 300&&this.name === "Watcher"){
							bursts.push(new burst(this.x,this.y,6,5.6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<120){
									towers[j].stun = max(towers[j].stun,360);
								}
							}
						}
						else if(this.attackTimer === 300&&this.name === "Vengeful Ignitus"){
							bursts.push(new burst(this.x,this.y,6,7.2,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<160){
									towers[j].stun = max(towers[j].stun,480);
								}
							}
						}
						else if(this.attackTimer === 300&&(this.name === "Avant Guard"||this.name === "Robotic Guard"||this.name === "Opressor")){
							bursts.push(new burst(this.x,this.y,6,4.8,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<100){
									towers[j].stun = max(towers[j].stun,300);
								}
							}
						}
					}
					else if(this.usingAttack === 2&&this.name === "Watcher"){
						if(this.attackTimer>330){
							this.handMove-=5;
						}
						else if(this.attackTimer>300){
							this.handMove+=5;
						}
						if(this.attackTimer === 330){
							for(j=0;j<11;j++){
								bursts.push(new shot(this.x-sin(this.direction)*80,this.y+cos(this.direction)*80,24,this.direction-36+j*7));
							}
						}
					}
					else if(this.usingAttack === 2&&this.name === "True Ignitus"){
						if(this.attackTimer>324){
							this.handMove-=5;
						}
						else if(this.attackTimer>288){
							this.handMove+=5;
							if(this.attackTimer%6 === 0){
								bursts.push(new shot(this.x,this.y,7,this.direction+90+this.handMove));
							}
						}
						if(this.attackTimer === 288){
							this.handMove = 0;
						}
					}
					else if(this.usingAttack === 2&&this.name === "Vengeful Ignitus"){
						if(this.attackTimer>324){
							this.handMove-=5;
						}
						else if(this.attackTimer>288){
							this.handMove+=5;
							if(this.attackTimer%2 === 0){
								bursts.push(new shot(this.x,this.y,54,this.direction+90+this.handMove));
							}
						}
						if(this.attackTimer === 288){
							this.handMove = 0;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Divine Being"){
				if(this.time%600<32){
					this.handMove+=0.2;
					this.speed = 0;
				}
				else if(this.time%600<64){
					this.handMove-=0.2;
				}
				else{
					this.speed = this.standardSpeed;
				}
				if(this.time%600 === 32){
					bursts.push(new burst(this.x,this.y,9,4,0));
					bursts[bursts.length-1].color = [255,255,255];
					for(j=0;j<3;j++){
						enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),259,this.path));
						enemies[enemies.length-1].correct = false;
						enemies[enemies.length-1].position = this.position;
						enemies[enemies.length-1].positionMove = this.positionMove;
						enemies[enemies.length-1].totalDistance = this.totalDistance-50;
						enemies[enemies.length-1].direction = this.direction;
						enemies[enemies.length-1].reward = false;
					}
				}
			}
			else if(this.name === "Grand Eye of the Seer"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(floor(random(0,300)) === 0&&this.wantAttack === 0&&!this.shouldShoot){
						this.shouldShoot = true;
						this.usingAttack = 0;
						this.attackTimer = 240;
					}
					else if(this.wantAttack === 1){
						for(j in towers){
							if(floor(random(0,600)) === 0&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 600;
								this.speed = 0;
								this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							}						
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 240){
							this.speed = 0;
						}
						else if(this.attackTimer === 225){
							for(j=0;j<3;j++){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.spawns[floor(random(0,this.spawns.length-0.5))],this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
						else if(this.attackTimer === 210){
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer>510){
							if(this.completeSpin<this.completeSpinGoal-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>this.completeSpinGoal+2){
								this.completeSpin-=4;
							}
							if(abs(this.completeSpin-this.completeSpinGoal)<2){
								this.attackTimer = 510;
							}
						}
						else if(this.attackTimer === 500){
							for(var k=0;k<17;k++){
								bursts.push(new shot(this.x,this.y,39,this.direction+this.completeSpin-64+k*8));
							}
						}
						else if(this.attackTimer<=495&&this.attackTimer>405){
							if(this.completeSpin<-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>2){
								this.completeSpin-=4;
							}
						}
						if(this.attackTimer === 405||abs(this.completeSpin)<2&&this.attackTimer<495){
							this.speed = this.standardSpeed;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Vengeful Champion"||this.name === "Saber Champion"||this.name === "Hollow Champion"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(this.wantAttack === 0){
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<90&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.attackTimer = 360;
								this.usingAttack = 0;
								this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							}
						}
					}
					else if(this.wantAttack === 1){
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<120&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 300;
							}
						}
					}
					else if(floor(random(0,300)) === 0&&this.wantAttack === 2&&!this.shouldShoot){
						this.shouldShoot = true;
						this.usingAttack = 2;
						this.attackTimer = 240;
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer>315){
							this.speed = 0;
							if(this.rate%45>=1){
								this.rate++;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>225){
							if(this.completeSpin<this.completeSpinGoal-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>this.completeSpinGoal+2){
								this.completeSpin-=4;
							}
							if(abs(this.completeSpin-this.completeSpinGoal)<2){
								this.attackTimer = 225;
							}
						}
						else if(this.attackTimer>207){
							this.handMove[0]-=1;
							this.handMove[1]+=1;
						}
						else if(this.attackTimer>200){
							this.handMove[1]+=1.5;
						}
						else if(this.attackTimer>193){
							this.handMove[1]-=1.5;
							if(this.attackTimer === 200){
								for(j in towers){
									if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<35&&dist(this.x,this.y,towers[j].x,towers[j].y)<140){
										towers[j].stun = max(towers[j].stun,630);
									}
								}
							}
						}
						else if(this.attackTimer>175){
							this.handMove[0]+=1;
							this.handMove[1]-=1;
						}
						else if(this.attackTimer>85){
							if(this.completeSpin<-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>2){
								this.completeSpin-=4;
							}
						}
						if(this.attackTimer === 85||abs(this.completeSpin)<2&&this.attackTimer<175){
							this.speed = this.standardSpeed;
							this.handMove[0] = 0;
							this.handMove[1] = 0;
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,5.5,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<130){
									towers[j].stun = max(towers[j].stun,225);
								}
							}
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer>222){
							this.handMove[0]-=1;
							this.handMove[1]+=1;
						}
						else if(this.attackTimer === 220){
							for(var k=0;k<6;k++){
								enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),280,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
						else if(this.attackTimer<=198&&this.attackTimer>180){
							this.handMove[0]+=1;
							this.handMove[1]-=1;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Legionship"&&this.time%60 === 0&&this.activated){
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<125&&enemies[j].life<enemies[j].maxLife&&enemies[j].life>0&&enemies[j].maxLife<100000){
						enemies[j].life+=enemies[j].maxLife/30;
						enemies[j].life = min(enemies[j].life,enemies[j].maxLife);
						bursts.push(new burst(enemies[j].x,enemies[j].y,14,0.8,0));
						bursts[bursts.length-1].color = [200,215,245];
						enemies[j].hitTimer = 600;
					}
				}
			}
			else if(this.name === "Kugelblitz Overseer"&&this.time%360 === 0&&this.activated){
				enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),293,this.path));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Dark Priest"&&this.activated){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<200&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = ((atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)+720)%360;
							this.recharge = 900;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=810){
					if(this.extraSpin<this.extraSpinGoal-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>this.extraSpinGoal+2){
						this.extraSpin-=4;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<2){
						this.recharge = 810;
					}
				}
				else if(this.recharge === 795){
					bursts.push(new shot(this.x,this.y,7,this.direction+this.extraSpin));
				}
				else if(this.recharge>=690&&this.recharge<780){
					if(this.extraSpin<-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>2){
						this.extraSpin-=4;
					}
				}
				if(this.recharge === 690||abs(this.extraSpin)<2&&this.recharge<780){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>=795&&this.recharge<810){
					this.handMove++;
				}
				if(this.recharge>=780&&this.recharge<795){
					this.handMove--;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Demonic Summoner"){
				if(this.time%600<32){
					this.handMove+=0.2;
					this.speed = 0;
				}
				else if(this.time%600<64){
					this.handMove-=0.2;
				}
				else{
					this.speed = this.standardSpeed;
				}
				if(this.time%600 === 32){
					bursts.push(new burst(this.x,this.y,9,4,0));
					bursts[bursts.length-1].color = [255,150,150];
					for(j=0;j<3;j++){
						enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),315,this.path));
						enemies[enemies.length-1].correct = false;
						enemies[enemies.length-1].position = this.position;
						enemies[enemies.length-1].positionMove = this.positionMove;
						enemies[enemies.length-1].totalDistance = this.totalDistance-50;
						enemies[enemies.length-1].direction = this.direction;
						enemies[enemies.length-1].reward = false;
					}
				}
			}
			else if(this.name === "Chronos"||this.name === "Broken Overlord"){
				if(this.defense>2){
					this.defense--;
				}
				if(this.life<this.maxLife/5&&this.speed<0.75){
					this.speed+=0.001;
					this.standardSpeed+=0.001;
				}
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(floor(random(0,300)) === 0&&(this.wantAttack === 0||this.wantAttack === 2)&&!this.shouldShoot){
						this.shouldShoot = true;
						this.usingAttack = 0;
						this.attackTimer = 240;
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<125&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 300;
							}
						}
					}
					else if(this.wantAttack === 3){
						this.shouldShoot = false;
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<30&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 3;
								this.attackTimer = 240;
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer>210){
							this.handMove++;
						}
						else if(this.attackTimer>180){
							this.handMove--;
						}
						if(this.attackTimer === 210&&this.name --- "Chronos"){
							for(j=0;j<6;j++){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.spawns[floor(random(0,this.spawns.length-0.5))],this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
						else if(this.attackTimer === 210&&this.name --- "Broken Overlord"){
							for(j=0;j<9;j++){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.spawns[floor(random(0,this.spawns.length-0.5))],this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
									if(this.name === "Chronos"){
										towers[j].stun = max(towers[j].stun,450);
									}
									else if(this.name === "Broken Overlord"){
										towers[j].stun = max(towers[j].stun,660);
									}
								}
							}
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer>210){
							this.handMove++;
						}
						else if(this.attackTimer>180){
							this.handMove--;
						}
						if(this.attackTimer === 210){
							this.randomSpin = random(0,40);
							for(j=0;j<9;j++){
								if(this.name === "Chronos"){
									bursts.push(new shot(this.x,this.y,41,j*40+this.randomSpin));
								}
								else{
									bursts.push(new shot(this.x,this.y,62,j*40+this.randomSpin));
								}
							}
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer>210){
							this.handMove++;
						}
						else if(this.attackTimer>180){
							this.handMove--;
						}
						if(this.attackTimer === 210){
							for(j=0;j<7;j++){
								bursts.push(new shot(this.x,this.y,42,this.direction-90+j*30));
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Summoner"&&this.activated&&this.time%720 === 0){
				for(j=0;j<floor(random(2,4));j++){
					enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),324,this.value));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].reward = 0;
				}
			}
			else if(this.name === "Operator Ducky"&&this.activated&&this.time%360 === 0){
				enemies.push(new enemy(this.x,this.y,346,this.value));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = 0;
			}
			else if(this.name === "Umbra"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(floor(random(0,300)) === 0&&this.wantAttack === 0&&!this.shouldShoot){
						this.shouldShoot = true;
						this.usingAttack = 0;
						this.attackTimer = 240;
					}
					else if(this.wantAttack === 1){
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<125&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 300;
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 240){
							this.speed = 0;
						}
						else if(this.attackTimer>=120&&this.attackTimer<240){
							this.handMove-=3;
							if(this.attackTimer%8 === 0){
								bursts.push(new shot(this.x,this.y,43,this.direction+90+this.handMove));
							}
						}
						if(this.attackTimer === 120){
							this.speed = this.standardSpeed;
							this.handMove = 0;
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
									towers[j].stun = max(towers[j].stun,450);
								}
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "HeavyWeapon"||this.name === "GiantHeavyWeapon"||this.name === "GiantHeavyDeflector"||this.name === "GiantHeavyHeal"||this.name === "HeavyDeflector"||this.name === "ChargeHeavyWeapon"){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<30&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.recharge = 300;
						}
					}
				}
				else{
					this.recharge--;
					if(this.recharge>=150&&this.shouldShoot){
						this.speed = 0;
						if(this.recharge>=180&&(this.name === "GiantHeavyDeflector"||this.name === "GiantHeavyHeal")){
							if(this.time%6 === 0){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6*this.size,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6*this.size,44,this.direction+this.extraSpin+random(-6,6)));
								if(this.name === "GiantHeavyHeal"){
									this.life+=250;
									this.life = min(this.life,this.maxLife);
								}
							}
							if(this.recharge%60<45&&this.recharge%60>=15){
								this.extraSpin-=4;
							}
							else{
								this.extraSpin+=4;
							}
						}
						else if(this.recharge>=180&&this.name === "GiantHeavyWeapon"){
							if(this.time%6 === 0){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6*this.size,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6*this.size,16,this.direction+this.extraSpin+random(-3,3)));
							}
							if(this.recharge%60<45&&this.recharge%60>=15){
								this.extraSpin-=3.75;
							}
							else{
								this.extraSpin+=3.75;
							}
						}
						else if(this.recharge>=180&&this.name === "HeavyDeflector"){
							if(this.time%9 === 0){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6*this.size,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6*this.size,44,this.direction+this.extraSpin+random(-6,6)));
							}
							if(this.recharge%60<45&&this.recharge%60>=15){
								this.extraSpin-=2.75;
							}
							else{
								this.extraSpin+=2.75;
							}
						}
						else if(this.recharge>=180&&this.name === "HeavyWeapon"){
							if(this.time%9 === 0){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6*this.size,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6*this.size,16,this.direction+this.extraSpin+random(-3,3)));
							}
							if(this.recharge%60<45&&this.recharge%60>=15){
								this.extraSpin-=2.5;
							}
							else{
								this.extraSpin+=2.5;
							}
						}
						else if(this.recharge>=180&&this.name === "ChargeHeavyWeapon"){
							if(this.time%9 === 0){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-32+cos(this.direction+this.extraSpin)*-6*this.size,this.y+cos(this.direction+this.extraSpin)*32+sin(this.direction+this.extraSpin)*-6*this.size,53,this.direction+this.extraSpin+random(-3,3)));
							}
							if(this.recharge%60<45&&this.recharge%60>=15){
								this.extraSpin-=2.5;
							}
							else{
								this.extraSpin+=2.5;
							}
						}
					}
					else{
						this.speed = this.standardSpeed;
						this.extraSpin = 0;
					}
				}
			}
			else if(this.name === "Bonker"||this.name === "UberBot"||this.name === "Burster"||this.name === "ChargeBonker"||this.name === "GiantBurster"){
				if(this.bonkTimer === 600&&(this.life<this.maxLife||floor(random(3600)) === 0)||this.bonkTimer>0&&this.bonkTimer<600){
					this.bonkTimer--;
				}
				if(this.bonkTimer>0&&this.bonkTimer<600){
					if(this.name === "UberBot"&&this.time%30 === 0){
						for(j in enemies){
							if(dist(this.x,this.y,enemies[j].x,enemies[j].y)<125&&enemies[j].life<enemies[j].maxLife&&enemies[j].life>0&&enemies[j].name !== "Lead Balloon"&&enemies[j].name !== "White Balloon"&&enemies[j].name !== "Zebra Balloon"&&enemies[j].maxLife<10000){
								enemies[j].life+=enemies[j].maxLife;
								enemies[j].life = min(enemies[j].life,enemies[j].maxLife);
								bursts.push(new burst(enemies[j].x,enemies[j].y,14,0.8,0));
								enemies[j].hitTimer = 600;
							}
						}
					}
					else if(this.name === "Bonker"||this.name === "ChargeBonker"){
						this.defense = 100;
					}
					else if(this.name === "Burster"||this.name === "GiantBurster"){
						this.speed = this.standardSpeed*2;
					}
					if(this.bonkAnim<255){
						this.bonkAnim+=17;
					}
				}
				else{
					if(this.name === "Bonker"||this.name === "ChargeBonker"){
						this.defense = 1;
					}
					else if(this.name === "Burster"||this.name === "GiantBurster"){
						this.speed = this.standardSpeed;
					}
					if(this.bonkAnim>0){
						this.bonkAnim-=17;
					}
				}
			}
			else if(this.name === "FlameBot"&&this.time%150 === 0){
				bursts.push(new burst(this.x,this.y,46,100,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<80){
						towers[j].stun = max(towers[j].stun,120);
					}
				}
			}
			else if((this.name === "ScoutBat"||this.name === "ChargeScoutBat")&&this.time%60 === 0){
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<60){
						if(this.name === "ChargeScoutBat"){
							towers[j].stun = max(towers[j].stun,540);
						}
						else{
							towers[j].stun = max(towers[j].stun,270);
						}
					}
				}
			}
			else if((this.name === "RepairBot"||this.name === "Field Medic")&&this.time%60 === 0){
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<150&&enemies[j].life<enemies[j].maxLife&&enemies[j].life>0&&enemies[j].maxLife<10000){
						enemies[j].life+=25;
						enemies[j].life = min(enemies[j].life,enemies[j].maxLife);
						bursts.push(new burst(enemies[j].x,enemies[j].y,14,0.6,0));
						enemies[j].hitTimer = 600;
					}
				}
			}
			else if(this.name === "GiantRepairBot"&&this.time%30 === 0){
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<150&&enemies[j].life<enemies[j].maxLife&&enemies[j].life>0&&enemies[j].maxLife<10000){
						enemies[j].life+=500;
						enemies[j].life = min(enemies[j].life,enemies[j].maxLife);
						bursts.push(new burst(enemies[j].x,enemies[j].y,14,0.9,0));
						enemies[j].hitTimer = 600;
					}
				}
			}
			else if(this.name === "MajorBarrage"||this.name === "ColonelBarrage"||this.name === "AdmiralAirstrike"){
				if(this.time%600>=240){
					this.extraSpin+=7;
					if(this.time%4 === 0){
						this.life+=5;
						this.life = min(this.life,this.maxLife);
						if(this.name === "AdmiralAirstrike"){
							bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,46,this.direction+this.extraSpin));
							bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,46,this.direction+this.extraSpin-3));
							bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,46,this.direction+this.extraSpin+3));
							bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,16,this.direction+this.extraSpin+3));
						}
						else if(this.name === "MajorBarrage"){
							bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,46,this.direction+this.extraSpin));
						}
						else{
							bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-26*this.size+cos(this.direction+this.extraSpin)*-3*this.size,this.y+cos(this.direction+this.extraSpin)*26*this.size+sin(this.direction+this.extraSpin)*-3*this.size,38,this.direction+this.extraSpin));
						}
					}
				}
			}
			else if(this.name === "GiantFlameBot"&&this.time%150 === 0){
				bursts.push(new burst(this.x,this.y,46,175,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<140){
						towers[j].stun = max(towers[j].stun,120);
					}
				}
			}
			else if(this.name === "DetonatorBot"&&this.time%60 === 0){
				bursts.push(new burst(this.x,this.y,46,50,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<120){
						bursts.push(new burst(this.x,this.y,46,200,0));
						this.life-=100;
						for(var k in towers){
							if(dist(this.x,this.y,towers[k].x,towers[k].y)<160){
								towers[k].stun = max(towers[k].stun,240);
							}
						}
					}
				}
			}
			else if(this.name === "GiantDetonatorBot"&&this.time%60 === 0){
				bursts.push(new burst(this.x,this.y,46,100,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<240){
						bursts.push(new burst(this.x,this.y,46,400,0));
						this.life-=1000;
						for(var k in towers){
							if(dist(this.x,this.y,towers[k].x,towers[k].y)<320){
								towers[k].stun = max(towers[k].stun,240);
							}
						}
					}
				}
			}
			else if(this.name === "EngineerBot"&&this.time%240 === 0){
				enemies.push(new enemy(this.x,this.y,350,this.value));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = 0;
			}
			else if(this.name === "Ennealis"||this.name === "Octrax"){
				if(this.attackTimer<=0){
					if(this.life<=this.maxLife*5/6&&this.sandals>0){
						this.usingAttack = 3;
						this.attackTimer = 301;
					}
					else if(this.life<=this.maxLife/2&&this.dress>0){
						this.usingAttack = 4;
						this.attackTimer = 300;
					}
					else{
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&this.wantAttack !== 2&&towers.length>0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = this.wantAttack;
							this.attackTimer = 240;
						}
						else if(this.wantAttack === 2){
							this.shouldShoot = false;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<90&&!this.shouldShoot&&towers[j].stun<=0){
									this.shouldShoot = true;
									this.usingAttack = 2;
									this.attackTimer = 316;
									this.speed = 0;
									this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
								}
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0||this.usingAttack === 1){
						if(this.attackTimer>120&&this.attackTimer<150){
							this.handSpin-=3;
							this.pointSpin+=3;
						}
						else if(this.attackTimer>90&&this.attackTimer<120){
							this.handSpin+=3;
							this.pointSpin-=3;
						}
						if(this.attackTimer === 120){
							if(this.usingAttack === 0){
								for(j=0;j<3;j++){
									if(this.name === "Octrax"){
										enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),310,this.value));
									}
									else{
										enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),266,this.value));
									}
									enemies[enemies.length-1].correct = false;
									enemies[enemies.length-1].position = this.position;
									enemies[enemies.length-1].positionMove = this.positionMove;
									enemies[enemies.length-1].totalDistance = this.totalDistance-50;
									enemies[enemies.length-1].direction = this.direction;
									enemies[enemies.length-1].reward = 0;
								}
							}
							else{
								for(var k=0;k<12;k++){
									if(this.name === "Octrax"){
										bursts.push(new shot(this.x,this.y,61,this.direction+k*30));
									}
									else{
										bursts.push(new shot(this.x,this.y,54,this.direction+k*30));
									}
								}
							}
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer>315){
							if(this.rate%45>=1){
								this.rate++;
								this.attackTimer++;
							}
						}
						else if(this.attackTimer>225){
							if(this.completeSpin<this.completeSpinGoal-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>this.completeSpinGoal+2){
								this.completeSpin-=4;
							}
							if(abs(this.completeSpin-this.completeSpinGoal)<2){
								this.attackTimer = 225;
							}
						}
						else if(this.attackTimer>195){
							this.handSpin-=3;
							this.pointSpin+=3;
						}
						else if(this.attackTimer>180){
							this.handMove+=0.5;
						}
						else if(this.attackTimer>165){
							this.handMove-=0.5;
							if(this.attackTimer === 180){
								for(j in towers){
									if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<60&&dist(this.x,this.y,towers[j].x,towers[j].y)<125){
										if(this.name === "Octrax"){
											towers[j].stun = max(towers[j].stun,1350);
										}
										else{
											towers[j].stun = max(towers[j].stun,900);
										}
									}
								}
							}
						}
						else if(this.attackTimer>135){
							this.handSpin+=3;
							this.pointSpin-=3;
						}
						else if(this.attackTimer>45){
							if(this.completeSpin<-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>2){
								this.completeSpin-=4;
							}
						}
						if(this.attackTimer === 45||abs(this.completeSpin)<2&&this.attackTimer<135){
							this.speed = this.standardSpeed;
							this.pointSpin = 0;
							this.handSpin = 0;
							this.handMove = 0;
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer>300&&(this.rate%45>=23||this.rate%45<=21)){
							this.rate++;
							this.attackTimer++;
						}
						else if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240){
							this.sandals-=1/60;
						}
						else if(this.attackTimer === 240){
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 4){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,7,0));
							this.standardSpeed*=1.5;
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<145){
									if(this.name === "Octrax"){
										towers[j].stun = max(towers[j].stun,510);
									}
									else{
										towers[j].stun = max(towers[j].stun,390);
									}
								}
							}
						}
						else if(this.attackTimer>=180){
							this.dress-=1/60;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Donu"&&this.time%600 === 0){
				bursts.push(new burst(this.x,this.y,6,6,0));
				for(j in enemies){
					if(enemies[j].name === "Donu"||enemies[j].name === "Deca"){
						enemies[j].speed*=1.1;
					}
				}
			}
			else if(this.name === "Deca"&&this.time%600 === 0){
				bursts.push(new burst(this.x,this.y,6,6,0));
				for(j in enemies){
					if(enemies[j].name === "Donu"||enemies[j].name === "Deca"){
						enemies[j].defense+=5;
					}
				}
			}
			else if(this.name === "Summonist"&&this.activated&&this.time%1440 === 0){
				for(j=0;j<floor(random(2,4));j++){
					enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),420,this.value));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].reward = 0;
				}
			}
			else if(this.name === "Eternal Awakened King"||this.name === "The Awakened Void"){
				if(this.attackTimer<=0){
					if(this.wantAttack === 0){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<150&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 0;
								this.attackTimer = 300;
							}
						}
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 1;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 2){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 2;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 3){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<115&&!this.shouldShoot&&towers[j].stun<=0){
								this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
								this.shouldShoot = true;
								this.usingAttack = 3;
								this.attackTimer = 400;
								this.speed = 0;
							}
						}
					}
					else if(this.wantAttack === 4){
						this.shouldShoot = false;
						for(j in towers){
							if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<30&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 4;
								this.attackTimer = 400;
							}						
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,12,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<250){
									if(this.name === "The Awakened Void"){
										towers[j].stun = max(towers[j].stun,600);
									}
									else{
										towers[j].stun = max(towers[j].stun,720);
									}
								}
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>=260){
							this.handSpin-=3;
						}
						else if(this.attackTimer>=220){
							this.handSpin+=3;
							if(this.attackTimer%20 === 0){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.type+1,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer>264){
							this.handMoveX+=1/2;
							this.handMoveY+=1/2;
						}
						else if(this.attackTimer>250){
							this.handMoveY+=1/2;
						}
						else if(this.attackTimer>236){
							this.handMoveY-=1/2;
							if(this.attackTimer === 250){
								this.randomSpin = random(0,40);
								for(j=0;j<9;j++){
									if(this.name === "The Awakened Void"){
										bursts.push(new shot(this.x+sin(j*40+this.randomSpin)*1200,this.y-cos(j*40+this.randomSpin)*1200,56,j*40+this.randomSpin));
									}
									else{
										bursts.push(new shot(this.x+sin(j*40+this.randomSpin)*1200,this.y-cos(j*40+this.randomSpin)*1200,55,j*40+this.randomSpin));
									}
								}
							}
						}
						else if(this.attackTimer>200){
							this.handMoveX-=1/2;
							this.handMoveY-=1/2;
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer>=310){
							if(this.completeSpin<this.completeSpinGoal-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>this.completeSpinGoal+2){
								this.completeSpin-=4;
							}
							if(abs(this.completeSpin-this.completeSpinGoal)<2){
								this.attackTimer = 310;
							}
						}
						else if(this.attackTimer>=295){
							this.handMoveX+=1/2*36/15;
							this.handMoveY+=1/2*36/15;
							this.pointSpin+=2.5;
						}
						else if(this.attackTimer>=275&&this.attackTimer<290){
							this.pointSpin-=5;
						}
						else if(this.attackTimer === 272){
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<50&&dist(this.x,this.y,towers[j].x,towers[j].y)<130){
									if(this.name === "The Awakened Void"){
										towers[j].stun = max(towers[j].stun,1620);
									}
									else{
										towers[j].stun = max(towers[j].stun,1350);
									}
									enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),20,this.path));
									enemies[enemies.length-1].correct = false;
									enemies[enemies.length-1].position = this.position;
									enemies[enemies.length-1].positionMove = this.positionMove;
									enemies[enemies.length-1].totalDistance = this.totalDistance-50;
									enemies[enemies.length-1].direction = this.direction;
									enemies[enemies.length-1].reward = false;
								}
							}
						}
						else if(this.attackTimer>=255&&this.attackTimer<270){
							this.handMoveX-=1/2*36/15;
							this.handMoveY-=1/2*36/15;
							this.pointSpin+=2.5;
						}
						else if(this.attackTimer>=160&&this.attackTimer<250){
							if(this.completeSpin<-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>2){
								this.completeSpin-=4;
							}
						}
						if(this.attackTimer === 155||abs(this.completeSpin)<2&&this.attackTimer<250){
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 4){
						if(this.attackTimer>364){
							this.handMoveX+=1/2;
							this.handMoveY+=1/2;
						}
						else if(this.attackTimer>350){
							this.handMoveY+=1/2;
						}
						else if(this.attackTimer>336){
							this.handMoveY-=1/2;
							if(this.attackTimer === 350){
								for(j=0;j<17;j++){
									if(this.name === "The Awakened Void"){
										bursts.push(new shot(this.x-sin(this.direction)*80,this.y+cos(this.direction)*80,56,this.direction-56+j*7));
									}
									else{
										bursts.push(new shot(this.x-sin(this.direction)*80,this.y+cos(this.direction)*80,55,this.direction-56+j*7));
									}
								}
							}
						}
						else if(this.attackTimer>300){
							this.handMoveX-=1/2;
							this.handMoveY-=1/2;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Dimension Wanderer"){
				if(this.defense>2){
					this.defense--;
				}
				if(this.life<this.maxLife/5&&this.speed<0.75){
					this.speed+=0.001;
					this.standardSpeed+=0.001;
				}
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(floor(random(0,300)) === 0&&(this.wantAttack === 0||this.wantAttack === 2)&&!this.shouldShoot){
						this.shouldShoot = true;
						this.usingAttack = 0;
						this.attackTimer = 240;
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<100&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 300;
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer>210){
							this.handMove++;
						}
						else if(this.attackTimer>180){
							this.handMove--;
						}
						if(this.attackTimer === 210){
							for(j=0;j<2;j++){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.spawns[floor(random(0,this.spawns.length-0.5))],this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<100){
									towers[j].stun = max(towers[j].stun,300);
								}
							}
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer>210){
							this.handMove++;
						}
						else if(this.attackTimer>180){
							this.handMove--;
						}
						if(this.attackTimer === 210){
							this.randomSpin = random(0,72);
							for(j=0;j<5;j++){
								bursts.push(new shot(this.x,this.y,57,j*72+this.randomSpin));
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Checkpoint"&&this.time%240 === 0){
				for(var k=0;k<100;k++){
					this.spawn = floor(random(0,enemyTypes.length-0.01));
					if(enemyTypes[this.spawn].life<=500&&enemyTypes[this.spawn].life>1&&enemyTypes[this.spawn].life !== 101&&enemyTypes[this.spawn].life !== 111){
						enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.spawn,this.path));
						enemies[enemies.length-1].correct = false;
						enemies[enemies.length-1].position = this.position;
						enemies[enemies.length-1].positionMove = this.positionMove;
						enemies[enemies.length-1].totalDistance = this.totalDistance-50;
						enemies[enemies.length-1].direction = this.direction;
						enemies[enemies.length-1].reward = false;
						k = 100;
					}
				}
			}
			else if(this.name === "Checkpoint Creator"&&this.time%1080 === 540){
				enemies.push(new enemy(this.x+random(-10,10),this.y+random(-10,10),454,this.path));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Redistributor"&&this.activated){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<200&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = ((atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)+720)%360;
							this.recharge = 1200;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=1110){
					if(this.extraSpin<this.extraSpinGoal-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>this.extraSpinGoal+2){
						this.extraSpin-=4;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<2){
						this.recharge = 1110;
					}
				}
				else if(this.recharge === 1095){
					bursts.push(new shot(this.x,this.y,58,this.direction+this.extraSpin));
				}
				else if(this.recharge>=990&&this.recharge<1080){
					if(this.extraSpin<-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>2){
						this.extraSpin-=4;
					}
				}
				if(this.recharge === 990||abs(this.extraSpin)<2&&this.recharge<1080){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>=1095&&this.recharge<1110){
					this.handMove+=6;
				}
				if(this.recharge>=1080&&this.recharge<1095){
					this.handMove-=6;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Regenerator"&&this.time%180 === 0){
				for(j in enemies){
					if(dist(this.x,this.y,enemies[j].x,enemies[j].y)<150&&enemies[j].life<enemies[j].maxLife&&enemies[j].life>0&&enemies[j].maxLife<10000){
						enemies[j].life+=enemies[j].maxLife/10;
						enemies[j].life = min(enemies[j].life,enemies[j].maxLife);
						bursts.push(new burst(enemies[j].x,enemies[j].y,14,0.6,0));
						enemies[j].hitTimer = 600;
					}
					if(dist(this.x,this.y,enemies[j].x,enemies[j].y)<150&&enemies[j].speed<enemies[j].standardSpeed*1.5&&enemies[j].life>0&&enemies[j].maxLife<10000&&enemies[j].type !== this.type){
						enemies[j].speed = enemies[j].standardSpeed*1.5;
					}
				}
			}
			else if(this.name === "Tharea the Shattered"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					for(j in towers){
						if((dist(this.x,this.y,towers[j].x,towers[j].y)<200&&this.wantAttack === 0||dist(this.x,this.y,towers[j].x,towers[j].y)<90&&this.wantAttack === 1)&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.usingAttack = this.wantAttack;
							this.attackTimer = 300;
							this.extraSpinGoal = ((atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)+720)%360;
							this.speed = 0;
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer>=210){
							if(this.extraSpin<this.extraSpinGoal-2){
								this.extraSpin+=4;
							}
							else if(this.extraSpin>this.extraSpinGoal+2){
								this.extraSpin-=4;
							}
							if(abs(this.extraSpin-this.extraSpinGoal)<2){
								this.attackTimer = 210;
							}
						}
						else if(this.attackTimer === 195){
							for(var k=0;k<5;k++){
								bursts.push(new shot(this.x,this.y,59,this.direction+this.extraSpin-40+k*20));
							}
						}
						else if(this.attackTimer>=90&&this.attackTimer<180){
							if(this.extraSpin<-2){
								this.extraSpin+=4;
							}
							else if(this.extraSpin>2){
								this.extraSpin-=4;
							}
						}
						if(this.attackTimer === 90||abs(this.extraSpin)<2&&this.attackTimer<180){
							this.speed = this.standardSpeed;
						}
						if(this.attackTimer>=195&&this.attackTimer<210){
							this.handMove++;
						}
						if(this.attackTimer>=180&&this.attackTimer<195){
							this.handMove--;
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,4,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<90){
									towers[j].stun = max(towers[j].stun,270);
								}
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Councilman"){
				if(this.shieldTimer>0){
					this.shieldTimer--;
					this.defense = 32;
					if(this.shieldFade<255){
						this.shieldFade+=5;
					}
				}
				else{
					if(this.shieldFade>0){
						this.shieldFade-=5;
					}
					this.defense = 0;
				}
				if(this.speed>this.standardSpeed){
					this.speed-=this.standardSpeed/5;
				}
				if(this.attackTimer<=0){
					if(floor(random(0,300)) === 0){
						this.usingAttack = this.wantAttack;
						this.attackTimer = 150;
					}
				}
				else{
					if(this.attackTimer>120&&this.attackTimer<150){
						this.handMove-=3;
					}
					else if(this.attackTimer>90&&this.attackTimer<120){
						this.handMove+=3;
					}
					if(this.attackTimer === 120){
						if(this.usingAttack === 0){
							this.shieldTimer = 600;
						}
						else if(this.usingAttack === 1){
							for(var k=0;k<2;k++){
								enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),306,this.value));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = 0;
							}
						}
						else if(this.usingAttack === 2){
							this.speed = this.standardSpeed*2;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Zenith"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(floor(random(0,300)) === 0&&this.wantAttack === 0&&!this.shouldShoot){
						this.shouldShoot = true;
						this.usingAttack = 0;
						this.attackTimer = 240;
					}
					else if(this.wantAttack === 1){
						for(j in towers){
							if(floor(random(0,600)) === 0&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 600;
								this.speed = 0;
								this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							}						
						}
					}
					else if(this.wantAttack === 2){
						for(j in towers){
							if(floor(random(0,300)) === 0&&dist(this.x,this.y,towers[j].x,towers[j].y)<100&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 2;
								this.attackTimer = 600;
								this.speed = 0;
								this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 240){
							this.speed = 0;
						}
						else if(this.attackTimer === 225){
							for(j=0;j<3;j++){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.spawns[floor(random(0,this.spawns.length-0.5))],this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
						else if(this.attackTimer === 210){
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 1||this.usingAttack === 2){
						if(this.attackTimer>510){
							if(this.completeSpin<this.completeSpinGoal-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>this.completeSpinGoal+2){
								this.completeSpin-=4;
							}
							if(abs(this.completeSpin-this.completeSpinGoal)<2){
								this.attackTimer = 510;
							}
						}
						else if(this.attackTimer === 500&&this.usingAttack === 1){
							for(var k=0;k<17;k++){
								bursts.push(new shot(this.x,this.y,39,this.direction+this.completeSpin-64+k*8));
							}
							for(k=0;k<6;k++){
								this.pointSpin[k] = random(0,360);
								for(var l=0;l<5;l++){
									bursts.push(new shot(this.x+sin(this.time+k*60)*27.5,this.y+cos(this.time+k*60),39,this.direction+this.completeSpin+this.pointSpin[k]-16+l*8));
								}
							}
						}
						else if(this.attackTimer === 500&&this.usingAttack === 2){
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction-this.completeSpin)<30&&dist(this.x,this.y,towers[j].x,towers[j].y)<100){
									towers[j].absorbed = true;
									enemies.push(new enemy(levels[level].startX[this.path%levels[level].paths.length],levels[level].startY[this.path%levels[level].paths.length],261,this.path));
								}
							}
						}
						else if(this.attackTimer<=495&&this.attackTimer>405){
							if(this.completeSpin<-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>2){
								this.completeSpin-=4;
							}
						}
						if(this.attackTimer === 405||abs(this.completeSpin)<2&&this.attackTimer<495){
							this.speed = this.standardSpeed;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Antitop"||this.name === "Top"){
				for(var k in this.thresholds){
					if(this.life<this.thresholds[k]){
						this.thresholds[k]-=this.drops[k];
						enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),this.spawns[k],this.path));
						enemies[enemies.length-1].correct = false;
						enemies[enemies.length-1].position = this.position;
						enemies[enemies.length-1].positionMove = this.positionMove;
						enemies[enemies.length-1].totalDistance = this.totalDistance-50;
						enemies[enemies.length-1].direction = this.direction;
						enemies[enemies.length-1].reward = false;
					}
				}
			}
			else if(this.name === "Torpedo Sphere"&&this.time%18 === 0){
				bursts.push(new shot(this.x,this.y,60,this.direction+this.time));
			}
			else if(this.name === "Rotoblade"&&this.time%90 === 0){
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<100){
						towers[j].stun = max(towers[j].stun,60);
					}
				}
			}
			else if(this.name === "Field Artillery"){
				if(this.recharge === 0){
					this.shouldShoot = false;
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction)<20&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.recharge = 900;
						}
					}
				}
				else{
					this.recharge--;
					if(this.recharge>=600&&this.shouldShoot){
						this.speed = 0;
						if(this.recharge === 750){
							for(var k=0;k<5;k++){
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-30+cos(this.direction+this.extraSpin)*-72,this.y+cos(this.direction+this.extraSpin)*30+sin(this.direction+this.extraSpin)*-72,46,this.direction-30+k*15));
								bursts.push(new shot(this.x+sin(this.direction+this.extraSpin)*-30+cos(this.direction+this.extraSpin)*72,this.y+cos(this.direction+this.extraSpin)*30+sin(this.direction+this.extraSpin)*72,46,this.direction-30+k*15));
							}
						}
					}
					else{
						this.speed = this.standardSpeed;
						this.extraSpin = 0;
					}
				}
			}
			else if(this.name === "Planetary Devastator"&&this.time%120 === 0){
				enemies.push(new enemy(this.x+random(-10,10),this.y+random(-10,10),486,this.path));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Rewriter"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<120&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.usingAttack = 0;
							this.attackTimer = 600;
						}
					}
				}
				else{
					if(this.attackTimer === 600){
						this.speed = 0;
					}
					else if(this.attackTimer>540&&this.attackTimer<600){
						this.size = this.baseSize+sin(((this.attackTimer)-540)*3)/2;
					}
					else if(this.attackTimer === 540){
						bursts.push(new burst(this.x,this.y,6,6,0));
						this.speed = this.standardSpeed;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<120){
								towers[j].stun = max(towers[j].stun,90);
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Catharis"){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(!this.shouldShoot&&dist(this.x,this.y,towers[j].x,towers[j].y)<125&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							this.shouldShoot = true;
							this.recharge = 600;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=510){
					if(this.extraSpin<this.extraSpinGoal-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>this.extraSpinGoal+2){
						this.extraSpin-=4;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<2){
						this.recharge = 510;
					}
				}
				else if(this.recharge>=500){
					this.handSpin+=9;
				}
				else if(this.recharge>=485){
					this.handMove+=0.4;
				}
				else if(this.recharge === 483){
					for(j in towers){
						if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.extraSpin))<20&&dist(this.x,this.y,towers[j].x,towers[j].y)<125){
							towers[j].stun = max(towers[j].stun,300);
						}
					}
				}
				else if(this.recharge>=465&&this.recharge<480){
					this.handMove-=0.4;
				}
				else if(this.recharge>=455&&this.recharge<465){
					this.handSpin-=9;
				}
				else if(this.recharge>=365&&this.recharge<455){
					if(this.extraSpin<-2){
						this.extraSpin+=4;
					}
					else if(this.extraSpin>+2){
						this.extraSpin-=4;
					}
				}
				if(this.recharge === 360||abs(this.extraSpin)<2&&this.recharge<455){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Mobocracy"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<160&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.usingAttack = 0;
							this.attackTimer = 600;
						}
					}
				}
				else{
					if(this.attackTimer === 600){
						this.speed = 0;
					}
					else if(this.attackTimer>540&&this.attackTimer<600){
						this.size = this.baseSize+sin(((this.attackTimer)-540)*3)/2;
					}
					else if(this.attackTimer === 540){
						bursts.push(new burst(this.x,this.y,6,8,0));
						this.speed = this.standardSpeed;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<160){
								towers[j].stun = max(towers[j].stun,180);
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Eschaton"){
				if(this.defense>5){
					this.defense--;
				}
				if(this.attackTimer<=0){
					if(floor(random(0,300)) === 0){
						this.usingAttack = 0;
						this.attackTimer = 240;
					}
					else if(this.life<=this.maxLife/2&&!this.trigger){
						this.trigger = true;
						this.usingAttack = 1;
						this.attackTimer = 240;
					}
				}
				else{
					if(this.attackTimer>210){
						this.handMove++;
					}
					else if(this.attackTimer>180){
						this.handMove--;
					}
					if(this.usingAttack === 0&&this.attackTimer === 210){
						for(var k=0;k<3;k++){
							enemies.push(new enemy(this.x+random(-10,10),this.y+random(-10,10),452,this.path));
							enemies[enemies.length-1].correct = false;
							enemies[enemies.length-1].position = this.position;
							enemies[enemies.length-1].positionMove = this.positionMove;
							enemies[enemies.length-1].totalDistance = this.totalDistance-50;
							enemies[enemies.length-1].direction = this.direction;
							enemies[enemies.length-1].reward = false;
						}
					}
					else if(this.usingAttack === 1&&this.attackTimer === 210){
						enemies.push(new enemy(this.x+random(-10,10),this.y+random(-10,10),465,this.path));
						enemies[enemies.length-1].correct = false;
						enemies[enemies.length-1].position = this.position;
						enemies[enemies.length-1].positionMove = this.positionMove;
						enemies[enemies.length-1].totalDistance = this.totalDistance-50;
						enemies[enemies.length-1].direction = this.direction;
						enemies[enemies.length-1].reward = false;
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Descended Summoner"&&this.time%180 === 0){
				enemies.push(new enemy(this.x+random(-20,20),this.y+random(-20,20),534,this.path));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "PurgeDual"){
				if(this.recharge<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(!this.shouldShoot&&dist(this.x,this.y,towers[j].x,towers[j].y)<52&&floor(random(0,5)) === 0&&towers[j].stun<=0){
							this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
							this.shouldShoot = true;
							this.recharge = 640;
							this.speed = 0;
						}
					}
				}
				else if(this.recharge>=640){
					if(this.extraSpin<this.extraSpinGoal-4){
						this.extraSpin+=8;
					}
					else if(this.extraSpin>this.extraSpinGoal+4){
						this.extraSpin-=8;
					}
					if(abs(this.extraSpin-this.extraSpinGoal)<4){
						this.recharge = 640;
					}
				}
				else if(this.recharge>=635){
					this.armMove+=1/5;
				}
				else if(this.recharge>=335&&this.recharge<635){
					this.handMove+=48/5;
					if(this.recharge%30 === 0){
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<52){
								towers[j].stun = max(towers[j].stun+60,1800);
							}
						}
					}
				}
				else if(this.recharge>=330&&this.recharge<335){
					this.armMove-=1/5;
				}
				else if(this.recharge>=240&&this.recharge<330){
					if(this.extraSpin<-4){
						this.extraSpin+=8;
					}
					else if(this.extraSpin>4){
						this.extraSpin-=8;
					}
				}
				if(this.recharge === 240||abs(this.extraSpin)<4&&this.recharge<330){
					this.speed = this.standardSpeed;
				}
				if(this.recharge>0){
					this.recharge--;
				}
			}
			else if(this.name === "Unascertained"){
 				if(this.attackTimer<=0){
					this.shouldShoot = false;
					for(j in towers){
						if(dist(this.x,this.y,towers[j].x,towers[j].y)<120&&!this.shouldShoot&&towers[j].stun<=0){
							this.shouldShoot = true;
							this.usingAttack = 0;
							this.attackTimer = 600;
						}
					}
				}
				else{
					if(this.attackTimer === 600){
						this.speed = 0;
					}
					else if(this.attackTimer>540&&this.attackTimer<600){
						this.size = this.baseSize+sin(((this.attackTimer)-540)*3)/2;
					}
					else if(this.attackTimer === 540){
						bursts.push(new burst(this.x,this.y,6,6,0));
						this.speed = this.standardSpeed;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<120){
								towers[j].stun = max(towers[j].stun,150);
							}
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Giant"&&this.time%600 === 0){
				for(j=0;j<12;j++){
					enemies.push(new enemy(this.x+random(-40,40),this.y+random(-40,40),552+floor(random(0,2)),this.value));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].reward = 0;
				}
			}
			else if(this.name === "Illumina"){
				if(this.armorActivated2&&this.armorFade2<255){
					this.armorFade2+=5;
					this.life+=this.maxLife/306;
				}
				if(this.shieldTimer>0){
					this.shieldTimer--;
					this.defense = 70;
					if(this.shieldFade<255){
						this.shieldFade+=5;
					}
				}
				else{
					if(this.shieldFade>0){
						this.shieldFade-=5;
					}
					this.defense = 0;
				}
				for(j in this.color2){
					if(this.eyeColor[j]<this.eyeColorGoal[j]){
						this.eyeColor[j]++;
					}
					if(this.eyeColor[j]>this.eyeColorGoal[j]){
						this.eyeColor[j]--;
					}
				}
				if(this.attackTimer<=0){
					if(this.life<=this.maxLife/3&&this.armorFade>0){
						this.usingAttack = 5;
						this.attackTimer = 300;
						this.speed = 0;
					}
					else if(this.wantAttack === 0){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<75&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 0;
								this.attackTimer = 300;
							}
						}
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 1;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 2){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<95&&!this.shouldShoot&&towers[j].stun<=0){
								this.completeSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
								this.shouldShoot = true;
								this.usingAttack = 2;
								this.attackTimer = 400;
								this.speed = 0;
							}
						}
					}
					else if(this.wantAttack === 3){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 3;
							this.attackTimer = 300;
						}
					}
					else if(this.wantAttack === 4){
						this.shouldShoot = false;
						if(floor(random(0,300)) === 0&&!this.shouldShoot){
							this.shouldShoot = true;
							this.usingAttack = 4;
							this.attackTimer = 300;
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer === 240){
							bursts.push(new burst(this.x,this.y,6,6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
									towers[j].stun = max(towers[j].stun,375);
								}
							}
						}
					}
					else if(this.usingAttack === 1){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>=260){
							this.handSpin-=3;
						}
						else if(this.attackTimer>=220){
							this.handSpin+=3;
							if(this.attackTimer%4 === 0){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),146,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
							if(this.attackTimer%20 === 0){
								enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),532,this.path));
								enemies[enemies.length-1].correct = false;
								enemies[enemies.length-1].position = this.position;
								enemies[enemies.length-1].positionMove = this.positionMove;
								enemies[enemies.length-1].totalDistance = this.totalDistance-50;
								enemies[enemies.length-1].direction = this.direction;
								enemies[enemies.length-1].reward = false;
							}
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 2){
						if(this.attackTimer>=310){
							if(this.completeSpin<this.completeSpinGoal-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>this.completeSpinGoal+2){
								this.completeSpin-=4;
							}
							if(abs(this.completeSpin-this.completeSpinGoal)<2){
								this.attackTimer = 310;
							}
						}
						else if(this.attackTimer>=295){
							this.handMoveX+=1/2*36/15;
							this.handMoveY+=1/2*36/15;
							this.pointSpin+=2.5;
						}
						else if(this.attackTimer>=275&&this.attackTimer<290){
							this.pointSpin-=5;
						}
						else if(this.attackTimer === 272){
							for(j in towers){
								if(abs(atan2(this.x-towers[j].x,towers[j].y-this.y)-(this.direction+this.completeSpin))<40&&dist(this.x,this.y,towers[j].x,towers[j].y)<105){
									towers[j].stun = max(towers[j].stun,1440);
								}
							}
						}
						else if(this.attackTimer>=255&&this.attackTimer<270){
							this.handMoveX-=1/2*36/15;
							this.handMoveY-=1/2*36/15;
							this.pointSpin+=2.5;
						}
						else if(this.attackTimer>=160&&this.attackTimer<250){
							if(this.completeSpin<-2){
								this.completeSpin+=4;
							}
							else if(this.completeSpin>2){
								this.completeSpin-=4;
							}
						}
						if(this.attackTimer === 155||abs(this.completeSpin)<2&&this.attackTimer<250){
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 3){
						if(this.attackTimer === 300){
							this.speed = 0;
						}
						else if(this.attackTimer>=270){
							this.handSpin-=4;
						}
						else if(this.attackTimer>=240){
							this.handSpin+=4;
							if(this.attackTimer === 260){
								this.shieldTimer = 1080;
							}
						}
						else{
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack === 4){
						if(this.attackTimer<=240&&this.attackTimer>=220&&this.attackTimer%4 === 0){
							for(j in towers){
								if(floor(random(0,30)) === 0){
									towers[j].stun = 240;
									bursts.push(new burst(towers[j].x,towers[j].y,59,1,0));
								}
							}
						}
						if(this.attackTimer>=250){
							this.handMoveY+=0.5;
						}
						else if(this.attackTimer>=200){
							this.handMoveY-=0.5;
						}
					}
					else if(this.usingAttack === 5){
						if(this.attackTimer>270){
							this.armorFade-=10;
							this.handMoveY+=0.6;
							this.pointSpin-=3;
							this.defense = 300;
						}
						else if(this.attackTimer>170){
							this.life+=this.maxLife/600;
						}
						else if(this.attackTimer>140){
							this.handMoveY-=0.6;
							this.pointSpin+=3;
						}
						else if(this.attackTimer === 140){
							this.standardSpeed*=2;
							this.eyeColorGoal = [240,200,240];
							this.speed = this.standardSpeed;
							this.defense = 0;
						}
					}
					this.attackTimer--;
				}
			}
			else if(this.name === "Lunatisa"){
				for(k=0;k<enemies.length;k++){
					if(dist(this.x,this.y,enemies[k].x,enemies[k].y)<25&&enemies[k].name ==="Lunar Dust"){
						enemies[k].life = 0;
						this.life = min(this.life+500,this.maxLife);
					}
				}
				if(this.time%120 == 0){
					enemies.push(new enemy(levels[level].startX[this.path%levels[level].paths.length],levels[level].startY[this.path%levels[level].paths.length],208,this.path));
				}
			}
			else if(this.name === "new enemy()"&&this.time%300 === 0){
				enemies.push(new enemy(this.x+random(-20,20),this.y+random(-20,20),floor(random(0,enemyTypes.length)),this.path));
				enemies[enemies.length-1].correct = false;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Voidglass"){
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<100){
						towers[j].stun = max(towers[j].stun,300);
					}
				}
			}
			else if(this.name === "Moonfall"&&this.time%15 === 0&&this.activated){
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<150&&enemies[j].life<enemies[j].maxLife&&enemies[j].life>0&&enemies[j].maxLife<100000){
						enemies[j].life+=enemies[j].maxLife/240;
						enemies[j].life = min(enemies[j].life,enemies[j].maxLife);
						bursts.push(new burst(enemies[j].x,enemies[j].y,14,0.8,0));
						bursts[bursts.length-1].color = [240,240,240];
						enemies[j].hitTimer = 600;
					}
				}
			}
			else if(this.name === "Calamity Speedy King"&&this.activated){
				if(this.time%720 === 719){
					bursts.push(new burst(this.x,this.y,24,1,0));
					bursts[bursts.length-1].color = [255,100,100];
					this.speed*=1.125;
					this.standardSpeed*=1.125;
					this.zaps++;
					for(var k=0;k<this.zaps;k++){
						bursts.push(new burst(this.x+k*16-this.zaps*8+8,this.y,5,1,0));
					}
				}
			}
			else if(this.name === "Entity-C"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(this.wantAttack == 0){
						for(j in towers){
							if(!this.shouldShoot&&dist(this.x,this.y,towers[j].x,towers[j].y)<100&&floor(random(0,5)) === 0&&towers[j].stun<=0){
								this.extraSpinGoal = atan2(this.x-towers[j].x,towers[j].y-this.y)-this.direction;
								this.shouldShoot = true;
								this.attackTimer = 640;
								this.speed = 0;
								this.usingAttack = 0;
							}
						}
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<75&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 300;
							}
						}
					}
				}
				else if(this.usingAttack == 0){
					if(this.attackTimer>=640){
						if(this.extraSpin<this.extraSpinGoal-4){
							this.extraSpin+=8;
						}
						else if(this.extraSpin>this.extraSpinGoal+4){
							this.extraSpin-=8;
						}
						if(abs(this.extraSpin-this.extraSpinGoal)<4){
							this.attackTimer = 640;
						}
					}
					else if(this.attackTimer>=635){
						this.armMove+=1/5;
					}
					else if(this.attackTimer>=335&&this.attackTimer<635){
						this.handMove+=48/5;
						if(this.attackTimer%30 === 0){
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<100){
									towers[j].stun = max(towers[j].stun+120,3600);
								}
							}
						}
					}
					else if(this.attackTimer>=330&&this.attackTimer<335){
						this.armMove-=1/5;
					}
					else if(this.attackTimer>=240&&this.attackTimer<330){
						if(this.extraSpin<-4){
							this.extraSpin+=8;
						}
						else if(this.extraSpin>4){
							this.extraSpin-=8;
						}
					}
					if(this.attackTimer === 240||abs(this.extraSpin)<4&&this.attackTimer<330){
						this.speed = this.standardSpeed;
					}
					this.attackTimer--;
				}
				else if(this.usingAttack == 1){
					if(this.attackTimer == 300){
						this.speed = 0;
					}
					else if(this.attackTimer>240&&this.attackTimer<300){
						this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
					}
					else if(this.attackTimer == 240){
						bursts.push(new burst(this.x,this.y,5.5,6,0));
						this.speed = this.standardSpeed;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<115){
								towers[j].stun = max(towers[j].stun,345);
							}
						}
					}
				}
			}
			else if(this.name === "Compact Leviathan"){
				if(this.attackTimer<=0){
					this.shouldShoot = false;
					if(floor(random(0,300)) === 0&&this.wantAttack === 0&&towers.length>0&&!this.shouldShoot){
						this.shouldShoot = true;
						this.usingAttack = this.wantAttack;
						this.attackTimer = 240;
					}
					else if(this.wantAttack === 1){
						this.shouldShoot = false;
						for(j in towers){
							if(dist(this.x,this.y,towers[j].x,towers[j].y)<75&&!this.shouldShoot&&towers[j].stun<=0){
								this.shouldShoot = true;
								this.usingAttack = 1;
								this.attackTimer = 300;
							}
						}
					}
				}
				else{
					if(this.usingAttack === 0){
						if(this.attackTimer === 240){
							this.speed = 0;
						}
						else if(this.attackTimer === 225||this.attackTimer === 230||this.attackTimer === 235||this.attackTimer === 220||this.attackTimer === 215){
							for(var k in towers){
								if(floor(random(0,12)) === 0){
									bursts.push(new shot(this.x+cos(this.direction+this.extraSpin)*32,this.y+sin(this.direction+this.extraSpin)*-32,38,atan2(towers[k].x-this.x,this.y-towers[k].y)+180));
								}
							}
							for(k in units){
								if(floor(random(0,12)) === 0){
									bursts.push(new shot(this.x+cos(this.direction+this.extraSpin)*32,this.y+sin(this.direction+this.extraSpin)*-32,38,atan2(units[k].x-this.x,this.y-units[k].y)+180));
								}
							}
						}
						else if(this.attackTimer === 210){
							this.speed = this.standardSpeed;
						}
					}
					else if(this.usingAttack == 1){
						if(this.attackTimer == 300){
							this.speed = 0;
						}
						else if(this.attackTimer>240&&this.attackTimer<300){
							this.size = this.baseSize+sin(((this.attackTimer)-240)*3)/2;
						}
						else if(this.attackTimer == 240){
							bursts.push(new burst(this.x,this.y,5.5,6,0));
							this.speed = this.standardSpeed;
							for(j in towers){
								if(dist(this.x,this.y,towers[j].x,towers[j].y)<115){
									towers[j].stun = max(towers[j].stun,345);
								}
							}
						}
					}
					this.attackTimer--;
				}
			}
			if((this.burn[1]<=0||this.time%3 !== 0)&&scene !== "enemyinfo"&&(this.name === "Incorrect"||this.name === "Backwards")){
				this.positionMove+=this.speed;
				this.totalDistance-=this.speed;
				if(this.positionMove>50-this.speed/2){
					this.position--;
					this.positionMove-=50;
				}
				if(this.position<0){
					this.life = 0;
				}
				else if(levels[level].paths[this.path][this.position] === "T"){
					this.positionMove+=this.speed;
					if(abs(50-this.positionMove)<this.speed/2){
						this.position--;
						this.positionMove = 0;
					}
					if(levels[level].paths[this.path][this.position-1] === "L"&&levels[level].paths[this.path][this.position+1] === "U"||levels[level].paths[this.path][this.position-1] === "U"&&levels[level].paths[this.path][this.position+1] === "R"||levels[level].paths[this.path][this.position-1] === "R"&&levels[level].paths[this.path][this.position+1] === "D"||levels[level].paths[this.path][this.position-1] === "D"&&levels[level].paths[this.path][this.position+1] === "L"){
						this.direction-=this.speed*18/5;
					}
					else{
						this.direction+=this.speed*18/5;
					}
				}
				else{
					if(levels[level].paths[this.path][this.position] === "L"){
						if(this.correct){
							this.y = round((this.y-this.snapY)/50)*50+this.snapY;
						}
						this.x+=this.speed;
						this.direction = 270;
					}
					else if(levels[level].paths[this.path][this.position] === "R"){
						if(this.correct){
							this.y = round((this.y-this.snapY)/50)*50+this.snapY;
						}
						this.x-=this.speed;
						this.direction = 90;
					}
					else if(levels[level].paths[this.path][this.position] === "U"){
						if(this.correct){
							this.x = round((this.x-this.snapX)/50)*50+this.snapX;
						}
						this.y+=this.speed;
						this.direction = 0;
					}
					else if(levels[level].paths[this.path][this.position] === "D"){
						if(this.correct){
							this.x = round((this.x-this.snapX)/50)*50+this.snapX;
						}
						this.y-=this.speed;
						this.direction = 180;
					}
				}
			}
			else if((this.burn[1]<=0&&this.name !== "Demon"&&this.name !== "Molten"||this.time%3 !== 0)&&scene !== "enemyinfo"){
				this.positionMove+=this.speed;
				this.totalDistance+=this.speed;
				if(this.positionMove>50-this.speed/2){
					this.position++;
					this.positionMove-=50;
				}
				if(level === 6&&this.path === 0&&this.totalDistance>975&&this.totalDistance<1025){
					gateTimer = 300;
				}
				if(level === 6&&this.path === 0&&this.totalDistance>2075&&this.totalDistance<2125){
					gateTimer2 = 300;
				}
				if(this.position>=levels[level].paths[this.path].length){
					if(scene !== "enemyinfo"&&scene !== "enemyinfo2"){
						if(this.name === "Frustrating Balloon"){
							this.works = false;
							for(j in towers){
								if(towers[j].name === "City"&&towers[j].stage>=3){
									this.works = true;
								}
							}
							if(this.works){
								lives--;
							}
							else{
								lives-=2;
							}
							for(j in towers){
								if(towers[j].name === "Farm 3"&&towers[j].stage>=5){
									bursts.push(new drop(towers[j].x,towers[j].y,0,random(0,360),towers[j].range/random(45,60),towers[j].damage));
									bursts[bursts.length-1].color = [255,150,150];
								}
							}
							this.path = (this.path+1)%levels[level].paths.length;
							this.x = levels[level].startX[this.path];
							this.y = levels[level].startY[this.path];
							this.position = 0;
							this.totalDistance = 0;
						}
						else if(this.name === "4 Letter Word Balloon"||this.name === "Annoying Balloon"||this.name === "Irritating Balloon"){
							this.path = (this.path+1)%levels[level].paths.length;
							this.x = levels[level].startX[this.path];
							this.y = levels[level].startY[this.path];
							this.position = 0;
							this.totalDistance = 0;
						}
						else if(this.name === "Big Rage Balloon"){
							this.works = false;
							for(j in towers){
								if(towers[j].name === "City"&&towers[j].stage>=3){
									this.works = true;
								}
							}
							if(this.works){
								lives-=4;
								for(j in towers){
									if(towers[j].name === "Farm 3"&&towers[j].stage>=5){
										for(k=0;k<2;k++){
											bursts.push(new drop(towers[j].x,towers[j].y,0,random(0,360),towers[j].range/random(45,60),towers[j].damage));
											bursts[bursts.length-1].color = [255,150,150];
										}
									}
								}
							}
							else{
								lives-=8;
								for(j in towers){
									if(towers[j].name === "Farm 3"&&towers[j].stage>=5){
										for(k=0;k<4;k++){
											bursts.push(new drop(towers[j].x,towers[j].y,0,random(0,360),towers[j].range/random(45,60),towers[j].damage));
											bursts[bursts.length-1].color = [255,150,150];
										}
									}
								}
							}
							this.path = (this.path+1)%levels[level].paths.length;
							this.x = levels[level].startX[this.path];
							this.y = levels[level].startY[this.path];
							this.position = 0;
							this.totalDistance = 0;
						}
						else if(this.name !== "Ancient Energy"&&this.name !== "Fallen Energy"){
							this.works = false;
							for(j in towers){
								if(towers[j].name === "City"&&towers[j].stage>=3){
									this.works = true;
								}
							}
							if(this.works){
								lives-=ceil(this.life/2);
								for(j in towers){
									if(towers[j].name === "Farm 3"&&towers[j].stage>=5){
										for(k=0;k<min(floor(ceil(this.life/2)/2),100);k++){
											money+=towers[j].damage;
											bursts.push(new burst(this.x,this.y,20,0.8,0));
											bursts[bursts.length-1].value = towers[j].damage;
										}
									}
								}
							}
							else{
								lives-=ceil(this.life);
								for(j in towers){
									if(towers[j].name === "Farm 3"&&towers[j].stage>=5){
										for(k=0;k<min(floor(ceil(this.life)/2),100);k++){
											money+=towers[j].damage;
											bursts.push(new burst(this.x,this.y,20,0.8,0));
											bursts[bursts.length-1].value = towers[j].damage;
										}
									}
								}
							}
							this.life = 0;
							this.fade = 0;
						}
					}
				}
				else if(levels[level].paths[this.path][this.position] === "T"){
					if(this.correct){
						this.x = round((this.x-this.snapX)/50)*50+this.snapX;
						this.y = round((this.y-this.snapY)/50)*50+this.snapY;
					}
					this.positionMove+=this.speed;
					if(abs(50-this.positionMove)<this.speed/2){
						this.position++;
						this.positionMove = 0;
					}
					if(levels[level].paths[this.path][this.position-1] === "L"&&levels[level].paths[this.path][this.position+1] === "U"||levels[level].paths[this.path][this.position-1] === "U"&&levels[level].paths[this.path][this.position+1] === "R"||levels[level].paths[this.path][this.position-1] === "R"&&levels[level].paths[this.path][this.position+1] === "D"||levels[level].paths[this.path][this.position-1] === "D"&&levels[level].paths[this.path][this.position+1] === "L"){
						this.direction+=this.speed*18/5;
					}
					else{
						this.direction-=this.speed*18/5;
					}
				}
				else{
					if(levels[level].paths[this.path][this.position] === "L"){
						if(this.correct){
							this.y = round((this.y-this.snapY)/50)*50+this.snapY;
						}
						this.x-=this.speed;
						this.direction = 90;
					}
					else if(levels[level].paths[this.path][this.position] === "R"){
						if(this.correct){
							this.y = round((this.y-this.snapY)/50)*50+this.snapY;
						}
						this.x+=this.speed;
						this.direction = 270;
					}
					else if(levels[level].paths[this.path][this.position] === "U"){
						if(this.correct){
							this.x = round((this.x-this.snapX)/50)*50+this.snapX;
						}
						this.y-=this.speed;
						this.direction = 180;
					}
					else if(levels[level].paths[this.path][this.position] === "D"){
						if(this.correct){
							this.x = round((this.x-this.snapX)/50)*50+this.snapX;
						}
						this.y+=this.speed;
						this.direction = 0;
					}
				}
			}
		}
	}
	if(this.life<=0){
		if(!this.died){
			if(this.name === "Mystery"||this.name === "Mystery Boss"||this.name === "Uber Mystery"||this.name === "Morpher"||this.name === "Reformed Teleporter"||this.name === "Danger"||this.name === "Altered Teleporter"||this.name === "Gluckschmerz"){
				enemies.push(new enemy(this.x,this.y,this.spawns[floor(random(0,this.spawns.length))],this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
				if(this.name === "Uber Mystery"){
					enemies[enemies.length-1].life*=4;
					enemies[enemies.length-1].maxLife*=4;
				}
			}
			else if(this.name === "Chained Boss"||this.name === "Gargantuan Boss"){
				for(j=0;j<5;j++){
					bursts.push(new burst(this.x+random(-20,20),this.y+random(-20,20),17,1,random(0,360)));
				}
			}
			else if(this.name === "Boomer"){
				bursts.push(new burst(this.x,this.y,1,3,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<140){
						towers[j].stun = max(towers[j].stun,180);
					}
				}
			}
			else if(this.name === "Fat"){
				bursts.push(new burst(this.x,this.y,1,2.5,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<120){
						towers[j].stun = max(towers[j].stun,120);
					}
				}
			}
			else if(this.name === "Health Cultist"){
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<125&&enemies[j].life<=100000){
						enemies[j].speed*=1.5;
						enemies[j].standardSpeed*=1.5;
					}
				}
				bursts.push(new burst(this.x,this.y,15,3,0));
			}
			else if(this.name === "Splatter"){
				bursts.push(new burst(this.x,this.y,25,8,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<300){
						towers[j].stun = max(towers[j].stun,240);
					}
				}
			}
			else if(this.name === "Bruh"){
				bursts.push(new burst(this.x,this.y,30,1.5,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<150){
						towers[j].stun = max(towers[j].stun,60);
					}
				}
			}
			else if(this.name === "Sand"){
				enemies.push(new enemy(this.x,this.y,77,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Blighted"){
				enemies.push(new enemy(this.x,this.y,79,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Slimy"){
				bursts.push(new burst(this.x,this.y,36,2.5,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<120){
						towers[j].stun = max(towers[j].stun,120);
					}
				}
				for(j=0;j<2;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*180)*18,this.y+cos(this.randomSpin+j*180)*18,142,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].reward = false;
				}
			}
			else if(this.name === "Goo"){
				bursts.push(new burst(this.x,this.y,36,2,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<100){
						towers[j].stun = max(towers[j].stun,40);
					}
				}
			}
			else if(this.name === "Strong Mummy"){
				this.randomGen = random(0,360/7);
				for(j=0;j<7;j++){
					bursts.push(new burst(this.x,this.y,37,12,this.randomGen+j*360/7));
				}
				for(j in enemies){
					if(dist(this.x,this.y,enemies[j].x,enemies[j].y)<150){
						enemies[j].speed*=1.25;
						enemies[j].standardSpeed*=1.25;
					}
				}
			}
			else if(this.name === "Explosive"){
				bursts.push(new burst(this.x+sin(this.direction)*-28,this.y+cos(this.direction)*28,12,1,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
						towers[j].stun = max(towers[j].stun,150);
					}
				}
			}
			else if(this.name === "Blammer"){
				bursts.push(new burst(this.x+sin(this.direction)*-42,this.y+cos(this.direction)*42,12,1.5,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<190){
						towers[j].stun = max(towers[j].stun,195);
					}
				}
			}
			else if(this.name === "Glue"){
				enemies.push(new enemy(this.x,this.y,this.type+1,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Quick Carrier"){
				for(j=0;j<25;j++){
					enemies.push(new enemy(this.x+random(-25,25),this.y+random(-25,25),1,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].reward = false;
					enemies[enemies.length-1].speed*=random(0.75,1.25);
				}
			}
			else if(this.name === "Blue"||this.name === "Green"||this.name === "Yellow"||this.name === "Pink"||this.name === "Brick"||(this.name === "Rainbow"||this.name === "Ceramic")&&wave>=40){
				enemies.push(new enemy(this.x,this.y,this.type-1,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-5;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].hidden = this.hidden;
				enemies[enemies.length-1].lead = this.lead;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
			}
			else if(this.name === "Static"){
				enemies.push(new enemy(this.x,this.y,156,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-5;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
			}
			else if(this.name === "Mini MOAB"||this.name === "Shielded Mini MOAB"){
				for(j=0;j<3;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*120)*10,this.y+cos(this.randomSpin+j*120)*10,157,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "Rainbow"&&wave<40){
				for(j=0;j<2;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*180)*9,this.y+cos(this.randomSpin+j*180)*9,this.type-1,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].hidden = this.hidden;
					enemies[enemies.length-1].lead = this.lead;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "Ceramic"&&wave<40){
				for(j=0;j<2;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*180)*9,this.y+cos(this.randomSpin+j*180)*9,155,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].hidden = this.hidden;
					enemies[enemies.length-1].lead = this.lead;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "BRC"||this.name === "Shielded BRC"){
				for(j=0;j<6;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*60)*14,this.y+cos(this.randomSpin+j*60)*14,158,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "Mega BRC"){
				for(j=0;j<2;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*180)*16,this.y+cos(this.randomSpin+j*180)*16,this.type-1,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "LPZ"){
				for(j=0;j<5;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*72)*20,this.y+cos(this.randomSpin+j*72)*20,this.type-1,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "Color Splash"){
				for(j=0;j<15;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*24)*20,this.y+cos(this.randomSpin+j*24)*20,150,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
				for(j=0;j<5;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*72)*7,this.y+cos(this.randomSpin+j*72)*7,150,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "Orange"||this.name === "Cyan"||this.name === "Lime"||this.name === "Cream"||this.name === "Purple"){
				for(j=0;j<3;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*120)*8,this.y+cos(this.randomSpin+j*120)*8,this.type-13,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].hidden = this.hidden;
					enemies[enemies.length-1].lead = this.lead;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "Robot"){
				for(j=0;j<2;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*180)*13,this.y+cos(this.randomSpin+j*180)*13,191,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "Lunar Shard"){
				enemies.push(new enemy(this.x,this.y,208,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-5;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Solar Shard"){
				enemies.push(new enemy(this.x,this.y,209,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-5;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Lunar Cluster"){
				this.randomSpin = random(0,72);
				for(j=0;j<5;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*72)*16,this.y+cos(this.randomSpin+j*72)*16,208,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
					enemies[enemies.length-1].reward = false;
				}
			}
			else if(this.name === "Flare"){
				bursts.push(new burst(this.x,this.y,43,125,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<155){
						towers[j].stun = max(towers[j].stun,180);
					}
				}
			}
			else if(this.name === "Lunar Scatter"){
				this.randomSpin = random(0,72);
				for(j=0;j<5;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*72)*16,this.y+cos(this.randomSpin+j*72)*16,209,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
					enemies[enemies.length-1].reward = false;
				}
			}
			else if(this.name === "Carrier Truck"){
				this.randomSpin = random(0,120);
				for(j=0;j<3;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*120)*14,this.y+cos(this.randomSpin+j*120)*14,228,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
					enemies[enemies.length-1].reward = false;
				}
			}
			else if(this.name === "Carrier Tank"){
				this.randomSpin = random(0,60);
				for(j=0;j<6;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*60)*20,this.y+cos(this.randomSpin+j*60)*20,239,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
					enemies[enemies.length-1].reward = false;
				}
			}
			else if(this.name === "Reforged Boss"){
				enemies.push(new enemy(this.x,this.y,249,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Flamer"){
				bursts.push(new burst(this.x,this.y,46,125,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<125){
						towers[j].stun = max(towers[j].stun,135);
					}
				}
				enemies.push(new enemy(this.x,this.y,233,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Vengeful"){
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<140&&enemies[j].life<=100000){
						enemies[j].speed*=2;
						enemies[j].standardSpeed*=2;
					}
				}
				bursts.push(new burst(this.x,this.y,47,3,0));
			}
			else if(this.name === "Unstable Vessel"){
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<145){
						towers[j].stun = max(towers[j].stun,165);
					}
				}
				enemies.push(new enemy(this.x,this.y,239,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
				enemies[enemies.length-1].reward = false;
				bursts.push(new burst(this.x,this.y,48,3,0));
			}
			else if(this.name === "Boomer X"){
				bursts.push(new burst(this.x,this.y,1,3.75,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<175){
						towers[j].stun = max(towers[j].stun,210);
					}
				}
			}
			else if(this.name === "Ravager"){
				for(var k=0;k<6;k++){
					bursts.push(new shot(this.x,this.y,40,this.direction+k*60));
				}
			}
			else if(this.name === "Vengeful X"){
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<170&&enemies[j].life<=100000){
						enemies[j].speed*=2;
						enemies[j].standardSpeed*=2;
					}
				}
				bursts.push(new burst(this.x,this.y,47,3.6,0));
			}
			else if(this.name === "Equinox"){
				enemies.push(new enemy(this.x,this.y,303,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Reactor"){
				bursts.push(new burst(this.x,this.y,49,4.25,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<200){
						towers[j].stun = max(towers[j].stun,240);
					}
				}
			}
			else if(this.name === "Ravager X"){
				for(var k=0;k<9;k++){
					bursts.push(new shot(this.x,this.y,40,this.direction+k*40));
				}
			}
			else if(this.name === "Hellflame Reactor"){
				bursts.push(new burst(this.x,this.y,49,4,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<245){
						towers[j].stun = max(towers[j].stun,300);
					}
				}
			}
			else if(this.name === "CarrierShip"){
				enemies.push(new enemy(this.x,this.y,409,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-5;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
			}
			else if(this.name === "Everything"){
				for(e1=0;e1<enemyTypes.length;e1++){
					if(e1 !== this.type){
						enemies.push(new enemy(this.x,this.y,e1,this.path));
						enemies[enemies.length-1].correct = this.correct;
						enemies[enemies.length-1].snapX = this.snapX;
						enemies[enemies.length-1].snapY = this.snapY;
						enemies[enemies.length-1].position = this.position;
						enemies[enemies.length-1].positionMove = this.positionMove;
						enemies[enemies.length-1].totalDistance = this.totalDistance-50;
						enemies[enemies.length-1].direction = this.direction;
						enemies[enemies.length-1].burn = this.burn;
						enemies[enemies.length-1].stuns = this.stuns;
					}
				}
			}
			else if(this.name === "Alpha"){
				for(k=0;k<4;k++){
					if(k<=1){
						enemies.push(new enemy(this.x-20+(k%2)*40,this.y-20,201,this.path));
					}
					else{
						enemies.push(new enemy(this.x+(k%2)*40,this.y+20,441,this.path));
					}
					enemies[enemies.length-1].correct = this.correct;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
			else if(this.name === "Purified"){
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<200&&enemies[j].life<=100000){
						enemies[j].speed*=2.5;
						enemies[j].standardSpeed*=2.5;
					}
				}
				bursts.push(new burst(this.x,this.y,42,4.25,0));
			}
			else if(this.name === "Conveyor"){
				this.randomSpin = random(0,30);
				for(j=0;j<12;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*30)*20,this.y+cos(this.randomSpin+j*30)*20,235+(j%2)*4,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
					enemies[enemies.length-1].reward = false;
				}
			}
			else if(this.name === "Curtailment"){
				bursts.push(new burst(this.x,this.y,54,4.25,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<200){
						towers[j].stun = max(towers[j].stun,240);
					}
				}
			}
			else if(this.name === "Erupter"){
				this.randomSpin = random(0,90);
				for(j=0;j<4;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*90)*15,this.y+cos(this.randomSpin+j*90)*15,512,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
					enemies[enemies.length-1].reward = false;
				}
			}
			else if(this.name === "Cracked Core"){
				enemies.push(new enemy(this.x,this.y,517,this.path));
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-5;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].burn = this.burn;
				enemies[enemies.length-1].stuns = this.stuns;
			}
			else if(this.name === "Volt"){
				this.randomSpin = random(0,180);
				for(j in enemies){
					if(enemies[j].type !== this.type&&dist(this.x,this.y,enemies[j].x,enemies[j].y)<200&&enemies[j].life<=100000){
						enemies[j].speed*=1.5;
						enemies[j].standardSpeed*=1.5;
					}
				}
				for(j=0;j<2;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*180)*20,this.y+cos(this.randomSpin+j*180)*20,556,this.path));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-50;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].reward = false;
				}
				bursts.push(new burst(this.x,this.y,57,3.75,0));
			}
			else if(this.name === "Unascertained"){
				enemies.push(new enemy(this.x,this.y,27,this.path));
				enemies[enemies.length-1].correct = this.correct;
				enemies[enemies.length-1].snapX = this.snapX;
				enemies[enemies.length-1].snapY = this.snapY;
				enemies[enemies.length-1].position = this.position;
				enemies[enemies.length-1].positionMove = this.positionMove;
				enemies[enemies.length-1].totalDistance = this.totalDistance-50;
				enemies[enemies.length-1].direction = this.direction;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Airborne"){
				this.attack = floor(random(0,towers.length));
				this.target = atan2(towers[this.attack].x-this.x,this.y-towers[this.attack].y);
				bursts.push(new shot(this.x,this.y,65,this.target+180));
				bursts.push(new shot(this.x,this.y,65,this.target+165));
				bursts.push(new shot(this.x,this.y,65,this.target+195));
			}
			else if(this.name === "Prestige"&&this.maxLife>100){
				enemies.push(new enemy(levels[level].startX[this.path%levels[level].paths.length],levels[level].startY[this.path%levels[level].paths.length],this.type,this.path));
				enemies[enemies.length-1].life = this.maxLife/2;
				enemies[enemies.length-1].maxLife = this.maxLife/2;
				enemies[enemies.length-1].reward = false;
			} 
			else if(this.name === "Supertask"){
				enemies.push(new enemy(levels[level].startX[this.path%levels[level].paths.length],levels[level].startY[this.path%levels[level].paths.length],this.type,this.path));
				enemies[enemies.length-1].life = this.maxLife*2;
				enemies[enemies.length-1].maxLife = this.maxLife*2;
				enemies[enemies.length-1].reward = false;
			}
			else if(this.name === "Big Blammer"){
				bursts.push(new burst(this.x+sin(this.direction)*-59,this.y+cos(this.direction)*59,12,2.5,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<250){
						towers[j].stun = max(towers[j].stun,225);
					}
				}
			}
			else if(this.name === "Double Blammer"){
				bursts.push(new burst(this.x+cos(this.direction)*-59,this.y+sin(this.direction)*-59,12,2.5,0));
				bursts.push(new burst(this.x+cos(this.direction)*59,this.y+sin(this.direction)*59,12,2.5,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<300){
						towers[j].stun = max(towers[j].stun,300);
					}
				}
			}
			else if(this.name === "Chronosite"&&this.standardSpeed>0.25){
				enemies.push(new enemy(levels[level].startX[this.path%levels[level].paths.length],levels[level].startY[this.path%levels[level].paths.length],this.type,this.path));
				enemies[enemies.length-1].speed = this.standardSpeed/2;
				enemies[enemies.length-1].standardSpeed = this.standardSpeed/2;
			}
			else if(this.name === "Thermonuclear"){
				bursts.push(new burst(this.x,this.y,16,3,0));
				for(j in towers){
					if(dist(this.x,this.y,towers[j].x,towers[j].y)<275){
						towers[j].stun = max(towers[j].stun,360);
					}
				}
			}
			else if(this.name === "Aleph-Null"){
				for(j in enemies){
					enemies[j].maxLife*=10;
					enemies[j].life*=10;
				}
			}
			if(this.enemyX>0){
				bursts.push(new burst(this.x,this.y,7,this.size,0));
				for(var j in enemies){
					if(dist(enemies[j].x,enemies[j].y,this.x,this.y)<100){
						if((enemies[j].name === "Slow King"||enemies[j].name === "Charge"||enemies[j].name === "Frozen"||enemies[j].name === "Deep Freeze"||enemies[j].name === "Frost King"||enemies[j].name === "Raider"||enemies[j].name === "Energized Raider")&&enemies[j].shield>0&&enemies[j].activated){
							enemies[j].shield-=(100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*8;
						}
						else if(enemies[j].name === "Vindicator"&&enemies[j].shield>0&&enemies[j].activated){
							enemies[j].shield-=max(1,(100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*8-100);
						}
						else if((enemies[j].name === "Gold Guard"||enemies[j].name === "Golden")&&enemies[j].activated){
							enemies[j].life-=((100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*8)*0.05;
						}
						else if(!(enemies[j].name === "Zebra Balloon"&&enemies[j].life>=enemies[j].maxLife/3&&enemies[j].activated)){
							enemies[j].life-=max(min(1,(100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*8),(100-dist(enemies[j].x,enemies[j].y,this.x,this.y))*8-enemies[j].defense);
						}
					}
				}
			}
			if(this.collected){
				totalLife-=this.startLife;
				for(j in waveCollect){
					if(waveCollect[j][0].type === this.type&&waveCollect[j][1]>0){
						waveCollect[j][1]--;
					}
				}
			}
			this.died = true;
		}
		this.fade-=5;
		this.size*=1.01;
		if(this.name === "Glass"){
			this.fade-=10;
			this.size*=1.02;
		}
	}
	if(max(0,ceil(this.life))<this.rememberLife){
		if(this.reward){
			this.multi = 1;
			if(this.moneyBoost){
				this.multi*=4/3;
			}
			if(level === 4||level === 5||level === 6||level === 7){
				if(mode === 8){
					this.multi*=1.2;
				}
				else if(mode === 7){
					if(wave<11){
						this.multi*=1.4;
					}
					else{
						this.multi*=10/21;
					}
				}
				else{
					this.multi*=1.6;
				}
			}
			else if(level !== 0&&level !== 10){
				if(mode === 8){
					this.multi*=1.5;
				}
				else if(mode === 7){
					if(wave<11){
						this.multi*=2;
					}
					else{
						this.multi*=10/21;
					}
				}
				else{
					this.multi*=2.5;
				}
			}
			if(mode === 0){
				if(wave<25){
					this.multi*=2.5;
				}
				else if(wave<30){
					this.multi*=1.5;
				}
				else{
					this.multi*=0.5;
				}
			}
			else if(mode === 1){
				if(wave<35){
					this.multi*=2;
				}
				else if(wave<40){
					this.multi*=1.5;
				}
				else{
					this.multi*=0.5;
				}
			}
			else if(mode === 5){
				this.multi*=1.3;
			}
			else if(mode === 7){
				this.multi*=2.625;
			}
			else if(mode === 13||mode === 16){
				this.multi*=0.75;
				if(wave>20){
					this.multi*=4/5;
				}
				if(wave>30){
					this.multi*=5/6;
				}
				if(wave>50){
					this.multi*=2/3;
				}
			}
			else if(mode === 15){
				if(wave>10){
					this.multi*=0.75;
				}
				if(wave>30){
					this.multi*=2/3;
				}
				if(wave>40){
					this.multi*=4/5;
				}
			}
			else if(mode !== 4&&mode !== 9){
				if(wave<42||mode === 3||mode === 8&&wave<160){
					this.multi*=1.25;
				}
				else if(wave<50||mode === 8&&wave<200){
					this.multi*=0.625;
				}
				else{
					this.multi*=0.15625;
				}
			}
			if(options[0]){
				this.multi*=0.8;
				if(mode === 1||mode === 2){
					this.multi*=0.8;
				}
			}
			if(options[6]){
				this.multi*=0.8;
			}
			if(options[1]){
				this.multi*=0.9;
			}
			if(options[17]){
				this.multi*=1.25;
			}
			if(mode === 17){
				this.multi/=generation.power;
			}
		}
		money+=(this.rememberLife-max(0,ceil(this.life)))*this.multi;
		if(options[10]&&round((this.rememberLife-max(0,ceil(this.life)))*10)/10>0){
			bursts.push(new burst(this.x,this.y,51,this.size*2/3,random(0,360)));
			bursts[bursts.length-1].value = round((this.rememberLife-max(0,ceil(this.life)))*10)/10;
		}
		this.rememberLife = ceil(this.life);
		this.hitTimer = 750;
	}
	this.moneyBoost = false;
}