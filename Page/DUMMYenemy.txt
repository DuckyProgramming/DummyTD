enemy = function(x,y,type,value){
	this.x = x;
	this.y = y;
	this.startX = this.x;
	this.startY = this.y;
	this.type = type;
	if(mode !== 8&&scene !== "enemyinfo"&&value !== -33550336){
		if(level === 0&&this.type === 0&&mode !== 12){
			this.type = 36;
		}
		else if(level === 0&&this.type === 2){
			this.type = 37;
		}
		else if(level === 0&&this.type === 4){
			this.type = 38;
		}
		else if(level === 0&&this.type === 8&&mode !== 4){
			this.type = 39;
		}
		else if(level === 0&&this.type === 10){
			this.type = 40;
		}
		else if(level === 0&&this.type === 15){
			this.type = 41;
		}
		else if(level === 0&&this.type === 19){
			this.type = 42;
		}
		else if(level === 0&&this.type === 24){
			this.type = 43;
		}
		else if(level === 0&&this.type === 26){
			this.type = 44;
		}
		else if(level === 0&&this.type === 27){
			this.type = 45;
		}
		else if(level === 0&&this.type === 29){
			this.type = 46;
		}
		else if(level === 0&&this.type === 35){
			this.type = 47;
		}
	}
	if(options[0]){
		for(k=0;k<replaceEnemy.length;k++){
			if(this.type === replaceEnemy[k][0]){
				this.type = replaceEnemy[k][1];
				break;
			}
		}
	}
	if(options[6]){
		for(k=0;k<replaceEnemy.length;k++){
			if(this.type === replaceEnemy[k][0]){
				this.type = replaceEnemy[k][1];
				break;
			}
		}
	}
	if(options[17]){
		for(k=0;k<replaceEnemyMinus.length;k++){
			if(this.type === replaceEnemyMinus[k][0]){
				this.type = replaceEnemyMinus[k][1];
				break;
			}
		}
	}
	if(options[4]){
		this.type = floor(random(0,enemyTypes.length));
	}
	this.SS = false;
	this.lead = false;
	if(this.type>=170&&this.type<=177){
		this.SS = true;
		this.type-=20;
	}
	else if(this.type>=186&&this.type<=193){
		this.lead = true;
		this.type-=36;
	}
	if(this.type>=178&&this.type<=185){
		this.hidden = true;
		this.type-=28;
	}
	else{
		this.hidden = enemyTypes[this.type].hidden;
	}
	this.value = value;
	this.rate = 0;
	this.time = 0;
	this.collected = false;
	this.name = enemyTypes[this.type].name;
	this.rememberName = this.name;
	this.life = enemyTypes[this.type].life;
	this.startLife = this.life;
	this.speed = enemyTypes[this.type].speed;
	this.size = enemyTypes[this.type].size;
	this.color = enemyTypes[this.type].color;
	this.color2 = enemyTypes[this.type].color2;
	this.ice = enemyTypes[this.type].ice;
	this.defense = enemyTypes[this.type].defense;
	this.rememberIce = this.ice*2;
	this.maxLife = this.life;
	this.rememberLife = this.life;
	this.standardSpeed = this.speed;
	this.moneyBoost = false;
	this.enemyX = 0;
	this.baseSize = this.size;
	this.baseDefense = this.defense;
	this.DOT = 0;
	this.multi = 1;
	this.works = true;
	this.stuns = [0,0,0,0,0,0,0,0];
	this.position = 0;
	this.positionMove = 0;
	this.direction = 0;
	this.reward = true;
	this.fade = 0;
	this.totalDistance = 0;
	this.died = false;
	this.correct = true;
	this.snapX = this.x+1000%50;
	this.snapY = this.y+1000%50;
	this.zaps = 0;
	this.zaps2 = 0;
	this.burn = [0,0];
	this.bombs = [];
	this.collideSize = this.size*15;
	this.collideSize2 = this.size*20;
	this.hitTimer = 750;
	this.shock = 0;
	this.activated = true;
	this.shield = 0;
	this.support = false;
	this.path = this.value%levels[level].paths.length;
	this.maxDamage = 0;
	switch(this.name){
		case "Mystery":
			if(mode === 4){
				this.spawns = [112,113,114,115];
				if(wave>=27){
					this.spawns.push(128);
				}
			}
			else if(mode === 5){
				this.spawns = [67,1,2,3];
			}
			else if(mode === 8){
				this.spawns = [0,1,2,3];
			}
			else{
				this.spawns = [0,1,2,3];
				if(options[0]){
					this.spawns.push(4);
				}
				if(options[6]){
					this.life*=2;
					this.maxLife*=2;
				}
				if(options[17]){
					this.life*=0.5;
					this.maxLife*=0.5;
				}
				if(wave>=21||wave>=19&&mode === 1){
					this.spawns.push(8);
				}
				if(wave>=28||wave>=25&&mode === 1){
					this.spawns.push(11);
				}
				if(wave>=35||wave>=33&&mode === 1){
					this.spawns.push(15);
				}
				if(wave>=39||wave>=36&&mode === 1){
					this.spawns.push(17);
				}
				if(wave>=42){
					this.spawns.push(20);
				}
			}
		break;
		case "Fallen Reaper":
			this.recharge = 0;
			this.handMove = 0;
			if(mode === 3){
				this.life*=0.8;
				this.maxLife*=0.8;
				this.speed*=0.5;
			}
		break;
		case "Mega Speedy": case "Mega Quick":
			this.randomGen = 0;
		break;
		case "Mystery Boss":
			if(mode === 4){
				this.spawns = [10,120,117,123];
				if(wave>=33){
					this.spawns.push(130);
				}
			}
			else{
				if(options[0]){
					this.spawns = [7,9,10,12,13];
				}
				else{
					this.spawns = [4,6,7,9,10,12,13];
				}
				if(options[6]){
					this.life*=2;
					this.maxLife*=2;
				}
				if(options[17]){
					this.life*=0.5;
					this.maxLife*=0.5;
				}
				if(wave>=42&&mode !== 8){
					this.spawns.push(19);
				}
				if(wave>=43&&mode !== 8){
					this.spawns.push(21);
				}
				if(wave>=44&&mode !== 8){
					this.spawns.push(33);
				}
				if(wave>=47&&mode !== 8){
					this.spawns.push(28);
				}
				if(wave>=48&&mode !== 8){
					this.spawns.push(34);
				}
			}
		break;
		case "Glitch": case "Error": case "Glitched Giant": case "Redistributor": case "Inconsistent": case "Irreconcilable": case "Cracked Core": case "Nope": case "Glitched Angel":
			this.colorChances = [[200,0,255],[0,100,200],[0,150,255],[255,150,50],[255,75,255],[50,255,50],[125,255,125],[255,255,100],[180,180,180],[255,100,100]];
			this.colors = [this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))]];
			if(this.name === "Redistributor"){
				this.extraSpin = 0;
				this.extraSpinGoal = 0;
				this.shouldShoot = false;
				this.recharge = 0;
				this.handMove = 0;
			}
			else if(this.name === "Glitched Angel"){
				this.colors = [this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))]];
			}
		break;
		case "Unimaginable":
			this.colorChances = [[255,255,255],[245,245,245],[235,235,235],[225,225,225],[215,215,215],[205,205,205],[195,195,195],[185,185,185],[175,175,175],[165,165]];
			this.colors = [this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))],this.colorChances[floor(random(0,10))]];
		break;
		case "Circuit": case "Bolt": case "Shock": case "Volt King": case "Bolt X": case "Lightning King": case "Nerf": case "Reconvenant": case "Discharge":
			this.shocks = [[random(0,360),random(15,50),255],[random(0,360),random(15,50),204],[random(0,360),random(15,50),153],[random(0,360),random(15,50),102],[random(0,360),random(15,50),51]];
			if(this.name === "Volt King"){
				this.shield = this.life*3/5;
				this.maxShield = this.life*3/5;
			}
			else if(this.name === "Lightning King"){
				this.shield = this.life*2/5;
				this.maxShield = this.life*2/5;
			}
		break;
		case "Lead Balloon": case "Titanium Balloon": case "Steel Balloon":
			this.popped = [false,false,false];
			this.balloonSpots = [[-25,-11],[25,-11],[0,28]];
			this.balloonSpotsGoal = [[-25,-11],[25,-11],[0,28]];
			this.balloonDirection = 0;
			this.extraSpin = random(0,360);
		break;
		case "Templar": case "Ducky": case "HeavyWeapon": case "GiantHeavyWeapon": case "GiantHeavyDeflector": case "GiantHeavyHeal": case "HeavyDeflector": case "ChargeHeavyWeapon": case "Awakened Templar": case "War Machine": case "Field Artillery": case "Hectisce":
			this.extraSpin = 0;
			this.shouldShoot = false;
			this.recharge = 0;
			if(mode<=1&&this.name === "Templar"){
				this.life-=2000;
				this.maxLife-=2000;
			}
		break;
		case "Slow King":
			this.shield = this.life*0.25;
			this.maxShield = this.life*0.25;
			this.shieldFade = 255;
		break;
		case "SCT": case "Adventurist": case "Elite Raybeamer": case "Agent Ducky": case "RocketLauncher": case "SniperRifle": case "GiantRocketLauncher": case "GiantRocketRapid": case "GiantRocketBurst": case "GiantShotgun": case "EnergyRocketLauncher": case "SniperBow": case "SniperInhibitor": case "BuffRocketLauncher": case "MajorBarrage": case "ChiefBlastLauncher": case "ColonelBarrage": case "ChargeGiantRocket": case "GiantDemolitions": case "ChargeGiantBurst": case "Demolitions": case "ScoutBall": case "GiantScoutBall": case "Buff2RocketLauncher": case "Shotgun": case "SirNukesalot": case "ChargeSniperBow": case "GiantBurstDemolitions": case "GiantRocketHeal": case "AdmiralAirstrike": case "ChargeRocketLauncher": case "Awakened SCT": case "PurgeGun": case "Button Man": case "Sharpshooter": case "Broderick": case "Gluckschmerz": case "Normal.gs": case "Quick.gs": case "Hefty.gs": case "Hidden.gs": case "Glass Cannon":
			this.extraSpin = 0;
			this.extraSpinGoal = {x:0,y:0};
			this.shouldShoot = false;
			this.recharge = 0;
			if(this.name === "Elite Raybeamer"){
				this.shield = this.life*4;
				this.maxShield = this.life*4;
				this.shieldFade = 255;
			}
			if(this.name === "PurgeGun"){
				this.shield = this.life*25/9;
				this.maxShield = this.shield;
			}
			else if(this.name === "Broderick"){
				this.shield = this.life*2/3;
				this.maxShield = this.shield;
			}
			else if(this.name === "Gluckschmerz"){
				this.spawns = [602,603,604,605];
			}
		break;
		case "Soul Stealer": case "Gravekeeper": case "Jaxe": case "Expired Jaxe": case "Minion Jaxe": case "Electrolysis": case "Desolator":
			this.handSpin = 0;
			this.handMoveX = -12;
			this.handMoveY = -25;
			if(this.name !== "Gravekeeper"){
				this.extraSpin = 0;
				this.extraSpinGoal = 0;
			}
			else{
				this.spawns = [0,1,3,4,5,8,11,31,67,69,76,85,86,97,98];
			}
			this.shouldShoot = false;
			this.recharge = 0;
		break;
		case "Summoner Boss": case "Necromancer 2": case "Divine Being": case "Demonic Summoner":
			this.handMove = 0;
			if(this.name === "Demonic Summoner"){
				this.shield = this.life/3;
				this.maxShield = this.life/3;
			}
		break;
		case "Fallen Guardian": case "Nuclear Guardian": case "Divine Guardian": case "Awakened Guardian": case "Catharis":
			this.handSpin = 0;
			this.handMove = 0;
			this.recharge = 0;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
			this.shouldShoot = false;
		break;
		case "Unknown": case "Amalgamation": case "Undodgable": case "Stomper": case "Sentinel": case "Custodian": case "Awakened Unknown": case "Rewriter": case "Mobocracy": case "Known": case "Unascertained":
			this.shouldShoot = false;
			this.attackTimer = 0;
		break;
		case "Fallen Soul": case "SpyBot": case "KnightBot": case "ChargeKnightBot": case "BoostRocketLauncher": case "SamuraiBot": case "GiantKnightBot": case "Awakened Soul": case "PurgeDual": case "PurgeStaff":
			this.handMove = 0;
			this.recharge = 0;
			this.armMove = 0;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
			this.shouldShoot = false;
			if(mode === 5){
				this.life*=0.8;
				this.maxLife*=0.8;
				this.rememberLife*=0.8;
			}
			if(this.name === "PurgeDual"||this.name === "PurgeStaff"){
				this.shield = this.life*25/9;
				this.maxShield = this.shield;
			}
		break;
		case "Gold Guard":
			this.handMove = 0;
			this.recharge = 0;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
			this.shouldShoot = false;
		break;
		case "Vindicator": case "Firewall":
			this.handSpin = 0;
			this.handMoveX = -12;
			this.handMoveY = -25;
			this.shield = this.life/10;
			this.maxShield = this.life/10;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
			this.shouldShoot = false;
			this.recharge = 0;
			this.hammerMove = 0;
			this.hammerSpin = 0;
		break;
		case "Molten": case "Acidic":
			this.spin = 0;
			this.distance = 0;
			if(mode === 5){
				this.life*=3/5;
				this.maxLife*=3/5;
			}
		break;
		case "Molten Titan": case "Scorcher":
			this.shouldShoot = false;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.handSpin = 0;
			this.spin = 0;
			this.distance = 0;
			if(level === 0&&this.name == "Molten Titan"){
				this.life*=11/7;
				this.maxLife*=11/7;
			}
		break;
		case "White Balloon":
			this.popped = [false,false,false,false,false,false];
			this.balloonSpots = [[-25,-14],[25,-14],[0,28],[-25,14],[25,14],[0,-28]];
			this.balloonSpotsGoal = [[-25,-14],[25,-14],[0,28],[-25,14],[25,14],[0,-28]];
			this.balloonDirection = 0;
			this.extraSpin = random(0,360);
			if(mode === 5){
				this.life/=4;
				this.maxLife/=4;
				this.rememberLife/=4;
			}
		break;
		case "Zebra Balloon":
			this.popped = [false,false,false,false,false,false];
			this.balloonSpots = [[5,-24],[-5,24]];
			this.balloonSpotsGoal = [[5,-24],[-5,24]];
			this.balloonDirection = 0;
			this.extraSpin = random(0,360);
			if(mode === 5){
				this.life/=3;
				this.maxLife/=3;
				this.rememberLife/=2;
			}
		break;
		case "Void Reaver": case "Nuclear Void Reaver":
			this.shieldFade = 0;
			this.shouldShoot = false;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.handSpin = 0;
			this.armorFade = 255;
			this.spawnTimer = 0;
			this.spawns = [9,10,13,14,15,17,19,20,21,23,27,28,33,34];
			if(this.name === "Nuclear Void Reaver"){
				this.shocks = [[random(0,360),random(15,50),255],[random(0,360),random(15,50),204],[random(0,360),random(15,50),153],[random(0,360),random(15,50),102],[random(0,360),random(15,50),51]];
			}
		break;
		case "Developer":
			this.shieldFade = 0;
			this.shouldShoot = false;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.handSpin = 0;
			this.shieldTimer = 0;
			if(level === 0){
				this.life*=1.5;
				this.maxLife*=1.5;
			}
		break;
		case "Sword Boss":
			this.wantAttack = 0;
			this.gotSword = false;
			this.handMove = -19;
			this.handSpin = 0;
			this.swordSpin = -90;
			this.shouldShoot = false;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
			this.swordFly = 0;
			if(level === 0){
				this.life*=1.5;
				this.maxLife*=1.5;
			}
		break;
		case "Charge":
			if(mode !== 3){
				this.shield = this.life/3;
				this.maxShield = this.life/3;
			}
			else{
				this.shield = 15;
				this.maxShield = 15;
			}
		break;
		case "Frozen":
			this.shield = this.life/5;
			this.maxShield = this.life/5;
		break;
		case "Beast":
			this.shield = this.life/3;
			this.maxShield = this.life/3;
		break;
		case "Deep Freeze":
			this.shield = this.life*2/7;
			this.maxShield = this.life*2/7;
		break;
		case "Frost King":
			this.shield = this.life*2;
			this.maxShield = this.life*2;
			this.shieldFade = 255;
		break;
		case "Melting King":
			this.shield = this.life;
			this.maxShield = this.life;
			this.shieldFade = 255;
		break;
		case "Uber Mystery":
			if(options[0]){
				this.spawns = [9,10,12,13,14,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,34,48,58,59,60,61];
			}
			else{
				this.spawns = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,48,56,57,58,59,60,61];
			}
			if(options[6]){
				this.life*=2;
				this.maxLife*=2;
			}
			if(options[17]){
				this.life*=0.5;
				this.maxLife*=0.5;
			}
		break;
		case "Dodgable":
			this.scare = false;
			if(mode === 6){
				this.life/=4;
				this.maxLife/=4;
				this.rememberLife/=4;
			}
		break;
		case "Precision":
			this.scare = 0;
		break;
		case "Controlled": case "Contradiction": case "Quandary":
			this.shrike = 0;
			this.randomSpin = random(0,360);
		break;
		case "Mummy": case "Strong Mummy":
			this.bandageFade = 255;
			if(this.name === "Strong Mummy"){
				this.randomGen = 0;
			}
		break;
		case "Buried": case "Flanker":
			this.buryTimer = 0;
			this.burying = 1;
		break;
		case "Slimy":
			this.randomSpin = random(0,180);
		break;
		case "Balloon": case "Camo Balloon": case "Regen Balloon": case "Balloon X":
			this.popped = false;
			this.extraSpin = random(0,360);
		break;
		case "Cyber Sentinel":
			this.shieldFade = 255;
		break;
		case "Lord Boss": case "Fallen Tank": case "Fallen Mage": case "Awakened Mage": case "Deadlock": case "Golden Tank": case "Lunar Tank": case "Weak Tank":
			this.handSpin = 0;
			this.recharge = 0;
		break;
		case "Fallen Supplier":
			this.dropped = false;
		break;
		case "Robot":
			this.randomSpin = random(0,180);
			this.target = 0;
			this.lead = true;
		break;
	}
	if(mode === 6){
		switch(this.name){	
			case "Strong":
				this.defense*=0.2;
			break;
			case "Lead Boss":
				this.life*=4/5;
				this.maxLife*=4/5;
				this.rememberLife*=4/5;
			break;
			case "Slow King": case "Speedy King": case "Health Cultist":
				this.life/=2.5;
				this.maxLife/=2.5;
				this.rememberLife/=2.5;
			break;
			case "Glitch": case "Error":
				this.life/=5;
				this.maxLife/=5;
				this.rememberLife/=5;
			break;
			case "Giant Boss":
				this.life/=60;
				this.maxLife/=60;
				this.rememberLife/=60;
				this.defense/=10;
				this.size*=0.9;
			break;
		}
	}
	switch(this.name){
		case "Ruined Boss": case "HeavyWeight": case "LightWeight": case "CaptainPunch":
			this.handMove = 0;
			this.handSpin = 0;
			this.recharge = 300;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
		break;
		case "Raider": case "Energized Raider":
			this.recharge = 300;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
			this.shield = this.life;
			this.maxShield = this.life;
		break;
		case "Glass":
			this.life*=4/3;
			this.maxLife*=4/3;
		break;
		case "Fallen Princess": case "Illumina":
			this.shieldFade = 0;
			this.shouldShoot = false;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.handSpin = 0;
			this.handMoveX = 0;
			this.handMoveY = 0;
			this.shieldTimer = 0;
			this.completeSpin = 0;
			this.pointSpin = 0;
			this.armorFade = 255;
			this.eyeColor = [0,0,0];
			this.eyeColorGoal = [0,0,0];
			this.randomSpin = 0;
			this.completeSpinGoal = 0;
			this.armorFade2 = 0;
			this.armorActivated2 = false;
			this.armorFade3 = 255;
			this.armorFade4 = 0;
		break;
		case "Moss, the Guardian":
			this.handMove = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.dress = 255;
			this.bra = 255;
			this.nudityCensor = 0;
		break;
		case "Rainbow": case "Ceramic": case "Mega BRC":
			if(this.name === "Mega BRC"){
				this.threshold = this.life;
			}
			this.randomSpin = random(0,180);
		break;
		case "Mini MOAB": case "Purple": case "Shielded": case "Orange": case "Cyan": case "Lime": case "Cream": case "Shielded Mini MOAB":
			this.randomSpin = random(0,120);
			if(this.name === "Shielded Mini MOAB"){
				this.shield = 400;
				this.maxShield = 400;
				this.shieldFade = 255;
			}
		break;
		case "BRC": case "Shielded BRC":
			this.randomSpin = random(0,60);
			if(this.name === "Shielded BRC"){
				this.shield = 3000;
				this.maxShield = 3000;
				this.shieldFade = 255;
			}
		break;
		case "LPZ":
			this.shield = this.maxLife/6;
			this.maxShield = this.shield;
			this.randomSpin = random(0,90);
			this.shieldFade = 255;
			this.fired = false;
		break;
		case "Static":
			this.time = random(0,72);
			this.shield = 165;
			this.maxShield = 165;
		break;
		case "Frustrating Balloon":
			this.lead = true;
		break;
		case "Color Splash":
			this.randomSpin = random(0,24);
		break;
		case "Lunar Shield":
			this.shield = this.maxLife;
			this.maxShield = this.maxLife;
		break;
		case "Lunar Servant":
			this.recharge = 0;
			this.handMove = 0;
			this.spawns = [209,211,215,217,218];
		break;
		case "Moon Goddess":
			this.handMove = 0;
			this.armMove = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
			this.dress = 1;
			this.shieldFade = 0;
			this.shieldTimer = 0;
			this.spawns = [209,211,215,217,218];
		break;
		case "Cosmil": case "Tartara":
			this.shield = this.life*4/5;
			this.maxShield = this.life*4/5;
		break;
		case "Returned Mage":
			this.shieldFade = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.clothes = 1;
			this.under = 1;
			this.defeatAnim = 0;
			this.handMove = 0;
			this.handMoveB = 0;
		break;
		case "Cysian Master": case "Boltmaster": case "Umbra":
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.handMove = 0;
		break;
		case "Robotic Overseer": case "Exiled Overseer": case "Galactic Commander": case "Compact Leviathan":
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.extraSpin = 0;
		break;
		case "Kugelblitz X": case "Kugelblitz Large": case "Kugelblitz Overseer":
			this.shield = this.life;
			this.maxShield = this.life;
		break;
		case "Pure Champion": case "Awakened Champion": case "Giant Edge":
			if(this.name === "Pure Champion"){
				this.shield = this.life/2;
				this.maxShield = this.life/2;
			}
			this.attackTimer = 0;
			this.shouldShoot = false;
			this.handMove = [0,0];
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
		break;
		case "True Vanguard": case "Avant Guard": case "The Vanguard": case "Robotic Guard": case "Oppressor":
			if(this.name === "True Vanguard"){
				this.shield = this.life*5/16;
				this.maxShield = this.life*5/16;
			}
			else if(this.name === "Avant Guard"||this.name === "Robotic Guard"){
				this.shield = this.life;
				this.maxShield = this.life;
			}
			else if(this.name === "Oppressor"){
				this.shield = this.life*8/19;
				this.maxShield = this.life*8/19;
			}
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.pointSpin = 0;
			this.attackTimer = 0;
			this.shouldShoot = false;
			this.handMove = 0;
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
			this.shieldFade = 255;
			if(level === 0){
				this.life*=1.5;
				this.maxLife*=1.5;
			}
		break;
		case "Grand Eye of the Seer":
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.shouldShoot = false;
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
			this.spawns = [261,262,241];
		break;
		case "Angerspeed":
			this.shield = this.life/3;
			this.maxShield = this.life/3;
		break;
		case "Lightspeed": case "Ravager": case "Ravager X":
			this.shield = this.life/4;
			this.maxShield = this.life/4;
		break;
		case "Vengeful Champion": case "Saber Champion": case "Hollow Champion":
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.shouldShoot = false;
			this.handMove = [0,0];
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
			if(level === 0){
				this.life*=3/2;
				this.maxLife*=3/2;
			}
		break;
		case "Legionship":
			this.shield = this.life*9/34;
			this.maxShield = this.life*9/34;
		break;
		case "Shielding Boss":
			this.shield = this.life*14/5;
			this.maxShield = this.life*14/5;
			this.shieldFade = 255;
		break;
		case "Dark Priest":
			this.handMove = 0;
			this.recharge = 300;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
			this.shield = this.life*7/12;
			this.maxShield = this.life*7/12;
		break;
		case "Kugelblitz Particle": case "Kugelblitz Microscopic":
			this.shield = this.life/2;
			this.maxShield = this.life/2;
		break;
		case "Hellspeed":
			if(mode === 14){
				this.life*=3/5;
				this.maxLife*=3/5;
				this.preLife*=3/5;
			}
			this.shield = this.life*4/15;
			this.maxShield = this.life*4/15;
		break;
		case "Light King":
			this.shield = this.life*3/4;
			this.maxShield = this.life*3/4;
		break;
		case "Gilded Berserker": case "Juggernaut":
			this.shield = this.life*11/20;
			this.maxShield = this.life*11/20;
			this.attackTimer = 0;
			this.handMove = [0,0];
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
		break;
		case "Hellrisen": case "Starspeed": case "Thanatophobia":
			this.shield = this.life*2/3;
			this.maxShield = this.life*2/3;
		break;
		case "Brilliancy": case "Keres":
			this.handMove = 0;
			this.armMove = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
			this.dress = 1;
			this.shieldFade = 0;
			this.shieldTimer = 0;
			if(this.name === "Keres"){
				this.spawns = [600];
			}
			else{
				this.spawns = [259];
			}
		break;
		case "Vengeful Speed": case "Vengeful Speed X":
			if(mode === 14){
				this.life*=3/5;
				this.maxLife*=3/5;
				this.preLife*=3/5;
			}
			this.shield = this.life*4/9;
			this.maxShield = this.life*4/9;
		break;
		case "Chronos": case "Broken Overlord":
			this.defense = 900;
			this.attackTimer = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.handMove = 0;
			this.spawns = [9,10,13,14,15,17,19,20,21,23,27,28,33,34];
			this.shouldShoot = false;
		break;
		case "Shielder":
			this.shield = this.life*21/5;
			this.maxShield = this.life*21/5;
			this.shieldFade = 255;
		break;
		case "True Ignitus": case "Vengeful Ignitus":
			this.attackTimer = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.handMove = 0;
			this.pointSpin = 0;
			this.shouldShoot = false;
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
		break;
		case "Morpher":
			this.shield = this.life*2/5;
			this.maxShield = this.life*2/5;
			this.spawns = [248,265,262,313,255,315,283,339];
		break;
		case "Bonker": case "UberBot": case "Burster": case "ChargeBonker": case "GiantBurster":
			this.bonkAnim = 0;
			this.bonkTimer = 600;
		break;
		case "Reformed Teleporter":
			this.spawns = [5,11,31,74,96,98,100,105,106,209,230,231,326,330];
		break;
		case "Danger":
			this.spawns = [68,107,130,274,325,416,418];
		break;
		case "Ennealis": case "Octrax":
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
			this.sandals = 1;
			this.dress = 1;
			this.handSpin = 0;
			this.pointSpin = 0;
			this.handMove = 0;
		break;
		case "The Collector":
			this.handMove = 0;
			this.armMove = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
			this.dress = 1;
			this.shieldFade = 0;
			this.shieldTimer = 0;
			this.spawns = [431];
		break;
		case "Eternal Awakened King": case "The Awakened Void":
			this.shouldShoot = false;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.attackTimer = 0;
			this.handSpin = 0;
			this.handMoveX = 0;
			this.handMoveY = 0;
			this.completeSpin = 0;
			this.pointSpin = 0;
			this.completeSpinGoal = 0;
			this.randomSpin = 0;
		break;
		case "Dimension Wanderer":
			this.defense = 450;
			this.attackTimer = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.handMove = 0;
			this.spawns = [9,10,13,14,15,17,19,20,21,23,27,28,33,34];
			this.shouldShoot = false;
			this.shield = this.maxLife*5/4;
			this.maxShield = this.maxLife*5/4;
		break;
		case "Watcher":
			this.attackTimer = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.shouldShoot = false;
			this.handMove = 0;
			this.pointSpin = 0;
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
			this.shield = this.maxLife/5;
			this.maxShield = this.maxLife/5;
		break;
		case "Bulwark": case "Rampart":
			this.shield = this.maxLife*14/5;
			this.maxShield = this.maxLife*14/5;
		break;
		case "Altered Teleporter":
			this.spawns = [7,17,101,128,142,144,211,216,215,235,249,323,397,413,414];
		break;
		case "Tharea the Shattered":
			this.attackTimer = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.shouldShoot = false;
			this.handMove = 0;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
		break;
		case "Councilman":
			this.attackTimer = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.handMove = 0;
			this.shieldFade = 0;
			this.shieldTimer = 0;
		break;
		case "Zenith":
			this.attackTimer = 0;
			this.wantAttack = 0;
			this.usingAttack = 0;
			this.shouldShoot = false;
			this.completeSpin = 0;
			this.completeSpinGoal = 0;
			this.pointSpin = [0,0,0,0,0,0];
			this.pointColor = [[245,85,0],[235,240,245],[30,135,35],[100,45,75],[255,255,245],[210,230,250]];
			this.pointColor2 = [[85,45,30],[255,195,55],[190,255,115],[255,185,255],[255,215,250],[190,210,200]];
			this.pointColor3 = [[70,20,5],[20,25,35],[25,90,35],[55,30,50],[45,50,45],[75,160,170]];
			this.spawns = [452,479,480];
		break;
		case "Antitop":
			this.thresholds = [this.life,this.life,this.life,this.life,this.life];
			this.drops = [this.life/2,this.life/2,this.life/10,this.life/10,this.life/5];
			this.spawns = [201,441,486,498,497];
		break;
		case "Top":
			this.thresholds = [this.life,this.life,this.life,this.life,this.life];
			this.drops = [this.life,this.life,this.life/5,this.life/5,this.life/2];
			this.spawns = [201,441,486,498,497];
		break;
		case "Eschaton":
			this.defense = 720;
			this.attackTimer = 0;
			this.wantAttack = 0;
			this.handMove = 0;
			this.trigger = false;
		break;
		case "Chaotic Machine":
			this.shield = this.life*25/13;
			this.maxShield = this.life*25/13;
			this.shieldFade = 255;
		break;
		case "Mesh":
			this.shapes = [[random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),51],[random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),102],[random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),153],[random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),204],[random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),random(-25,25),255]];
		break;
		case "Incorrect": case "Backwards":
			if(level === 6){
				this.path = 0;
			}
			this.position = levels[level].paths[this.path].length-1;
			this.totalDistance = levels[level].paths[this.path].length*50-50;
			this.x = levels[level].startX2[this.path];
			this.y = levels[level].startY2[this.path];
		break;
		case "Entity-C":
			this.attackTimer = 0;
			this.wantAttack = 0;
			this.handMove = 0;
			this.trigger = false;
			this.armMove = 0;
			this.extraSpin = 0;
			this.extraSpinGoal = 0;
		break;
		case "Omnitude":
			if(value<100){
				this.randomSpin = random(0,72);
				for(j=0;j<5;j++){
					enemies.push(new enemy(this.x+sin(this.randomSpin+j*72)*40,this.y+cos(this.randomSpin+j*72)*40,this.type,this.path+levels[level].paths.length*100));
					enemies[enemies.length-1].correct = false;
					enemies[enemies.length-1].snapX = this.snapX;
					enemies[enemies.length-1].snapY = this.snapY;
					enemies[enemies.length-1].position = this.position;
					enemies[enemies.length-1].positionMove = this.positionMove;
					enemies[enemies.length-1].totalDistance = this.totalDistance-5;
					enemies[enemies.length-1].direction = this.direction;
					enemies[enemies.length-1].burn = this.burn;
					enemies[enemies.length-1].stuns = this.stuns;
				}
			}
		break;
	}
	if(this.SS){
		if(this.name === "Brick"){
			this.shield = 110;
			this.maxShield = 110;
		}
		else if(this.name === "Rainbow"){
			this.shield = 30;
			this.maxShield = 30;
		}
		else if(this.name === "Ceramic"){
			this.shield = 50;
			this.maxShield = 50;
		}
		else{
			this.shield = (this.type-149)*4;
			this.maxShield = this.shield;
		}
	}
	if(options[2]){
		this.life*=1.3;
		this.maxLife*=1.3;
		this.speed*=1.3;
		this.standardSpeed*=1.3;
	}
	if(options[7]){
		this.life*=0.8;
		this.maxLife*=0.8;
		this.speed*=0.8;
		this.standardSpeed*=0.8;
	}
	if(options[11]){
		this.life*=1.75;
		this.maxLife*=1.75;
		this.speed*=1.75;
		this.standardSpeed*=1.75;
	}
	if(options[3]){
		this.hidden = true;
	}
	if(options[13]){
		this.defense*=2;
	}
	if(options[15]){
		this.ice*=2;
		this.size*=0.6;
		this.baseSize*=0.6;
		this.collideSize*=0.6;
		this.collideSize2*=0.6;
		this.life*=0.6;
		this.maxLife*=0.6;
		this.speed*=1.3;
		this.standardSpeed*=1.3;
	}
}
enemy.prototype.draw = function(){
	translate(this.x,this.y);
	rotate(this.direction);
	scale(this.size);
	switch(this.name){
		case "Normal": case "Quick": case "Hefty": case "Hidden": case "Normal Boss": case "Lead Boss": case "Fallen Reaper": case "Chained Boss": case "Shadow Boss": case "Mega Speedy": case "Circuit": case "Slow King": case "Unknown": case "Speedy King": case "Hazardous": case "Abnormal": case "Rusted": case "Frozen": case "Deep Freeze": case "Strong": case "Rusted Boss": case "Frost King": case "Astral": case "Inastralized": case "Soaker": case "Dreadon": case "Sand": case "Blighted": case "Heavy": case "Slow": case "Fortified": case "Angered": case "Second Boss": case "Snow": case "Cyber Sentinel": case "Ninja": case "Supranormal": case "Bolt": case "Heftier": case "Stomper": case "Elite Normal Boss": case "Purplized": case "Grass": case "Rock": case "Shock": case "Rally": case "Bedrock": case "Glue": case "Glob": case "Neutron": case "Depressed": case "Pike": case "Knight": case "Clanker": case "Lunar Dust": case "Lunar Shard": case "Solar Shard": case "Lunar Cluster": case "Mega Clanker": case "Cursed Knight": case "Lunar Scatter": case "Kugelblitz": case "Chief Worker": case "Cuffed": case "Officer": case "Bound Metallic": case "Evoked": case "Commanding Soldier": case "Creation": case "Builder": case "Sprinter M6": case "Chaotic": case "Faded": case "Engineer": case "Gem": case "Reforged Boss": case "Flamer": case "Sentinel": case "Vengeful": case "Unstable Vessel": case "Kugelblitz X": case "Angerspeed": case "Lightspeed": case "Ravager": case "Discord": case "Armored": case "Titanium Boss": case "Gargantuan Boss": case "Glider": case "Mega Quick": case "Vengeful Particle": case "Volt King": case "Angelspeed": case "Apparition": case "Vengeful X": case "Kugelblitz Large": case "Kugelblitz Particle": case "Kugelblitz Overseer": case "Bolt X": case "Grail": case "Crystal Boss": case "Steel Boss": case "Block Minion": case "Shielding Boss": case "Equinox": case "Eclipser": case "Jetpacker": case "Kugelblitz Microscopic": case "Hellspeed": case "Light King": case "Vengeful Speed": case "Ravager X": case "Sprinter M5": case "Arised": case "Frost": case "Metallic": case "Swordsman": case "Slicer": case "Cursed Fire": case "Trooper": case "Worker": case "Passer": case "Shielder": case "Vengeful Speed X": case "Lightning King": case "Morpher": case "Cloned": case "Speedy Cloned": case "Echo": case "Reformed Teleporter": case "Repurposed Construct": case "Uncharted": case "Unholy Uncharted": case "Summonist": case "Cash Man Awakened": case "Repossessed Armor": case "Proton": case "Alpha": case "Purified": case "Warning": case "Starspeed": case "Obstruction": case "Custodian": case "Checkpoint Creator": case "Enlightened": case "Researcher": case "Relic": case "Duelist": case "Altered Teleporter": case "Blessed Slicer": case "Trained Sprinter": case "Thanatophobia": case "Nerf": case "Anomaly": case "Nil": case "Unintended": case "Electron": case "Awakened Unknown": case "Inadvertent": case "Tau": case "Positron": case "Antitop": case "Reconvenant": case "Erupter": case "Emerged": case "Mobocracy": case "Equidistant": case "Concentric": case "Underboss": case "Field Medic": case "Combatant": case "Intruder": case "Padille": case "Wire": case "Sprinter L2": case "Obsidian": case "Windborne": case "Starspray": case "Corroded": case "Corroded Boss": case "Beast": case "Chaotic Machine": case "Limited Annihilator": case "Carbide": case "Carbide Boss": case "Fire Tank": case "Eclipser M4": case "Strong Cloned": case "Weak": case "Fast": case "Hiding": case "Volt": case "Volt Sentinel": case "Weak Boss": case "Slow Boss": case "Hidden Normal Boss": case "Mega Normal": case "Known": case "Melting King": case "Remechanized": case "Ruin": case "Awakening": case "Unascertained": case "Buff": case "Legacy": case "Noob": case "Ambitious": case "Disattached": case "Mesh": case "Airborne": case "1x1x1x1": case "Visionary": case "Lunatisa": case "new enemy()": case "Voidglass": case "Prestige": case "Supertask": case "Guard": case "Wasted": case "Moonfall": case "Perfection": case "Indigentia": case "Recollection": case "Methylenedioxymethamphetamine": case "Calamity Speedy King": case "Incorrect": case "Backwards": case "Colorless": case "Deadlock": case "Solid": case "Obfuscated": case "Turbo": case "Perception": case "Orbital": case "Financial Crisis": case "Stealthy": case "Grand Arised": case "Chronosite": case "Thermonuclear": case "Omnitude": case "Palliatus": case "Reality": case "Top":
			{
				if(this.name === "Unknown"){
					silhouette(-12,-11,60,0.35,this.fade);
					silhouette(2,-15,290,0.25,this.fade);
					silhouette(14,-10,150,0.3,this.fade);
					silhouette(-16,3,330,0.35,this.fade);
					silhouette(15,5,200,0.25,this.fade);
					silhouette(-7,14,10,0.3,this.fade);
					silhouette(6,15,250,0.25,this.fade);
				}
				else if(this.name === "Rusted"||this.name === "Rusted Boss"||this.name === "Corroded"||this.name === "Corroded Boss"){
					stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
					strokeWeight(3);
					line(-6,-6,-12,-12);
					line(-6,-6,-8,-13);
					line(-6,-6,-13,-8);
				}
				else if(this.name === "Lunar Shard"||this.name === "Lunar Scatter"||this.name === "Lunatisa"){
					fill(255,this.fade);
					stroke(255,235,235,this.fade);
					strokeWeight(3);
					beginShape();
					vertex(-7,-24);
					bezierVertex(13,-12,13,12,-7,24);
					bezierVertex(3,12,3,-12,-7,-24);
					bezierVertex(13,-12,13,12,-7,24);
					bezierVertex(3,12,3,-12,-7,-24);
					endShape();
					if(this.name === "Lunar Scatter"){
						silhouette3(-12,-11,60,0.35,this.fade);
						silhouette3(2,-15,290,0.25,this.fade);
						silhouette3(14,-10,150,0.3,this.fade);
						silhouette3(-16,3,330,0.35,this.fade);
						silhouette3(15,5,200,0.25,this.fade);
						silhouette3(-7,14,10,0.3,this.fade);
						silhouette3(6,15,250,0.25,this.fade);
					}
				}
				else if(this.name === "Solar Shard"){
					noFill();
					stroke(255,145,70,this.fade);
					strokeWeight(2);
					ellipse(0,0,32,32);
					for(k=0;k<8;k++){
						line(0,16,0,20);
						rotate(45);
					}
				}
				else if(this.name === "Lunar Cluster"){
					silhouette2(12,11,60,0.35,this.fade);
					silhouette2(-2,15,290,0.25,this.fade);
					silhouette2(-14,10,150,0.3,this.fade);
					silhouette2(16,-3,330,0.35,this.fade);
					silhouette2(-15,-5,200,0.25,this.fade);
					silhouette2(7,-14,10,0.3,this.fade);
					silhouette2(-6,-15,250,0.25,this.fade);
				}
				else if(this.name === "Faded"){
					fill(255,this.fade);
					noStroke();
					for(k=0;k<6;k++){
						rotate(60);
						ellipse(0,-14,7,7);
					}
				}
				else if(this.name === "Gem"){
					fill(235,150,5,this.fade);
					noStroke();
					for(k=0;k<6;k++){
						rotate(60);
						ellipse(0,-14,6,6);
					}
				}
				else if(this.name === "Angerspeed"){
					noStroke();
					fill(255,95,95,this.fade);
					triangle(-5,14,5,14,0,17);
					stroke(255,215,190,this.fade);
					noFill();
					strokeWeight(5);
					arc(0,-20,48,48,0,180);
				}
				else if(this.name === "Vengeful Speed X"){
					noStroke();
					fill(255,55,55,this.fade);
					triangle(-5,14,5,14,0,17);
					stroke(255,195,160,this.fade);
					noFill();
					strokeWeight(5);
					arc(0,-20,48,48,0,180);
				}
				else if(this.name === "Lightspeed"){
					noStroke();
					fill(245,240,255,this.fade);
					triangle(-5,14,5,14,0,17);
					stroke(240,250,255,this.fade);
					noFill();
					strokeWeight(5);
					arc(0,-20,48,48,0,180);
				}
				else if(this.name === "Glider"&&this.life>=this.maxLife*5/6){
					stroke(125,145,175,this.fade*4/5);
					strokeWeight(4);
					noFill();
					arc(-15,-20,16,40,95,160);
					arc(-13,-22,12,36,95,160);
					arc(-11,-24,8,32,95,160);
					arc(15,-20,16,40,20,85);
					arc(13,-22,12,36,20,85);
					arc(11,-24,8,32,20,85);
				}
				else if(this.name === "Angelspeed"){
					noStroke();
					fill(95,115,100,this.fade);
					triangle(-5,14,5,14,0,17);
					stroke(255,255,215,this.fade);
					noFill();
					strokeWeight(5);
					arc(0,-20,48,48,0,180);
				}
				else if(this.name === "Crystal Boss"){
					noStroke();
					fill(255,this.fade);
					triangle(-5,14,5,14,0,17);
				}
				else if(this.name === "Shielding Boss"||this.name === "Shielder"){
					noStroke();
					fill(50,60,80,this.fade);
					rotate(-60);
					for(k=0;k<5;k++){
						triangle(-2,-14,2,-14,0,-19);
						rotate(30);
					}
					rotate(-90);
				}
				else if(this.name === "Jetpacker"&&this.life>=this.maxLife*4/5){
					fill(20,this.fade);
					noStroke();
					rect(-10,-25,20,15,3);
					fill(80,230,180,this.fade);
					quad(0,-22,3,-19,0,-16,-3,-19);
				}
				else if(this.name === "Hellspeed"){
					noStroke();
					fill(255,105,15,this.fade);
					triangle(-5,14,5,14,0,17);
					stroke(255,235,95,this.fade);
					noFill();
					strokeWeight(5);
					arc(0,-20,48,48,0,180);
				}
				else if(this.name === "Light King"){
					noStroke();
					fill(255,this.fade/5);
					rotate(this.time);
					for(k=0;k<12;k++){
						rotate(30);
						arc(0,0,48,48,0,15);
					}
					rotate(-this.time);
				}
				else if(this.name === "Vengeful Speed"){
					noStroke();
					fill(90,80,200,this.fade);
					triangle(-5,14,5,14,0,17);
					stroke(220,185,255,this.fade);
					noFill();
					strokeWeight(5);
					arc(0,-20,48,48,0,180);
				}
				else if(this.name === "Arised"||this.name === "Grand Arised"){
					fill(200,90,80,this.fade);
					noStroke();
					for(k=0;k<6;k++){
						rotate(60);
						ellipse(0,-14,6,6);
					}
				}
				else if(this.name === "Morpher"){
					stroke(10,35,45,this.fade);
					strokeWeight(2);
					line(0,0,-18,-18);
					line(0,0,18,-18);
					stroke(165,255,215,this.fade);
					strokeWeight(4);
					point(-18,-18);
					point(18,-18);
				}
				else if(this.name === "Reformed Teleporter"){
					stroke(15,20,20,this.fade);
					strokeWeight(2);
					line(0,0,-18,-18);
					line(0,0,18,-18);
					stroke(255,165,160,this.fade);
					strokeWeight(4);
					point(-18,-18);
					point(18,-18);
					noStroke();
					fill(255,105,105,this.fade);
					triangle(-5,14,5,14,0,17);
				}
				else if(this.name === "Repurposed Construct"){
					stroke(145,130,125,this.fade);
					strokeWeight(1.5);
					line(0,0,-17,-17);
					line(0,0,17,-17);
				}
				else if(this.name === "Starspeed"){
					noStroke();
					fill(255,255,225,this.fade);
					triangle(-5,14,5,14,0,17);
					stroke(255,255,235,this.fade);
					noFill();
					strokeWeight(5);
					arc(0,-20,48,48,0,180);
				}
				else if(this.name === "Altered Teleporter"){
					stroke(10,25,35,this.fade);
					strokeWeight(2);
					line(0,0,-18,-18);
					line(0,0,18,-18);
					stroke(140,215,255,this.fade);
					strokeWeight(4);
					point(-18,-18);
					point(18,-18);
					noStroke();
					fill(155,240,250,this.fade);
					triangle(-5,14,5,14,0,17);
				}
				else if(this.name === "Thanatophobia"){
					noStroke();
					fill(240,240,245,this.fade);
					triangle(-5,14,5,14,0,17);
					stroke(245,245,250,this.fade);
					noFill();
					strokeWeight(5);
					arc(0,-20,48,48,0,180);
				}
				else if(this.name === "Anomaly"&&this.life>=this.maxLife*5/6){
					stroke(15,230,40,this.fade*4/5);
					strokeWeight(4);
					noFill();
					arc(-15,-20,16,40,95,160);
					arc(-13,-22,12,36,95,160);
					arc(-11,-24,8,32,95,160);
					arc(15,-20,16,40,20,85);
					arc(13,-22,12,36,20,85);
					arc(11,-24,8,32,20,85);
				}
				else if(this.name === "Awakened Unknown"){
					silhouette4(-12,-11,60,0.35,this.fade);
					silhouette4(2,-15,290,0.25,this.fade);
					silhouette4(14,-10,150,0.3,this.fade);
					silhouette4(-16,3,330,0.35,this.fade);
					silhouette4(15,5,200,0.25,this.fade);
					silhouette4(-7,14,10,0.3,this.fade);
					silhouette4(6,15,250,0.25,this.fade);
				}
				else if(this.name === "Equidistant"||this.name === "Concentric"){
					if(this.name === "Concentric"){
						stroke(255,240,255,this.fade);
					}
					else{
						stroke(255,255,240,this.fade);
					}
					strokeWeight(2);
					noFill();
					rotate(this.time*2);
					ellipse(0,-20,10,10);
					ellipse(-20,0,10,10);
					ellipse(0,20,10,10);
					ellipse(20,0,10,10);
					rotate(-this.time*4);
					ellipse(0,-18,6,6);
					ellipse(-18,0,6,6);
					ellipse(0,18,6,6);
					ellipse(18,0,6,6);
					rotate(this.time*2);
				}
				else if(this.name === "Field Medic"){
					fill(125,25,40,this.fade);
					stroke(125,25,40,this.fade);
					strokeWeight(4);
					rotate((sin(this.rate*4))*20);
					arc(-30,0,16 ,12,-90,90);
					rect(-48,-9,18,18,1);
					noStroke();
					fill(255,this.fade);
					rect(-45,-2,12,4);
					rect(-41,-6,4,12);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Unascertained"){
					silhouette5(-12,-11,60,0.35,this.fade);
					silhouette5(2,-15,290,0.25,this.fade);
					silhouette5(14,-10,150,0.3,this.fade);
					silhouette5(-16,3,330,0.35,this.fade);
					silhouette5(15,5,200,0.25,this.fade);
					silhouette5(-7,14,10,0.3,this.fade);
					silhouette5(6,15,250,0.25,this.fade);
				}
				else if(this.name === "Disattached"){
					noStroke();
					fill(30,55,75,this.fade);
					rotate(-60);
					for(k=0;k<5;k++){
						triangle(-2,-14,2,-14,0,-19);
						rotate(30);
					}
					rotate(-90);
				}
				else if(this.name === "Airborne"){
					stroke(255,255,100,this.fade*3/5);
					strokeWeight(4);
					noFill();
					arc(-15,-20,16,40,95,160);
					arc(-13,-22,12,36,95,160);
					arc(-11,-24,8,32,95,160);
					arc(15,-20,16,40,20,85);
					arc(13,-22,12,36,20,85);
					arc(11,-24,8,32,20,85);
				}
				else if(this.name === "Palliatus"){
					noStroke();
					fill(145,55,250,this.fade);
					rotate(-60);
					for(k=0;k<5;k++){
						triangle(-2,-14,2,-14,0,-19);
						rotate(30);
					}
					rotate(-90);
				}
			}
			noStroke();
			{
				if(this.name === "Purplized"||this.name === "Lunar Dust"||this.name === "Lunar Cluster"||this.name === "Starspray"||this.name === "Airborne"||this.name === "Voidglass"){
					if(this.name === "Starpspray"){
						fill(180,195,255,this.fade);
					}
					else if(this.name === "Lunar Dust"||this.name === "Lunar Cluster"){
						fill(30,10,35,this.fade);
					}
					else if(this.name === "Airborne"){
						fill(255,255,100,this.fade);
					}
					else if(this.name === "Voidglass"){
						fill(100,10,240,this.fade);
					}
					else{
						fill(0,200,255,this.fade);
					}	
					ellipse(6,((sin(this.rate*4))*-9),16,16);
					ellipse(-6,((sin(this.rate*4))*9),16,16);
					rotate((sin(this.rate*4))*20);
					ellipse(-18,0,18,18);
					ellipse(18,0,18,18);
					rotate((sin(this.rate*4))*-20);
					ellipse(0,0,32,32);
					if(this.name === "Lunatisa"){
						rect(-7,-16,14,32);
						rect(-16,-7,32,14);
					}
				}
				else if(this.name === "Glue"||this.name === "Glob"){
					fill(255,this.fade/3);
					ellipse(6,((sin(this.rate*4))*-9),16,16);
					ellipse(-6,((sin(this.rate*4))*9),16,16);
					rotate((sin(this.rate*4))*20);
					ellipse(-18,0,18,18);
					ellipse(18,0,18,18);
					rotate((sin(this.rate*4))*-20);
					ellipse(0,0,32,32);
				}
				else if(this.name === "Nil"){
					fill(170,230,235,this.fade);
					rotate(-30);
					for(k=0;k<3;k++){
						triangle(-2,-14,2,-14,0,-19);
						rotate(30);
					}
					fill(250,this.fade);
					triangle(-2,-14,2,-14,0,-19);
					rotate(-120);
					triangle(-2,-14,2,-14,0,-19);
					rotate(60);
				}
				else if(this.name === "Erupter"||this.name === "Emerged"){
					fill(200,this.fade);
					ellipse(6,((sin(this.rate*4))*-9),20+sin(this.rate*6)*6,20+sin(this.rate*6)*6);
					ellipse(-6,((sin(this.rate*4))*9),20+sin(this.rate*6)*6,20+sin(this.rate*6)*6);
					rotate((sin(this.rate*4))*20);
					ellipse(-18,0,22+sin(this.rate*6)*6,22+sin(this.rate*6)*6);
					ellipse(18,0,22+sin(this.rate*6)*6,22+sin(this.rate*6)*6);
					rotate((sin(this.rate*4))*-20);
					ellipse(0,0,36+sin(this.rate*6)*6,36+sin(this.rate*6)*6);
				}
				else if(this.name === "Mobocracy"){
					fill(180,235,255,this.fade);
					triangle(-5,14,5,14,0,17);
				}
				else if(this.name === "Chaotic Machine"){
					fill(65,255,255,this.fade);
					quad(-14,-14,3,-3,14,14,-3,3);
					quad(-14,14,-3,-3,14,-14,3,3);
				}
				else if(this.name === "Eclipser M4"){
					fill(255,this.fade);
					quad(-14,-14,4,-4,14,14,-4,4);
					quad(-14,14,-4,-4,14,-14,4,4);
				}
				else if(this.name === "Chaotic Machine"){
					fill(110,10,255,this.fade);
					quad(-14,-14,5,-5,14,14,-5,5);
					quad(-14,14,-5,-5,14,-14,5,5);
				}
				else if(this.name === "Mesh"){
					for(k=0;k<this.shapes.length;k++){
						fill(180,190,200,this.fade*this.shapes[k][6]/255);
						triangle(this.shapes[k][0],this.shapes[k][1],this.shapes[k][2],this.shapes[k][3],this.shapes[k][4],this.shapes[k][5]);
					}
				}
				else if(this.name === "1x1x1x1"){
					fill(5,50,10,this.fade);
					triangle(-6,0,0,-6,-18,-18);
					triangle(6,0,0,-6,18,-18);
				}
				else if(this.name === "Deadlock"){
					fill(10,55,145,this.fade);
					rotate(-30);
					for(k=0;k<3;k++){
						triangle(-2,-14,2,-14,0,-19);
						rotate(30);
					}
					fill(115,185,245,this.fade);
					triangle(-2,-14,2,-14,0,-19);
					rotate(-120);
					triangle(-2,-14,2,-14,0,-19);
					rotate(60);
				}
				else if(this.name === "Stealthy"){
					fill(this.color[0],this.color[1],this.color[2],this.fade/2);
					quad(-18,-18,6,-6,18,18,-6,6);
					quad(-6,-6,18,-18,6,6,-18,18);
				}
				else if(this.name === "Thermonuclear"){
					fill(30,this.fade);
					for(k=0;k<3;k++){
						rotate(120);
						triangle(-4,0,4,0,0,-25);
					}
				}
			}
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			{
				if(this.name === "Lead Boss"&&this.life>this.maxLife/2){
					fill(50,this.fade*(this.life-this.maxLife/2)/this.maxLife*2);
					ellipse(6,((sin(this.rate*4))*-9),15,15);
					ellipse(-6,((sin(this.rate*4))*9),15,15);
				}
				else if(this.name === "Titanium Boss"&&this.life>this.maxLife/2){
					fill(70,120,80,this.fade*(this.life-this.maxLife/2)/this.maxLife*2);
					ellipse(6,((sin(this.rate*4))*-9),15,15);
					ellipse(-6,((sin(this.rate*4))*9),15,15);
				}
				else if(this.name === "Steel Boss"&&this.life>this.maxLife/2){
					fill(170,this.fade*(this.life-this.maxLife/2)/this.maxLife*2);
					ellipse(6,((sin(this.rate*4))*-9),15,15);
					ellipse(-6,((sin(this.rate*4))*9),15,15);
				}
				else if(this.name === "Chained Boss"){
					fill(150,60,15,this.fade);
					triangle(9,0,0,9,9,15);
				}
				else if(this.name === "Shadow Boss"||this.name === "Hidden Normal Boss"){
					stroke(this.color[0],this.color[1],this.color[2],this.fade);
					strokeWeight(3);
					rotate(-18);
					for(var j=0;j<4;j++){
						line(sin(this.time*8+j*25)*2,-14-j*2,sin(this.time*8+(j-1)*25)*2,-14-j*2+2);
					}
					rotate(36);
					for(j=0;j<4;j++){
						line(sin(this.time*8+j*25+70)*-2,-14-j*2,sin(this.time*8+(j-1)*25+70)*-2,-14-j*2+2);
					}
					rotate(-18);
					noStroke();
				}
				else if(this.name === "Slow King"||this.name === "Speedy King"||this.name === "Frost King"||this.name === "Gargantuan Boss"||this.name === "Melting King"||this.name === "Calamity Speedy King"||this.name === "Omnitude"){
					triangle(-9,0,9,0,0,-25);
					triangle(-9,1,9,-1,-7,-24);
					triangle(9,1,-9,-1,7,-24);
					triangle(-9,2,9,-2,-13,-22);
					triangle(9,2,-9,-2,13,-22);
				}
				else if(this.name === "Strong"||this.name === "Buff"){
					fill(50,this.fade);
					noStroke();
					rect(-1,-2+((sin(this.rate*4))*-9),14,4,1);
				}
				else if(this.name === "Astral"||this.name === "Inastralized"||this.name === "Soaker"||this.name === "Blessed Slicer"){
					fill(this.color[0],this.color[1],this.color[2],this.fade/5);
					for(var j=0;j<4;j++){
						ellipse(0,0,32+j*2,32+j*2);
					}
					rotate((sin(this.rate*4))*20);
					for(j=0;j<4;j++){
						ellipse(-18,0,18+j*2,18+j*2);
						ellipse(18,0,18+j*2,18+j*2);
					}
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Ninja"){
					fill(150,75,0,this.fade);
					rect(8,-19,3,7);
					rect(11,-17,3,3);
					fill(200,this.fade);
					triangle(8,-17,8,-13,-16,-15);
				}
				else if(this.name === "Combatant"){
					fill(90,this.fade);
					rect(8,-19,3,7);
					rect(11,-17,3,3);
					fill(150,this.fade);
					triangle(8,-17,8,-13,-16,-15);
				}
				else if(this.name === "Stomper"){
					fill(150,60,15,this.fade);
					ellipse(-6,((sin(this.rate*4))*9),18,18);
				}
				else if(this.name === "Rally"){
					rotate((sin(this.rate*4))*20);
					stroke(120,60,0,this.fade);
					strokeWeight(2);
					line(-22,0,-22,28);
					fill(255,0,0,this.fade);
					noStroke();
					rect(-21,15,14,10);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Knight"||this.name === "Cursed Knight"){
					fill(70,70,70,this.fade);
					rotate((sin(this.rate*4))*20);
					rect(-20,2,4,16,2);
					rect(-22,16,8,8);
					rotate((sin(this.rate*4))*-20);
					rect(-10,24,20,6,2);
				}
				else if(this.name === "Bound Metallic"||this.name === "Reforged Boss"||this.name === "Metallic"){
					fill(30,this.fade);
					noStroke();
					triangle(-5,-10,5,-10,0,-18);
					triangle(-5,-10,5,-10,-6,-16);
					triangle(-5,-10,5,-10,6,-16);
				}
				else if(this.name === "Commanding Soldier"){
					rotate((sin(this.rate*4))*20);
					stroke(255,225,225,this.fade);
					strokeWeight(3);
					line(-18,0,-18,24);
					line(18,0,18,24);
					noStroke();
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Builder"||this.name === "Engineer"){
					rotate((sin(this.rate*4))*20);
					stroke(160,this.fade);
					strokeWeight(4);
					fill(160,this.fade);
					rect(13,12,10,6);
					line(18,12,18,0);
					rotate((sin(this.rate*4))*-20);
					noStroke();
					if(this.name === "Builder"){
						fill(30,this.fade);
						triangle(0,15,-4,16,-7,10);
						triangle(0,15,4,16,7,10);
					}
				}
				else if(this.name === "Sentinel"){
					fill(110,35,245,this.fade);
					triangle(0,15,-4,16,-7,10);
					triangle(0,15,4,16,7,10);
				}
				else if(this.name === "Vengeful"||this.name === "Vengeful Particle"||this.name === "Vengeful X"){
					rotate((sin(this.rate*4))*20);
					stroke(60,145,255,this.fade);
					strokeWeight(3);
					line(-18,0,-18,30);
					noStroke();
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Unstable Vessel"){
					triangle(-18,-18,-11,-7,-7,-11);
					triangle(18,-18,11,-7,7,-11);
				}
				else if(this.name === "Ravager"||this.name === "Ravager X"){
					fill(10,15,30,this.fade);
					triangle(-9,0,9,0,0,-25);
					triangle(-9,1,9,-1,-7,-24);
					triangle(9,1,-9,-1,7,-24);
					triangle(-9,2,9,-2,-13,-22);
					triangle(9,2,-9,-2,13,-22);
					fill(135,245,250,this.fade);
					noStroke();
					for(k=0;k<9;k++){
						rotate(40);
						triangle(-3,-14,3,-14,0,-24);
					}
				}
				else if(this.name === "Volt King"){
					fill(50,85,165,this.fade);
					quad(-10,0,10,0,13,-19,-13,-19);
					fill(90,115,180,this.fade);
					quad(-8,0,8,0,11,-17,-11,-17);
				}
				else if(this.name === "Grail"){
					stroke(25,this.fade);
					fill(25,this.fade);
					strokeWeight(2);
					rotate((sin(this.rate*4))*20);
					arc(-28,0,20,24,-90,90);
					rect(-48,-16,20,32,2);
					rotate((sin(this.rate*4))*-20);
					noStroke();
				}
				else if(this.name === "Block Minion"){
					fill(this.color[0]-20,this.color[1]-20,this.color[2]-20,this.fade);
					rect(-5,-17,10,6);
					rect(-17,-5,6,10);
					rect(-5,11,10,6);
					rect(11,-5,6,10);
				}
				else if(this.name === "Light King"){
					fill(225,220,165,this.fade);
					quad(-10,0,10,0,13,-19,-13,-19);
					fill(180,180,120,this.fade);
					quad(-8,0,8,0,11,-17,-11,-17);
				}
				else if(this.name === "Frost"){
					fill(95,155,205,this.fade);
					rect(-5,-17,10,6);
					rect(-17,-5,6,10);
					rect(-5,11,10,6);
					rect(11,-5,6,10);
				}
				else if(this.name === "Swordsman"){
					rotate((sin(this.rate*4))*20);
					stroke(155,165,185,this.fade);
					strokeWeight(3);
					line(-18,0,-18,24);
					noStroke();
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Lightning King"){
					fill(190,200,225,this.fade);
					quad(-10,0,10,0,13,-19,-13,-19);
					fill(175,200,235,this.fade);
					quad(-8,0,8,0,11,-17,-11,-17);
				}
				else if(this.name === "Summonist"){
					rotate((sin(this.rate*4))*20);
					stroke(10,20,45,this.fade);
					strokeWeight(2);
					line(-18,0,-18,30);
					line(-22,24,-14,24);
					line(-22,24,-22,30);
					line(-14,24,-14,30);
					noStroke();
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Cash Man Awakened"){
					fill(255,105,105,this.fade);
					triangle(0,15,-4,16,-7,10);
					triangle(0,15,4,16,7,10);
				}
				else if(this.name === "Purified"){
					rotate((sin(this.rate*4))*20);
					stroke(210,215,220,this.fade);
					strokeWeight(3);
					line(-18,0,-18,30);
					noStroke();
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Custodian"){
					fill(85,20,90,this.fade);
					triangle(0,15,-4,16,-7,10);
					triangle(0,15,4,16,7,10);
				}
				else if(this.name === "Checkpoint Creator"){
					rotate((sin(this.rate*4))*20);
					stroke(5,15,25,this.fade);
					strokeWeight(4);
					fill(5,15,25,this.fade);
					rect(10,12,16,10);
					line(18,12,18,0);
					noStroke();
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Duelist"){
					rotate((sin(this.rate*4))*20);
					stroke(20,25,25,this.fade);
					strokeWeight(3);
					line(-18,-24,-18,24);
					noStroke();
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Blessed Ninja"){
					rotate((sin(this.rate*4))*20);
					stroke(250,250,255,this.fade);
					strokeWeight(3);
					line(-18,0,-18,24);
					noStroke();
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Thanatophobia"){
					fill(30,65,95,this.fade);
					quad(-10,0,10,0,13,-19,-13,-19);
					fill(25,40,60,this.fade);
					quad(-8,0,8,0,11,-17,-11,-17);
				}
				else if(this.name === "Mobocracy"){
					fill(10,25,45,this.fade);
					quad(-10,0,10,0,13,-19,-13,-19);
					fill(20,35,55,this.fade);
					quad(-8,0,8,0,11,-17,-11,-17);
				}
				else if(this.name === "Limited Annihilator"){
					fill(235,250,255,this.fade);
					rotate((sin(this.rate*4))*20);
					triangle(-24,-3,-24,3,-30,0);
					triangle(24,-3,24,3,30,0);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Remechanized"){
					rotate((sin(this.rate*4))*20);
					stroke(100,200,240,this.fade);
					strokeWeight(3);
					line(-18,-24,-18,24);
					noStroke();
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Guard"){
					rotate(12);
					for(k=0;k<5;k++){
						rotate(72);
						rect(-2,-20,4,20);
					}
					rotate(-12);
				}
				else if(this.name === "Colorless"){
					rotate((sin(this.rate*4))*20);
					stroke(165,215,225,this.fade);
					strokeWeight(2);
					line(-18,0,-18,24);
					noStroke();
					rotate((sin(this.rate*4))*-20);
					fill(255,this.fade);
					rect(-12,-12,24,24);
				}
				else if(this.name === "Combatant"){
					fill(70,35,135,this.fade);
					rect(18,-7,1,16);
					rect(-19,-7,1,16);
				}
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			if(this.name === "Knight"||this.name === "Cursed Knight"){
				ellipse(0,18,16,16);
			}
			else if(this.name === "Lunatisa"){
				rotate(45);
				rect(-8,-16,16,32);
				rect(-16,-8,32,16);
				rotate(-45);
			}
			if(this.name !== "Fallen Reaper"){
				rotate((sin(this.rate*4))*20);
				if(this.name === "Fire Tank"){
					ellipse(-21,0,22,22);
					ellipse(21,0,22,22);
				}
				else if(this.name === "Deadlock"){
					ellipse(-18,0,16,16);
					rotate(this.handSpin);
					ellipse(18,0,16,16);
					rotate(-this.handSpin);
				}
				else{
					ellipse(-18,0,16,16);
					if(this.name === "Beast"){
						arc(18,0,16,16,30,330);
					}
					else if(this.name !== "Knight"&&this.name !== "Cursed Knight"){
						ellipse(18,0,16,16);
					}
				}
				if(this.name === "Slow King"||this.name === "Speedy King"||this.name === "Frost King"||this.name === "Melting King"||this.name === "Calamity Speedy King"||this.name === "Obfuscated"){
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					rect(-20,-8,4,16,2);
					rect(16,-8,4,16,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Inastralized"){
					fill(200,this.fade);
					arc(-17,0,18,18,-90,90);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Dreadon"){
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					arc(-21,0,24,17,-90,90);
					arc(21,0,24,17,90,270);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Angered"){
					fill(120,40,40,this.fade);
					quad(-21,-7,-21,7,-24,6,-24,-6);
					quad(21,-7,21,7,24,6,24,-6);
					triangle(0,-8,0,8,-20,0);
					triangle(0,-8,0,8,-19,-5);
					triangle(0,-8,0,8,-19,5);
					triangle(0,-8,0,8,-17,-9);
					triangle(0,-8,0,8,-17,9);
					triangle(0,-8,0,8,20,0);
					triangle(0,-8,0,8,19,-5);
					triangle(0,-8,0,8,19,5);
					triangle(0,-8,0,8,17,-9);
					triangle(0,-8,0,8,17,9);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Elite Normal Boss"||this.name === "Unstable Vessel"||this.name === "Omnitude"){
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					rect(-20,-8,3,16);
					rect(17,-8,3,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Lunar Shard"||this.name === "Solar Shard"||this.name === "Lunar Scatter"||this.name === "Lunatisa"){
					fill(255,90,255,this.fade);
					rect(-20,-8,4,16,2);
					rect(16,-8,4,16,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Cuffed"){
					fill(200,this.fade);
					rect(-21,-8,2,16,2);
					rect(15,-8,2,16,2);
					rect(-17,-8,2,16,2);
					rect(19,-8,2,16,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Evoked"){
					fill(200,255,200,this.fade);
					rect(-21,-8,6,16,2);
					rect(15,-8,6,16,2);
					fill(150,255,150,this.fade/5);
					for(k=0;k<12;k++){
						arc(0,0,45,45,k*30+this.countingTime,k*30+15+this.countingTime);
					}
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Commanding Soldier"){
					fill(20,15,25,this.fade);
					rect(-19,-9,2,18,2);
					rect(17,-9,2,18,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Reforged Boss"){
					fill(this.color2[0]+10,this.color2[1]+10,this.color2[2]+10,this.fade);
					arc(-18,0,18,18,-90,90);
					arc(18,0,18,18,-270,-90);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Flamer"){
					fill(40,50,60,this.fade);
					rect(-19,-9,2,18,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Sentinel"){
					fill(195,145,255,this.fade);
					rect(-19,-8,1,16,2);
					rect(18,-8,1,16,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Angerspeed"){
					fill(250,50,40,this.fade);
					ellipse(-18,-5,4,4);
					ellipse(-18,0,4,4);
					ellipse(-18,5,4,4);
					ellipse(18,-5,4,4);
					ellipse(18,0,4,4);
					ellipse(18,5,4,4);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Vengeful Speed X"){
					fill(220,40,30,this.fade);
					ellipse(-18,-5,4,4);
					ellipse(-18,0,5,5);
					ellipse(-18,5,4,4);
					ellipse(18,-5,4,4);
					ellipse(18,0,5,5);
					ellipse(18,5,4,4);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Lightspeed"){
					fill(240,225,255,this.fade);
					ellipse(-18,-3,4,4);
					ellipse(-18,3,4,4);
					ellipse(18,-3,4,4);
					ellipse(18,3,4,4);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Ravager"||this.name === "Ravager X"){
					fill(10,25,50,this.fade);
					rect(-21,-8,2,16,2);
					rect(19,-8,2,16,2);
					rect(-17,-8,2,16,2);
					rect(15,-8,2,16,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Gargantuan Boss"){
					fill(60,this.fade);
					rect(-22,-8,4,16,2);
					rect(18,-8,4,16,2);
					arc(0,0,33,33,-45,45);
					arc(0,0,33,33,135,225);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Angelspeed"){
					fill(255,255,185,this.fade);
					ellipse(-18,0,4,4);
					ellipse(18,0,4,4);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Apparition"){
					fill(255,this.fade);
					triangle(-14,-4,-14,4,-20,0);
					triangle(14,-4,14,4,20,0);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Grail"){
					fill(80,95,105,this.fade);
				}
				else if(this.name === "Shielding Boss"||this.name === "Shielder"){
					fill(255,this.fade);
					rect(-19,-9,2,18,2);
					rect(17,-9,2,18,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Equinox"||this.name === "Eclipser"){
					fill(255,this.fade);
				}
				else if(this.name === "Hellspeed"){
					fill(245,85,5,this.fade);
					ellipse(-18,0,4,4);
					ellipse(18,0,4,4);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Vengeful Speed"){
					fill(180,170,240,this.fade);
					ellipse(-18,-5,3,3);
					ellipse(-18,0,5,5);
					ellipse(-18,5,3,3);
					ellipse(18,-5,3,3);
					ellipse(18,0,5,5);
					ellipse(18,5,3,3);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Sprinter M5"||this.name === "Cursed Fire"){
					fill(10,this.fade);
					rect(-19,-8,2,16);
					rect(17,-8,2,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Morpher"){
					fill(155,255,200,this.fade);
					rect(-21,-8,2,16,2);
					rect(19,-8,2,16,2);
					rect(-17,-8,2,16,2);
					rect(15,-8,2,16,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Repurposed Construct"){
					fill(110,this.fade);
					rect(-20,-8,4,16);
					rect(16,-8,4,16);
					fill(30,this.fade);
					rect(-19,-8,2,16);
					rect(17,-8,2,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Unholy Uncharted"){
					fill(160,20,250,this.fade);
					rect(-19,-8,2,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Warning"){
					fill(15,5,5,this.fade);
					rect(-22,-8,4,16,2);
					rect(18,-8,4,16,2);
					arc(0,0,33,33,-45,45);
					arc(0,0,33,33,135,225);
					fill(250,220,220,this.fade);
					rect(-21,-8,2,16);
					rect(19,-8,2,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Starspeed"){
					fill(10,10,10,this.fade);
					ellipse(-18,0,4,4);
					ellipse(18,0,4,4);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Checkpoint Creator"){
					fill(0,5,10,this.fade);
					rect(-21,-8,2,16,2);
					rect(19,-8,2,16,2);
					fill(80,90,110,this.fade);
					arc(0,0,33,33,-45,45);
					arc(0,0,33,33,135,225);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Enlightened"){
					fill(175,180,130,this.fade);
					rect(-19,-9,2,18,2);
					rect(17,-9,2,18,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Thanatophobia"){
					fill(80,90,110,this.fade);
					rect(-19,-8,2,16);
					rect(17,-8,2,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Mobocracy"){
					fill(5,10,15,this.fade);
					rect(-21,-8,5,16);
					rect(16,-8,5,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Combatant"){
					fill(70,this.fade);
					rect(-20,-8,4,16);
					rect(16,-8,4,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Intruder"){
					fill(this.color2[0],this.color2[1],this.color[2],this.fade);
					triangle(-13,-6,-13,6,-18,0);
					triangle(13,-6,13,6,18,0);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Padille"){
					fill(135,140,150,this.fade);
					rect(-21,-8,1,16);
					rect(-19,-8,1,16);
					rect(-17,-8,1,16);
					rect(16,-8,1,16);
					rect(18,-8,1,16);
					rect(20,-8,1,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Chaotic Machine"){
					fill(10,255,255,this.fade);
					rect(-23,-5,10,10);
					rect(13,-5,10,10);
					fill(10,100,115,this.fade);
					rect(-21,-3,6,6);
					rect(15,-3,6,6);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Strong"||this.name === "Buff"){
					fill(50,this.fade);
					rect(-20,-8,4,16,1);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Strong Cloned"){
					fill(70,this.fade);
					rect(-19.5,-8,3,16,1);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Volt"){
					fill(30,30,130,this.fade);
					rect(-21,-8,6,16);
					rect(15,-8,6,16);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Volt Sentinel"){
					fill(125,40,255,this.fade);
					ellipse(-18,0,3,3);
					ellipse(18,0,3,3);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Visionary"){
					fill(35,30,40,this.fade)
					rect(-18,-8,4,16);
					fill(130,50,10,this.fade)
					rect(-17,-8,2,16);
					rotate((sin(this.rate*4))*-20);
					fill(25,30,40,this.fade);
					triangle(-13,-8,-13,8,-20,0);
					triangle(13,-8,13,8,20,0);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
					rotate((sin(this.rate*4))*20);
				}
				else if(this.name === "Solid"){
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					quad(-21,-8,-21,8,-23,7,-23,-7);
					quad(21,-8,21,8,23,7,23,-7);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Turbo"){
					rotate((sin(this.rate*4))*-20);
					fill(10,235,235,this.fade);
					triangle(-10,-5,-5,-10,-15,-15);
					triangle(10,-5,5,-10,15,-15);
					fill(105,100,145,this.fade);
					arc(0,0,32,32,-135,-45);
					rotate((sin(this.rate*4))*20);
					arc(-18,0,18,18,-90,90);
					arc(18,0,18,18,-270,-90);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				else if(this.name === "Perception"){
					fill(200,160,200,this.fade)
					rect(-18,-8,4,16);
					fill(160,120,160,this.fade)
					rect(-17,-8,2,16);
					rotate((sin(this.rate*4))*-20);
					fill(240,200,240,this.fade);
					triangle(-13,-8,-13,8,-20,0);
					triangle(13,-8,13,8,20,0);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
					rotate((sin(this.rate*4))*20);
				}
				else if(this.name === "Financial Crisis"){
					ellipse(0,-18,16,16);
					ellipse(0,18,16,16);
					fill(235,225,155,this.fade);
				}
				else if(this.name === "Grand Arised"){
					fill(60,45,30,this.fade);
					rect(-20,-8,4,16,1);
					rect(16,-8,4,16,1);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				rotate((sin(this.rate*4))*-20);
			}
			ellipse(0,0,30,30);
			{
				if((this.name === "Lead Boss"||this.name === "Titanium Boss"||this.name === "Steel Boss")&&this.life>this.maxLife/2){
					noStroke();
					if(this.name === "Titanium Boss"){
						fill(70,120,80,this.fade*(this.life-this.maxLife/2)/this.maxLife*2);
					}
					else if(this.name === "Steel Boss"){
						fill(170,this.fade*(this.life-this.maxLife/2)/this.maxLife*2);
					}
					else{
						fill(50,this.fade*(this.life-this.maxLife/2)/this.maxLife*2);
					}
					ellipse(0,0,31,31);
					rotate((sin(this.rate*4))*20);
					ellipse(-18,0,17,17);
					ellipse(18,0,17,17);
					rotate((sin(this.rate*4))*-20);
					if(this.name === "Titanium Boss"){
						fill(50,100,60,this.fade*(this.life-this.maxLife/2)/this.maxLife*2);
					}
					else if(this.name === "Steel Boss"){
						fill(130,this.fade*(this.life-this.maxLife/2)/this.maxLife*2);
					}
					else{
						fill(30,this.fade*(this.life-this.maxLife/2)/this.maxLife*2);
					}
					rotate(45);
					ellipse(0,0,8,2.5);
					ellipse(-7,0,2.5,8);
					ellipse(7,0,2.5,8);
					ellipse(0,7,2.5,8);
					ellipse(0,-7,2.5,8);
					ellipse(-7,-7,8,2.5);
					ellipse(7,-7,8,2.5);
					ellipse(-7,7,8,2.5);
					ellipse(7,7,8,2.5);
					arc(14,0,8,2.5,90,270);
					arc(-14,0,8,2.5,-90,90);
					ellipse(0,14,8,2.5);
					ellipse(0,-14,8,2.5);
					rotate((sin(this.rate*4))*20);
					ellipse(-13,13,8,2.5);
					ellipse(13,-13,8,2.5);
					ellipse(-6,13,2.5,8);
					ellipse(-20,13,2.5,8);
					ellipse(6,-13,2.5,8);
					ellipse(20,-13,2.5,8);
					arc(-13,6,2.5,8,0,180);
					arc(-13,20,2.5,8,-180,0);
					arc(13,-6,2.5,8,-180,0);
					arc(13,-20,2.5,8,0,180);
					rotate((sin(this.rate*4))*-20);
					rotate(-45);
				}
				else if(this.name === "Mega Speedy"||this.name === "Mega Quick"||this.name === "Mega Normal"){
					fill(50,this.fade);
					noStroke();
					rotate((sin(this.rate*4))*20);
					quad(-16,-7.5,-16,7.5,-19,8,-19,-8);
					quad(16,-7.5,16,7.5,19,8,19,-8);
					rotate((sin(this.rate*4))*-20);
					if(this.name === "Mega Normal"){
						fill(70,155,215,this.fade);
					}
					else{
						fill(70,155,215,this.fade);
					}
					triangle(0,-12,-4,1,1,3);
					triangle(0,12,4,-3,-1,-3);
				}
				else if(this.name === "Slow King"||this.name === "Speedy King"||this.name === "Frost King"||this.name === "Melting King"||this.name === "Calamity Speedy King"||this.name === "Thermonuclear"){
					fill(this.color[0],this.color[1],this.color[2],this.fade);
					ellipse(-8,-12,9,9);
					ellipse(-3,-13,7,7);
					ellipse(-11,-9,6,6);
				}
				else if(this.name === "Frozen"||this.name === "Deep Freeze"){
					fill(this.color[0],this.color[1],this.color[2],this.fade);
					ellipse(-7,-10,9,9);
				}
				else if(this.name === "Supranormal"){
					fill(this.color[0]*7/8,this.color[1]*7/8,this.color[2]*7/8,this.fade);
					ellipse(-6,-5,10,10);
					ellipse(8,2,9,9);
					ellipse(-2,9,8,8);
				}
				else if(this.name === "Grass"){
					fill(this.color[0]*7/8,this.color[1]*7/8,this.color[2]*7/8,this.fade);
					ellipse(6,-5,10,10);
					ellipse(-8,2,9,9);
					ellipse(2,9,8,8);
				}
				else if(this.name === "Rock"||this.name === "Bedrock"||this.name === "Relic"||this.name === "Ambitious"){
					if(this.name === "Relic"){
						stroke(255,this.fade);
						strokeWeight(1);
					}
					else if(this.name === "Ambitious"){
						stroke(15,this.fade);
						strokeWeight(1.5);
					}
					else{
						stroke(this.color[0]*7/8,this.color[1]*7/8,this.color[2]*7/8,this.fade);
						strokeWeight(2);
					}
					translate(-15,-16);
					line(15,15,3,9);
					line(9,12,12,3);
					line(15,15,9,27);
					line(12,21,3,24);
					line(15,15,21,21);
					line(21,21,24,27);
					line(21,21,24,18);
					line(18,18,21,6);
					translate(15,16);
					rotate((sin(this.rate*4))*20);
					line(-20,-4,-16,4);
					line(-18,0,-20,7);
					line(24,2,15,0);
					line(15,0,22,-5);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Crystal Boss"){
					fill(this.color[0],this.color[1],this.color[2],this.fade);
					rect(-12,-16,8,8);
					rect(-6,-16,6,6);
					rect(-13,-11,4,4);
				}
				else if(this.name === "Custodian"||this.name === "Windborne"||this.name === "Volt"||this.name === "Awakening"){
					beginShape();
					vertex(-6,-14);
					bezierVertex(-10,-15,-13,-19,-14,-22);
					bezierVertex(-14,-18,-12,-14,-11,-10);
					endShape();
					beginShape();
					vertex(6,-14);
					bezierVertex(10,-15,13,-19,14,-22);
					bezierVertex(14,-18,12,-14,11,-10);
					endShape();
				}
				else if(this.name === "Researcher"){
					rotate(-60);
					for(k=0;k<5;k++){
						triangle(-2,-14,2,-14,0,-24);
						rotate(30);
					}
					rotate(-90);
				}
				else if(this.name === "Carbide"||this.name === "Carbide Boss"){
					noStroke();
					for(l=0;l<5;l++){
						fill(l*40,175-l*10,50-l*10,this.fade);
						rotate(15);
						for(k=0;k<6;k++){
							rotate(60);
							quad(0,2+l*2,-2-l*1.2,4+l*2,0,6+l*2,2+l*1.2,4+l*2);
						}
					}
					rotate(-75+(sin(this.rate*4))*20);
					translate(-18,0);
					for(l=0;l<5;l++){
						fill(l*40,175-l*10,50-l*10,this.fade);
						rotate(15);
						for(k=0;k<6;k++){
							rotate(60);
							quad(0,1+l,-1-l*0.6,2+l,0,3+l,1+l*0.6,2+l);
						}
					}
					rotate(-75);
					translate(36,0);
					for(l=0;l<5;l++){
						fill(l*40,175-l*10,50-l*10,this.fade);
						rotate(15);
						for(k=0;k<6;k++){
							rotate(60);
							quad(0,1+l,-1-l*0.6,2+l,0,3+l,1+l*0.6,2+l);
						}
					}
					rotate(-75);
					translate(-18,0);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Eclipser"||this.name === "Eclipser M4"){
					fill(0,this.fade);
					arc(0,0,30,30,-90,90);
					rotate((sin(this.rate*4))*20);
					ellipse(18,0,16,16);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "new enemy()"){
					for(k=0;k<8;k++){
						ellipse(sin(this.time*1.5+k*45)*25,cos(this.time*1.5+k*45)*25,10,10)
					}
				}
				else if(this.name === "Prestige"||this.name === "Supertask"||this.name === "Chronosite"){
					if(this.name === "Prestige"){
						fill(255,this.fade);
					}
					else if(this.name === "Chronosite"){
						fill(220,250,250,this.fade);
					}
					else{
						fill(50,this.fade);
					}
					rotate((sin(this.rate*4))*20);
					beginShape();
					for(k=0;k<6;k++){
						vertex(-18+sin(k*60+this.time*2)*4,cos(k*60+this.time*2)*4);
					}
					endShape();
					beginShape();
					for(k=0;k<6;k++){
						vertex(18+sin(k*60+this.time*2)*4,cos(k*60+this.time*2)*4);
					}
					endShape();
					rotate((sin(this.rate*4))*-20);
					beginShape();
					for(k=0;k<6;k++){
						vertex(sin(k*60+this.time*2)*8,cos(k*60+this.time*2)*8);
					}
					endShape();
				}
			}
			{
				if(this.name === "Circuit"||this.name === "Bolt"||this.name === "Shock"||this.name === "Volt King"||this.name === "Bolt X"||this.name === "Lightning King"||this.name === "Nerf"){
					for(var j in this.shocks){
						fill(this.color[0],this.color[1],this.color[2],this.fade*this.shocks[j][2]/255);
						rotate(this.shocks[j][0]);
						triangle(-4,0,4,0,0,this.shocks[j][1]);
						rotate(-this.shocks[j][0]);
					}
					if(this.name === "Volt King"){
						stroke(90,100,145,this.fade);
					}
					else if(this.name === "Lightning King"){
						stroke(40,60,75,this.fade);
					}
					else{
						if(this.name === "Circuit"){
							stroke(105,255,255,this.fade);
						}
						else if(this.name === "Shock"){
							stroke(240,240,0,this.fade);
						}
						else if(this.name === "Bolt X"){
							stroke(100,105,165,this.fade);
						}
						else if(this.name === "Nerf"){
							stroke(255,105,105,this.fade);
						}
						else{
							stroke(50,255,255,this.fade);
						}
						strokeWeight(2);
						line(-3,1,-7,-1);
						line(3,1,7,-1);
					}
				}
				else if(this.name === "Unknown"||this.name === "Glue"||this.name === "Glob"||this.name === "Known"){
					stroke(170,this.fade);
				}
				else if(this.name === "Purple"||this.name === "Kugelblitz"||this.name === "Kugelblitz X"||this.name === "Ravager"||this.name === "Kugelblitz Large"||this.name === "Kugelblitz Particle"||this.name === "Kugelblitz Overseer"||this.name === "Kugelblitz Microscopic"||this.name === "Ravager X"){
					stroke(255,this.fade);
				}
				else if(this.name === "Snow"){
					stroke(200,this.fade);
				}
				else if(this.name === "Rusted"||this.name === "Rusted Boss"){
					fill(140,78,43,this.fade);
					ellipse(-4,-7,10,10);
					ellipse(8,-2,9,9);
					ellipse(1,9,8,8);
					rotate((sin(this.rate*4))*20);
					ellipse(-18,-3,6,6);
					ellipse(17,2,7,7);
					rotate((sin(this.rate*4))*-20);
					fill(150,86,47,this.fade);
					ellipse(4,-7,10,10);
					ellipse(-8,-2,9,9);
					ellipse(-1,9,8,8);
					rotate((sin(this.rate*4))*20);
					ellipse(18,-3,6,6);
					ellipse(-17,2,7,7);
					rotate((sin(this.rate*4))*-20);
					stroke(180,95,50,this.fade);
				}
				else if(this.name === "Corroded"||this.name === "Corroded Boss"){
					fill(120,98,23,this.fade);
					ellipse(4,7,10,10);
					ellipse(-8,2,9,9);
					ellipse(-1,-9,8,8);
					rotate((sin(this.rate*4))*20);
					ellipse(18,3,6,6);
					ellipse(-17,-2,7,7);
					rotate((sin(this.rate*4))*-20);
					fill(130,106,27,this.fade);
					ellipse(-4,7,10,10);
					ellipse(8,2,9,9);
					ellipse(1,-9,8,8);
					rotate((sin(this.rate*4))*20);
					ellipse(-18,3,6,6);
					ellipse(17,-2,7,7);
					rotate((sin(this.rate*4))*-20);
					stroke(160,115,30,this.fade);
				}
				else if(this.name === "Astral"||this.name === "Inastralized"||this.name === "Soaker"){
					stroke(255,100,100,this.fade);
				}
				else if(this.name === "Sand"){
					stroke(180,155,0,this.fade);
				}
				else if(this.name === "Cyber Sentinel"){
					fill(this.color[0]*5/3,this.color[1]*5/3,this.color[2]*5/3,this.fade);
					rotate((sin(this.rate*4))*20);
					rect(-14,-4,2,8);
					rect(12,-4,2,8);
					rotate((sin(this.rate*4))*-20);
					stroke(this.color[0]*4/3,this.color[1]*4/3,this.color[2]*4/3,this.fade);
				}
				else if(this.name === "Neutron"){
					stroke(100,255,255,this.fade);
					strokeWeight(4);
					ellipse(0,0,18,18);
					stroke(255,this.fade);
				}
				else if(this.name === "Proton"){
					stroke(255,100,100,this.fade);
					strokeWeight(4);
					line(-8,-8,8,8);
					line(-8,8,8,-8);
					stroke(255,this.fade);
				}
				else if(this.name === "Alpha"){
					stroke(255,0,0,this.fade);
					strokeWeight(4);
					ellipse(-3,0,12,18);
					line(9,0,11,-5);
					line(9,0,11,5);
					stroke(255,this.fade);
				}
				else if(this.name === "Electron"){
					stroke(100,255,100,this.fade);
					strokeWeight(4);
					line(-12,0,12,0);
					stroke(255,this.fade);
				}
				else if(this.name === "Tau"){
					stroke(255,100,255,this.fade);
					strokeWeight(4);
					line(-8,-5,8,-5);
					line(0,-5,0,10);
					stroke(255,this.fade);
				}
				else if(this.name === "Positron"){
					stroke(255,255,100,this.fade);
					strokeWeight(4);
					line(0,-12,0,12);
					stroke(255,this.fade);
				}
				else if(this.name === "Antitop"){
					stroke(255,175,100,this.fade);
					strokeWeight(4);
					line(-6,0,6,0);
					line(0,-10,0,10);
					stroke(255,this.fade);
				}
				else if(this.name === "Perfection"){
					stroke(175,255,255,this.fade);
					strokeWeight(4);
					arc(-6,0,8,8,90,270);
					arc(6,0,8,8,-90,90);
					line(-6,-4,6,4);
					line(-6,4,6,-4);
					stroke(255,this.fade);
				}
				else if(this.name === "Reality"){
					stroke(255,175,255,this.fade);
					strokeWeight(4);
					arc(-6,0,8,8,90,270);
					arc(6,0,8,8,-90,90);
					arc(0,-6,8,8,-180,0);
					arc(0,6,8,8,0,180);
					line(-6,-4,6,4);
					line(-6,4,6,-4);
					stroke(255,this.fade);
				}
				else if(this.name === "Top"){
					stroke(255,215,100,this.fade);
					strokeWeight(4);
					line(-6,0,6,0);
					line(0,-10,0,10);
					stroke(255,this.fade);
				}
				else if(this.name === "Chaotic"||this.name === "Discord"){
					fill(0,this.fade);
					ellipse(0,0,28,28);
					rotate((sin(this.rate*4))*20);
					ellipse(-18,0,14,14);
					ellipse(18,0,14,14);
					rotate((sin(this.rate*4))*-20);
					stroke(0,255,150,this.fade);
				}
				else if(this.name === "Sentinel"){
					stroke(210,150,255,this.fade);
				}
				else if(this.name === "Apparition"){
					beginShape();
					vertex(-6,-14);
					bezierVertex(-10,-15,-13,-19,-14,-22);
					bezierVertex(-14,-18,-12,-14,-11,-10);
					endShape();
					beginShape();
					vertex(6,-14);
					bezierVertex(10,-15,13,-19,14,-22);
					bezierVertex(14,-18,12,-14,11,-10);
					endShape();
					stroke(50,this.fade);
				}
				else if(this.name === "Vengeful Speed"){
					stroke(230,250,255,this.fade);
				}
				else if(this.name === "Passer"){
					stroke(80,230,180,this.fade);
				}
				else if(this.name === "Echo"){
					stroke(150,200,225,this.fade);
					strokeWeight(4);
					arc(0,-4,16,24,0,180);
					stroke(255,this.fade);
				}
				else if(this.name === "Custodian"){
					stroke(255,220,255,this.fade);
				}
				else if(this.name === "Awakened Unknown"){
					stroke(255,this.fade);
				}
				else if(this.name === "Reconvenant"){
					for(var j in this.shocks){
						fill(this.color[0],this.color[1],this.color[2],this.fade*this.shocks[j][2]/255);
						rotate(this.shocks[j][0]);
						triangle(-4,0,4,0,0,this.shocks[j][1]*3);
						rotate(-this.shocks[j][0]);
					}
					stroke(255,this.fade);
					strokeWeight(2);
					line(-3,1,-7,-1);
					line(3,1,7,-1);
				}
				else if(this.name === "Beast"){
					stroke(255,75,75,this.fade);
				}
				else if(this.name === "Awakening"){
					stroke((this.speed-0.75)*80,this.fade);
				}
				else if(this.name === "Unascertained"){
					stroke(8,8,8,this.fade);
				}
				else if(this.name === "Guard"){
					stroke(55,55,55,this.fade);
				}
				else if(this.name === "Indigentia"){
					stroke(245,65,65,this.fade);
				}
				else if(this.name === "Methylenedioxymethamphetamine"){
					stroke(255,50,50,this.fade);
					strokeWeight(5);
					line(-5,9,5,9);
					strokeWeight(6);
					point(-5,2);
					point(5,2);
					stroke(20,this.fade);
				}
				else{
					stroke(0,this.fade);
				}
			}
			strokeWeight(3);
			if(this.name === "Angered"){
				stroke(255,100,100,this.fade);
				arc(0,9,12,3,-170,-10);
				strokeWeight(2);
				line(-3,1,-7,-1);
				line(3,1,7,-1);
			}
			else if(this.name === "Ruin"){
				fill(220,220,225,this.fade);
				noStroke();
				rect(-7,3,14,8,2);
				stroke(0,this.fade);
			}
			else if(this.name === "Noob"){
				arc(0,7,12,4,10,170);
			}
			else if(this.name === "Depressed"||this.name === "Cloned"||this.name === "Speedy Cloned"||this.name === "Weak"||this.name === "Fast"||this.name === "Hiding"||this.name === "Weak Boss"){
				arc(0,9,12,3,-170,-10);
			}
			else if(this.name !== "Clanker"&&this.name !== "Mega Clanker"&&this.name !== "Bound Metallic"&&this.name !== "Sprinter M6"&&this.name !== "Repossessed Armor"&&this.name !== "Warning"&&this.name !== "Altered Teleporter"&&this.name !== "Nil"&&this.name !== "Obsidian"&&this.name !== "Disattached"&&this.name !== "Visionary"&&this.name !== "Deadlock"&&this.name !== "Perception"){
				line(-5,9,5,9);
			}
			strokeWeight(4);
			{
				if(this.name === "Chained Boss"||this.name === "Slow Boss"){
					stroke(255,235,0,this.fade);
				}
				else if(this.name === "Shadow Boss"){
					stroke(235,this.fade);
				}
				else if(this.name === "Slow King"){
					stroke(180,20,120,this.fade);
				}
				else if(this.name === "Speedy King"){
					stroke(120,200,255,this.fade);
				}
				else if(this.name === "Frost King"||this.name === "Melting King"){
					stroke(215,235,255,this.fade);
				}
				else if(this.name === "Second Boss"){
					stroke(255,0,0,this.fade);
				}
				else if(this.name === "Grass"){
					stroke(0,120,0,this.fade);
				}
				else if(this.name === "Cursed Knight"){
					stroke(255,60,255,this.fade);
				}
				else if(this.name === "Creation"){
					stroke(150,this.fade);
				}
				else if(this.name === "Angerspeed"){
					stroke(255,65,70,this.fade);
				}
				else if(this.name === "Vengeful Speed X"){
					stroke(255,35,40,this.fade);
				}
				else if(this.name === "Chaotic Machine"){
					stroke(5,125,155,this.fade);
				}
				else if(this.name === "1x1x1x1"){
					stroke(160,255,160,this.fade);
				}
				else if(this.name === "Calamity Speedy King"){
					stroke(255,100,100,this.fade);
				}
			}
			{
				if(this.name === "Clanker"||this.name === "Mega Clanker"||this.name === "Disattached"){
					strokeWeight(2);
					line(0,12,0,-4);
					line(-10,4,10,4);
				}
				else if(this.name === "Bound Metallic"){
					stroke(150,175,200,this.fade);
					strokeWeight(3);
					line(-6,-1,-6,5);
					line(6,-1,6,5);
					line(0,-1,0,5);
				}
				else if(this.name === "Sprinter M6"){
					stroke(255,180,150,this.fade);
					strokeWeight(3);
					line(-6,-1,-6,5);
					line(6,-1,6,5);
					line(0,-1,0,5);
				}
				else if(this.name === "Vengeful"||this.name === "Vengeful Particle"||this.name === "Vengeful X"){
					fill(0,this.fade);
					noStroke();
					arc(-5,2,5,4,30,210);
					arc(5,2,5,4,-30,150);
				}
				else if(this.name === "Purified"){
					fill(255,this.fade);
					noStroke();
					arc(-5,2,5,4,30,210);
					arc(5,2,5,4,-30,150);
				}
				else if(this.name === "Repossessed Armor"){
					stroke(210,250,85,this.fade);
					strokeWeight(2);
					line(0,12,0,-4);
					line(-10,4,10,4);
				}
				else if(this.name === "Warning"){
					fill(255,225,225,this.fade);
					noStroke();
					textSize(32);
					text("!",0,3);
				}
				else if(this.name === "Altered Teleporter"){
					strokeWeight(2);
					stroke(185,225,250,this.fade);
					line(-5,-2,5,6);
					line(5,-2,-5,6);
				}
				else if(this.name === "Nil"){
					stroke(255,this.fade);
					strokeWeight(5);
					line(0,-1,0,5);
				}
				else if(this.name === "Wire"){
					stroke(0,255,0,this.fade);
					point(5,2);
					stroke(255,0,0,this.fade);
					point(-5,2);
				}
				else if(this.name === "Obsidian"){
					stroke(150,0,0,this.fade);
					strokeWeight(2);
					quad(0,-2,-6,4,0,10,6,4);
				}
				else if(this.name === "Ambitious"){
					stroke(255,120,125,this.fade);
					strokeWeight(2);
					line(-7,-1,-3,1);
					line(-7,2,-3,4);
					line(7,-1,3,1);
					line(7,2,3,4);
				}
				else if(this.name === "Visionary"||this.name === "Perception"){
					strokeWeight(2);
					line(-7,-1,7,9);
					line(-7,9,7,-1);
				}
				else if(this.name === "Incorrect"||this.name === "Backwards"){
					point(-8,2);
					point(8,2);
				}
				else if(this.name === "Deadlock"){
					stroke(60,120,150,this.fade);
					strokeWeight(8);
					line(0,0,0,4);
				}
				else{
					point(-5,2);
					point(5,2);
				}
			}
			{
				if(this.name === "Hefty"||this.name === "Heftier"||this.name === "Armored"||this.name === "Awakening"||this.name === "1x1x1x1"){
					stroke(50,this.fade);
					strokeWeight(1.5);
					rotate((sin(this.rate*4))*20);
					ellipse(-19,-2,4,4);
					ellipse(-19,2,4,4);
					ellipse(-18,-6,4,4);
					ellipse(-18,6,4,4);
					ellipse(19,-2,4,4);
					ellipse(19,2,4,4);
					ellipse(18,-6,4,4);
					ellipse(18,6,4,4);
					if(this.name === "Heftier"){
						ellipse(-20,-2,4,4);
						ellipse(-20,2,4,4);
						ellipse(-21,-6,4,4);
						ellipse(-21,6,4,4);
						ellipse(20,-2,4,4);
						ellipse(20,2,4,4);	
						ellipse(21,-6,4,4);
						ellipse(21,6,4,4);
					}
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Fallen Reaper"){
					noStroke();
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					arc(0,0,32,32,-210,30);
					rotate((sin(this.rate*4))*20);
					stroke(130,65,0,this.fade);
					strokeWeight(4);
					line(-18,this.handMove,-18,25+this.handMove);
					noStroke();
					fill(200,this.fade);
					triangle(-16,25+this.handMove,-16,18+this.handMove,-2,19+this.handMove);
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					ellipse(-18,this.handMove,16,16);
					ellipse(18,0,16,16);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Chained Boss"||this.name === "Reforged Boss"||this.name === "Gargantuan Boss"||this.name === "Custodian"||this.name === "Relic"||this.name === "Obfuscated"){
					scale(0.75);
					rotate(30);
					stroke(150,this.fade);
					noFill();
					strokeWeight(2);
					ellipse(10,15,5,5);
					ellipse(9,10,5,5);
					ellipse(7,5,5,5);
					ellipse(4,1,5,5);
					ellipse(1,-3,5,5);
					ellipse(-4,-7,5,5);
					ellipse(-9,-9,5,5);
					ellipse(-14,-11,5,5);
					rotate(-30);
					scale(1/0.75);
					if(this.name === "Custodian"){
						noStroke();
						fill(10,25,40,this.fade);
						rect(-16,-12,32,5,2);
						rect(-10,-21,20,12,2);
					}
				}
				else if(this.name === "Hazardous"){
					strokeWeight(2);
					arc(0,6,25,6,0,180);
					fill(0,this.fade);
					noStroke();
					rect(-6,6,12,6,2);
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					rotate((sin(this.rate*4))*20);
					quad(-15,-7.5,-15,7.5,-20,8,-20,-8);
					quad(15,-7.5,15,7.5,20,8,20,-8);
					fill(120,this.fade);
					quad(-17,-7.5,-17,7.5,-18,8,-18,-8);
					quad(17,-7.5,17,7.5,18,8,18,-8);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Deep Freeze"){
					fill(0,66,50,this.fade);
					noStroke();
					rotate((sin(this.rate*4))*20);
					quad(-19,-8,-19,8,-22,7,-22,-7);
					quad(17,-8,17,8,14,7,14,-7);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Heavy"){
					fill(50,this.fade);
					noStroke();
					rotate((sin(this.rate*4))*20);
					rect(16,-8,4,16,1);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Fortified"){
					stroke(140,80,20,this.fade);
					strokeWeight(6);
					noFill();
					rotate((sin(this.rate*4))*20);
					arc(0,0,38,38,-18,18);
					arc(0,0,38,38,162,198);
					strokeWeight(2);
					stroke(100,this.fade);
					arc(0,0,34,34,-22,22);
					arc(0,0,42,42,-20,20);
					arc(0,0,34,34,158,202);
					arc(0,0,42,42,160,200);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Bolt"||this.name === "Shock"||this.name === "Bolt X"){
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					noStroke();
					rotate((sin(this.rate*4))*20);
					quad(-19,-8,-19,8,-22,7,-22,-7);
					quad(19,-8,19,8,22,7,22,-7);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Pike"||this.name === "Knight"||this.name === "Cursed Knight"){
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					noStroke();
					arc(0,-2,-32,-32,-180,0);
					ellipse(0,-2,8,6);
				}
				else if(this.name === "Kugelblitz"){
					stroke(255,150,100,this.fade);
					strokeWeight(6);
					noFill();
					ellipse(0,0,45,45);
				}
				else if(this.name === "Chief Worker"||this.name === "Worker"||this.name === "Limited Annihilator"){
					stroke(60,this.fade);
					strokeWeight(2);
					if(this.name === "Limited Annihilator"){
						fill(240,255,255,this.fade);
					}
					else if(this.name === "Worker"){
						fill(200,this.fade/2);
					}
					else{
						fill(255,155,155,this.fade);
					}
					ellipse(-5,2,6,6);
					ellipse(5,2,6,6);
					line(-2,2,2,2);
				}
				else if(this.name === "Officer"||this.name === "Trooper"){
					fill(80,100,80,this.fade);
					noStroke();
					ellipse(0,-10,32,16);
				}
				else if(this.name === "Builder"){
					fill(80,this.fade);
					stroke(80,this.fade);
					line(-18,-6,18,-6);
					arc(0,-6,30,24,-180,0);
				}
				else if(this.name === "Engineer"||this.name === "Volt"||this.name === "Volt Sentinel"){
					if(this.name === "Volt"||this.name === "Volt Sentinel"){
						fill(80,15,245,this.fade);
					}
					else{
						fill(255,210,170,this.fade);
					}
					stroke(40,this.fade);
					strokeWeight(2);
					rect(-9,-2,18,8,2);
				}
				else if(this.name === "Sentinel"){
					noStroke();
					fill(90,105,135,this.fade);
					rect(-14,-12,28,6);
					rect(-8,-20,4,14);
					rect(4,-20,4,14);
				}
				else if(this.name === "Vengeful"||this.name === "Vengeful X"){
					stroke(145,150,235,this.fade);
					fill(145,150,235,this.fade);
					strokeWeight(4);
					line(-17,-6,17,-6);
					quad(-13,-6,13,-6,8,-15,-8,-15);
					stroke(20,25,50,this.fade);
					line(-12,-10,12,-10);
				}
				else if(this.name === "Kugelblitz X"){
					stroke(90,210,255,this.fade);
					strokeWeight(6);
					noFill();
					ellipse(0,0,45,45);
					ellipse(0,0,60,60);
				}
				else if(this.name === "Ravager"||this.name === "Ravager X"){
					fill(30,115,165,this.fade);
					noStroke();
					rect(-14,-10,28,4);
					rect(-14,-13,6,4);
					rect(-3,-13,6,4);
					rect(8,-13,6,4);
				}
				else if(this.name === "Volt King"){
					fill(40,80,115,this.fade);
					noStroke();
					rect(-14,-10,28,4);
					fill(40,175,230,this.fade);
					quad(-3,-12,0,-9,3,-12,0,-15);
				}
				else if(this.name === "Kugelblitz Large"){
					stroke(160,175,255,this.fade);
					strokeWeight(6);
					noFill();
					ellipse(0,0,45,45);
					ellipse(0,0,60,60);
					ellipse(0,0,75,75);
				}
				else if(this.name === "Kugelblitz Particle"){
					stroke(225,250,210,this.fade);
					strokeWeight(6);
					noFill();
					ellipse(0,0,45,45);
				}
				else if(this.name === "Kugelblitz Overseer"){
					stroke(250,115,165,this.fade);
					strokeWeight(6);
					noFill();
					ellipse(0,0,45,45);
					ellipse(0,0,60,60);
					ellipse(0,0,75,75);
					ellipse(0,0,90,90);
				}
				else if(this.name === "Grail"){
					noStroke();
					fill(200,195,180,this.fade);
					rect(-16,-12,32,5,2);
					rect(-10,-21,20,12,2);
				}
				else if(this.name === "Equinox"){
					fill(100,120,140,this.fade);
					noStroke(115,130,145);
					rect(-14,-10,28,4);
					rect(-14,-13,6,3);
					rect(-3,-13,6,3);
					rect(8,-13,6,3);
				}
				else if(this.name === "Kugelblitz Microscopic"){
					stroke(255,140,0,this.fade);
					strokeWeight(6);
					noFill();
					ellipse(0,0,45,45);
				}
				else if(this.name === "Light King"){
					fill(220,220,200,this.fade);
					noStroke();
					rect(-14,-10,28,4);
					fill(245,240,190,this.fade);
					quad(-3,-12,0,-9,3,-12,0,-15);
				}
				else if(this.name === "Sprinter M5"){
					fill(10,15,20,this.fade);
					noStroke();
					arc(0,0,31,31,-90,90);
				}
				else if(this.name === "Slicer"){
					fill(195,200,210,this.fade);
					noStroke();
					rect(-14,-9,28,3);
				}
				else if(this.name === "Lightning King"){
					fill(50,65,95,this.fade);
					noStroke();
					rect(-14,-10,28,4);
					rect(-14,-13,6,4);
					rect(-3,-13,6,4);
					rect(8,-13,6,4);
				}
				else if(this.name === "Uncharted"||this.name === "Unholy Uncharted"){
					scale(3/5);
					rotate(30);
					if(this.name === "Uncharted"){
						stroke(140,90,50,this.fade);
					}
					else{
						stroke(5,10,15,this.fade);
					}
					noFill();
					strokeWeight(2);
					ellipse(10,20,5,5);
					ellipse(10,15,5,5);
					ellipse(9,10,5,5);
					ellipse(7,5,5,5);
					ellipse(4,1,5,5);
					ellipse(1,-3,5,5);
					ellipse(-4,-7,5,5);
					ellipse(-9,-9,5,5);
					ellipse(-14,-11,5,5);
					ellipse(-19,-12,5,5);
					rotate(-30);
					scale(5/3);
				}
				else if(this.name === "Summonist"){
					noStroke();
					fill(this.color2[0]*4/5,this.color2[1]*4/5,this.color2[2]*4/5,this.fade);
					rect(-16,-12,32,5,2);
					rect(-10,-21,20,12,2);
				}
				else if(this.name === "Cash Man Awakened"){
					noStroke();
					fill(30,25,40,this.fade);
					rect(-16,-12,32,5,2);
					rect(-10,-21,20,12,2);
				}
				else if(this.name === "Alpha"){
					noStroke();
					fill(150,50,50,this.fade);
					triangle(-12,3,-20,-3,-16,-7);
					triangle(12,3,20,-3,16,-7);
					arc(0,0,32,32,-200,20);
				}
				else if(this.name === "Purified"){
					stroke(200,205,215,this.fade);
					fill(200,205,215,this.fade);
					strokeWeight(4);
					line(-17,-6,17,-6);
					quad(-13,-6,13,-6,8,-15,-8,-15);
					noFill();
					stroke(235,240,240,this.fade);
					strokeWeight(3);
					ellipse(0,-15,22,8);
				}
				else if(this.name === "Obstruction"){
					noStroke();
					fill(0,this.fade);
					rect(-16,-12,32,5,2);
					rect(-10,-21,20,12,2);
				}
				else if(this.name === "Checkpoint Creator"){
					noStroke();
					fill(10,20,40,this.fade);
					rect(-16,-12,32,5,2);
					rect(-10,-21,20,12,2);
				}
				else if(this.name === "Blessed Slicer"){
					fill(220,220,225,this.fade);
					noStroke();
					rect(-14,-9,28,3);
				}
				else if(this.name === "Trained Sprinter"){
					fill(30,45,65,this.fade);
					noStroke();
					rect(-14,-9,28,3);
				}
				else if(this.name === "Unintended"||this.name === "Inadvertent"){
					noStroke();
					fill(40,5,5,this.fade);
					rect(-14,-10,28,4);
					fill(200,55,80,this.fade);
					quad(-3,-12,0,-7,3,-12,0,-17);
					fill(0,this.fade);
					quad(-2,-12,0,-9,2,-12,0,-15);
				}
				else if(this.name === "Mobocracy"){
					noStroke();
					fill(60,60,65,this.fade);
					arc(0,0,33,33,-180,0);
				}
				else if(this.name === "Underboss"){
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
					strokeWeight(3);
					line(-15,-11,15,-11);
					quad(-10,-11,10,-11,7,-16,-7,-16);
				}
				else if(this.name === "Sprinter L2"){
					fill(30,40,60,this.fade);
					noStroke();
					rect(-14,-9,28,3);
				}
				else if(this.name === "Windborne"){
					stroke(140,5,250,this.fade);
					strokeWeight(4);
					noFill();
					ellipse(0,0,45,45);
				}
				else if(this.name === "Remechanized"){
					fill(60,45,45,this.fade);
					noStroke();
					arc(0,0,31,31,-90,90);
				}
				else if(this.name === "Legacy"){
					stroke(255,this.fade);
					strokeWeight(10);
					point(-5,2);
				}
				else if(this.name === "Airborne"){
					stroke(255,255,100,this.fade/2);
					strokeWeight(6);
					noFill();
					ellipse(0,0,45,45);
				}
				else if(this.name === "Voidglass"){
					stroke(60,35,125,this.fade);
					line(-5,9,5,9);
					arc(0,-5,32,10,15,165);
					fill(60,35,125,this.fade);
					noStroke();
					rect(-8,0,6,6,1);
					rect(2,0,6,6,1);
				}
				else if(this.name === "Wasted"){
					stroke(30,15,5,this.fade);
					strokeWeight(1.5);
					rotate((sin(this.rate*4))*20);
					ellipse(19,-2,4,4);
					ellipse(19,2,4,4);
					ellipse(18,-6,4,4);
					ellipse(18,6,4,4);
					rotate((sin(this.rate*4))*-20);
				}
				else if(this.name === "Moonfall"){
					stroke(255,this.fade/2);
					strokeWeight(4);
					noFill();
					ellipse(0,0,45,45);
					for(k=0;k<24;k++){
						rotate(15);
						line(0,30,0,40+sin(k*75+this.time*6)*10);
					}
				}
				else if(this.name === "Indigentia"){
					fill(20,this.fade);
					beginShape();
					vertex(-6,-14);
					bezierVertex(-10,-15,-13,-19,-14,-22);
					bezierVertex(-14,-18,-12,-14,-11,-10);
					endShape();
					beginShape();
					vertex(6,-14);
					bezierVertex(10,-15,13,-19,14,-22);
					bezierVertex(14,-18,12,-14,11,-10);
					endShape();
				}
				else if(this.name === "Recollection"){
					stroke(230,255,230,this.fade/2);
					strokeWeight(3);
					noFill();
					ellipse(0,0,45,45);
					for(k=0;k<20;k++){
						point(sin(this.time*2+k*18)*30,cos(this.time*2+k*18)*30);
						point(sin(this.time*-2+k*18)*36,cos(this.time*-2+k*18)*36);
						point(sin(this.time*2+k*18)*42,cos(this.time*2+k*18)*42);
						point(sin(this.time*-2+k*18)*48,cos(this.time*-2+k*18)*48);
					}
				}
				else if(this.name === "Orbital"){
					stroke(60,this.fade/2);
					strokeWeight(6);
					for(k=0;k<12;k++){
						point(sin(this.time*2+k*30)*22,cos(this.time*2+k*30)*22);
						point(sin(this.time*-2+k*30)*30,cos(this.time*-2+k*30)*30);
					}
				}
				else if(this.name === "Palliatus"){
					fill(10,5,30,this.fade);
					noStroke();
					rect(-14,-9,28,3);
				}
			}
		break;
		case "Mystery": case "Mystery Boss": case "Soul": case "Soul Boss": case "Uber Mystery": case "Cursed Soul": case "Boinky": case "Light Spirit": case "Shadow": case "Light Spirit Boss": case "Danger": case "Everything": case "Essence": case "Calamity Soul": case "Ethereal": case "Aleph-Null":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade*1/5);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade*3/5);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			if(this.name === "Soul"||this.name === "Soul Boss"||this.name === "Cursed Soul"||this.name === "Calamity Soul"){
				stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			}
			else{
				stroke(this.color2[0],this.color2[1],this.color2[2],this.fade*3/5);
			}
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Mystery"||this.name === "Mystery Boss"||this.name === "Uber Mystery"){
				fill(255,this.fade*3/5);
				noStroke();
				textSize(32);
				text("?",0,3);
			}
			else if(this.name === "Danger"){
				fill(0,this.fade*3/5);
				noStroke();
				textSize(32);
				text("!",0,3);
			}
			else if(this.name === "Everything"){
				fill(0,this.fade*3/5);
				noStroke();
				textSize(32);
				text("ε",0,3);
			}
			else if(this.name === "Soul Boss"){
				stroke(this.color[0],this.color[1],this.color[2],this.fade*2/5);
				strokeWeight(4);
				noFill();
				arc(-15,-20,16,40,95,160);
				arc(-13,-22,12,36,95,160);
				arc(-11,-24,8,32,95,160);
				arc(15,-20,16,40,20,85);
				arc(13,-22,12,36,20,85);
				arc(11,-24,8,32,20,85);
				stroke(255,255,35,this.fade);
				strokeWeight(3);
				ellipse(0,-15,22,8);
			}
			else if(this.name === "Light Spirit"||this.name === "Light Spirit Boss"){
				stroke(255,155,130,this.fade);
				strokeWeight(3);
				ellipse(0,-15,22,8);
				if(this.name === "Light Spirit Boss"){
					stroke(this.color[0],this.color[1],this.color[2],this.fade*2/5);
					strokeWeight(4);
					noFill();
					arc(-15,-20,16,40,95,160);
					arc(-13,-22,12,36,95,160);
					arc(-11,-24,8,32,95,160);
					arc(15,-20,16,40,20,85);
					arc(13,-22,12,36,20,85);
					arc(11,-24,8,32,20,85);
				}
			}
			else if(this.name === "Essence"){
				rect(-14,-10,28,4);
				rect(-14,-13,6,3);
				rect(-3,-13,6,3);
				rect(8,-13,6,3);
			}
			else if(this.name === "Calamity Soul"){
				rotate((sin(this.rate*4))*20);
				fill(25,40,55,this.fade);
				stroke(5,10,10,this.fade);
				strokeWeight(1.5);
				rect(-20,-8,4,16);
				rect(16,-8,4,16);
				rotate((sin(this.rate*4))*-20);
			}
			else if(this.name === "Ethereal"){
				stroke(230,255,255,this.fade/2);
				strokeWeight(3);
				noFill();
				ellipse(0,0,45,45);
				for(k=0;k<20;k++){
					line(sin(this.time*2+k*18)*30,cos(this.time*2+k*18)*30,sin(this.time*2+k*18+36)*45,cos(this.time*2+k*18+36)*45);
				}
			}
			else if(this.name === "Aleph-Null"){
				fill(0,this.fade*3/5);
				noStroke();
				textSize(32);
				text("ℵ",0,3);
			}
		break;
		case "Fallen": case "Fallen Hero": case "Calamity Fallen": case "Bent Fallen": case "Calamity Hero": case "Bent Hero": case "Brittle Fallen":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			for(var j=5;j>0;j--){
				fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
				rotate((sin(this.rate*4))*20);
				ellipse(-18,0,16*j/5,16*j/5);
				ellipse(18,0,16*j/5,16*j/5);
				rotate((sin(this.rate*4))*-20);
			}
			if(this.name === "Fallen Hero"||this.name === "Calamity Hero"||this.name === "Bent Hero"){
				rotate((sin(this.rate*4))*20);
				fill(120,this.fade);
				rect(-17,-10,10,20,2);
				rect(7,-10,10,20,2);
				fill(145,0,100,this.fade);
				rect(-16,-7,10,4);
				rect(6,-7,10,4);
				rect(-16,3,10,4);
				rect(6,3,10,4);
				rotate((sin(this.rate*4))*-20);
			}
			for(j=5;j>0;j--){
				fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
				ellipse(0,0,30*j/5,30*j/5);
			}
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Fallen Hero"||this.name === "Calamity Hero"||this.name === "Bent Hero"){
				noStroke();
				fill(5,10,15,this.fade);
				triangle(-12,3,-20,-3,-16,-7);
				triangle(12,3,20,-3,16,-7);
				arc(0,0,32,32,-200,20);
			}
			if(this.name === "Brittle Fallen"){
				noStroke();
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				rotate((sin(this.rate*4))*20);
				rect(-20,-8,4,16);
				rect(16,-8,4,16);
				rotate((sin(this.rate*4))*-20);
			}
		break;
		case "Fallen Rusher":
			if(this.life>=this.maxLife*7/8){
				noStroke();
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				ellipse(6,((sin(this.rate*4))*-9),14,14);
				ellipse(-6,((sin(this.rate*4))*9),14,14);
				for(var j=5;j>0;j--){
					fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
					ellipse(0,0,30*j/5,30*j/5);
					ellipse(-7,16,16*j/5,16*j/5);
					ellipse(7,16,16*j/5,16*j/5);
				}
				fill(55,this.fade);
				rect(-16,20,32,11,4);
				fill(255,200,220,this.fade);
				rect(-12,24,24,3,2);
				stroke(0,this.fade);
				strokeWeight(4);
				point(-5,2);
				point(5,2);
				strokeWeight(3);
				line(-5,9,5,9);
			}
			else{
				noStroke();
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				ellipse(6,((sin(this.rate*4))*-9),14,14);
				ellipse(-6,((sin(this.rate*4))*9),14,14);
				for(var j=5;j>0;j--){
					fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
					rotate((sin(this.rate*4))*20);
					ellipse(-18,0,16*j/5,16*j/5);
					ellipse(18,0,16*j/5,16*j/5);
					rotate((sin(this.rate*4))*-20);
				}
				for(j=5;j>0;j--){
					fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
					ellipse(0,0,30*j/5,30*j/5);
				}
				stroke(0,this.fade);
				strokeWeight(4);
				point(-5,2);
				point(5,2);
				strokeWeight(3);
				line(-5,9,5,9);
			}
		break;
		case "Bulwark": case "Rampart": case "Rusher":
			if(this.name === "Bulwark"&&this.shield>0||this.name === "Rampart"&&this.shield>0||this.name === "Rusher"&&this.life>=this.maxLife*7/8){
				noStroke();
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				ellipse(6,((sin(this.rate*4))*-9),14,14);
				ellipse(-6,((sin(this.rate*4))*9),14,14);
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				ellipse(0,0,30,30);
				ellipse(-7,16,16,16);
				ellipse(7,16,16,16);
				if(this.name === "Rusher"){
					rect(-15,14,30,4,2);
					fill(45,50,50,this.fade);
					rect(-16,20,32,11,4);
				}
				else{
					fill(30,40,65,this.fade);
					rect(-16,20,32,11,4);
				}
				stroke(0,this.fade);
				strokeWeight(4);
				point(-5,2);
				point(5,2);
				strokeWeight(3);
				line(-5,9,5,9);
			}
			else{
				noStroke();
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				ellipse(6,((sin(this.rate*4))*-9),14,14);
				ellipse(-6,((sin(this.rate*4))*9),14,14);
				rotate((sin(this.rate*4))*20);
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				ellipse(-18,0,16,16);
				ellipse(18,0,16,16);
				if(this.name === "Rusher"){
					fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
					rect(-20,-8,4,16,2);
					rect(16,-8,4,16,2);
					fill(this.color[0],this.color[1],this.color[2],this.fade);
				}
				rotate((sin(this.rate*4))*-20);
				ellipse(0,0,30,30);
				stroke(0,this.fade);
				strokeWeight(3);
				line(-5,9,5,9);
				strokeWeight(4);
				point(-5,2);
				point(5,2);
			}
		break;
		case "Boomer": case "Quick Carrier": case "Boomer X": case "Fat":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			if(this.name === "Fat"){
				scale(1/1.425);
			}
			else{
				scale(1/1.6);
			}
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			arc(0,9,12,3,-170,-10);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			if(this.name === "Fat"){
				scale(1.425);
			}
			else{
				scale(1.6);
			}
		break;
		case "Glitch": case "Error": case "Nope": case "Glitched Angel":
			if(this.name === "Error"){
				stroke(180,this.fade);
				strokeWeight(12);
				noFill();
				rotate((sin(this.rate*4))*20);
				ellipse(-32,0,16,16);
				rotate((sin(this.rate*4))*-20);
			}
			else if(this.name === "Glitched Angel"){
				stroke(this.colors[5][0],this.colors[5][1],this.colors[5][2],this.fade);
				strokeWeight(4);
				noFill();
				arc(-15,-20,16,40,95,160);
				arc(-13,-22,12,36,95,160);
				arc(-11,-24,8,32,95,160);
				stroke(this.colors[6][0],this.colors[6][1],this.colors[6][2],this.fade);
				arc(15,-20,16,40,20,85);
				arc(13,-22,12,36,20,85);
				arc(11,-24,8,32,20,85);
			}
			noStroke();
			fill(this.colors[0][0],this.colors[0][1],this.colors[0][2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			fill(this.colors[1][0],this.colors[1][1],this.colors[1][2],this.fade);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.colors[2][0],this.colors[2][1],this.colors[2][2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			fill(this.colors[3][0],this.colors[3][1],this.colors[3][2],this.fade);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			if(this.name === "Nope"){
				fill(160,0,0,this.fade);
				ellipse(0,0,30,30);
				stroke(0,this.fade);
			}
			else{
				fill(this.colors[4][0],this.colors[4][1],this.colors[4][2],this.fade);
				ellipse(0,0,30,30);
				stroke(255,this.fade);
			}
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Glitched Angel"){
				noStroke();
				stroke(this.colors[7][0],this.colors[7][1],this.colors[7][2],this.fade);
				strokeWeight(3);
				ellipse(0,-15,22,8);
			}
		break;
		case "Lead Balloon": case "White Balloon": case "Zebra Balloon": case "Balloon": case "Camo Balloon": case "Regen Balloon": case "Ectoplasmic": case "Titanium Balloon": case "Steel Balloon": case "Balloon X":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			if(this.name === "Ectoplasmic"){
				fill(this.color2[0]*3/2,this.color2[1]*3/2,this.color2[2]*3/2,this.fade);
				rotate((sin(this.rate*4))*20+45);
				ellipse(-13,13,8,2.5);
				ellipse(13,-13,8,2.5);
				ellipse(-6,13,2.5,8);
				ellipse(-20,13,2.5,8);
				ellipse(6,-13,2.5,8);
				ellipse(20,-13,2.5,8);
				arc(-13,6,2.5,8,0,180);
				arc(-13,20,2.5,8,-180,0);
				arc(13,-6,2.5,8,-180,0);
				arc(13,-20,2.5,8,0,180);
				rotate((sin(this.rate*4))*-20-45);
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Templar": case "Awakened Templar":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			if(this.name === "Awakened Templar"){
				fill(255,this.fade);
			}
			else{
				fill(255,0,0,this.fade);
			}
			scale(0.75);
			rect(-7,10,8,29);
			fill(0,this.fade);
			rect(-9,10,12,27);
			if(this.name === "Templar"){
				fill(30,this.fade);
			}
			rect(-8,10,5,30,2);
			rect(-3,10,5,30,3);
			scale(1/0.75);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-11,14,16,16);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			if(this.name === "Awakened Templar"){
				fill(255,this.fade);
			}
			else{
				fill(80,this.fade);
			}
			quad(15,-7.5,15,7.5,19,8.5,19,-8.5);
			rotate((sin(this.rate*4))*-20);
			quad(-5.5,8,-17.5,8,-19.5,12,-3.5,12);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			if(this.name === "Awakened Templar"){
				stroke(255,this.fade);
			}
			else{
				stroke(0,this.fade);
			}
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Awakened Templar"){
				fill(0,this.fade);
			}
			else{
				fill(255,0,0,this.fade);
			}
			strokeWeight(2);
			rect(-8,-1,16,5,2);
			rotate(-this.extraSpin);
		break;
		case "Health Cultist":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,18,18);
			ellipse(-18,0,18,18);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			noStroke();
			ellipse(0,0,30,30);
			stroke(120,255,120,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(0,0,32,32,-210,30);
			rect(-10,0,20,2);
			stroke(255,this.fade/5);
			noFill();
			strokeWeight(1);
			arc(-24,22,48,48,-72,-18);
			arc(-24,22,64,64,-72,-18);
			arc(-24,22,80,80,-66,-24);
			stroke(this.color[0],this.color[1],this.color[2],this.fade*3/5);
			strokeWeight(4);
			rotate(this.time);
			arc(0,0,54,54,0,80);
			arc(0,0,54,54,120,200);
			arc(0,0,54,54,240,320);
			arc(0,0,40,40,70,130);
			arc(0,0,40,40,190,250);
			arc(0,0,40,40,310,370);
			rotate(-this.time);
		break;
		case "SCT": case "Awakened SCT":
			rotate(this.extraSpin);
			noStroke();
			if(this.name === "Awakened SCT"){
				fill(255,this.fade);
			}
			else{
				fill(40,this.fade);
			}
			rect(-8,22,5,10,2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			if(this.name === "Awakened SCT"){
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				rotate((sin(this.rate*4))*20);
				ellipse(18,0,16,16);
				rotate((sin(this.rate*4))*-20);
				ellipse(-6,17,16,16);
				ellipse(0,0,30,30);
			}
			else{
				for(var j=5;j>0;j--){
					fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
					ellipse(0,0,30*j/5,30*j/5);
					rotate((sin(this.rate*4))*20);
					ellipse(18,0,16*j/5,16*j/5);
					rotate((sin(this.rate*4))*-20);
					ellipse(-6,17,16*j/5,16*j/5);
				}
			}
			if(this.name === "Awakened SCT"){
				stroke(255,this.fade);
			}
			else{
				stroke(0,this.fade);
			}
			strokeWeight(3);
			line(-5,9,5,9);
			arc(0,-5,32,10,15,165);
			if(this.name === "Awakened SCT"){
				fill(255,this.fade);
			}
			else{
				fill(0,this.fade);
			}
			noStroke();
			rect(-8,0,6,6,1);
			rect(2,0,6,6,1);
			rotate((sin(this.rate*4))*20);
			rect(16,-8,3,16);
			rotate((sin(this.rate*4))*-20);
			rect(-14,16,16,3);
			rotate(-this.extraSpin);
		break;
		case "Soul Stealer": case "Electrolysis": case "Desolator":
			rotate(this.extraSpin);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			noStroke();
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate(this.handSpin);
			if(this.name === "Electrolysis"){
				strokeWeight(3);
				stroke(30,30,65,this.fade);
				line(-6+this.handMoveX,18+this.handMoveY,-6+this.handMoveX,52+this.handMoveY);
			}
			else if(this.name === "Desolator"){
				strokeWeight(3);
				stroke(25,15,10,this.fade);
				line(-6+this.handMoveX,18+this.handMoveY,-6+this.handMoveX,52+this.handMoveY);
			}
			else{
				strokeWeight(4);
				stroke(120,60,0,this.fade);
				line(-6+this.handMoveX,18+this.handMoveY,-6+this.handMoveX,48+this.handMoveY);
			}
			noStroke();
			fill(200,this.fade);
			quad(-4+this.handMoveX,48+this.handMoveY,-4+this.handMoveX,38+this.handMoveY,8+this.handMoveX,35+this.handMoveY,8+this.handMoveX,51+this.handMoveY);
			if(this.name === "Electrolysis"){
				fill(160,160,255,this.fade/2);
				quad(-4+this.handMoveX,52+this.handMoveY,-4+this.handMoveX,34+this.handMoveY,12+this.handMoveX,31+this.handMoveY,12+this.handMoveX,55+this.handMoveY);
			}
			else if(this.name === "Desolator"){
				fill(250,75,75,this.fade/2);
				quad(-4+this.handMoveX,52+this.handMoveY,-4+this.handMoveX,34+this.handMoveY,12+this.handMoveX,31+this.handMoveY,12+this.handMoveX,55+this.handMoveY);
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-6+this.handMoveX,18+this.handMoveY,16,16);
			rotate(-this.handSpin);
			noStroke();
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Desolator"){
				stroke(240,85,85,this.fade);
				strokeWeight(2);
				line(-7,-1,-3,1);
				line(-7,2,-3,4);
				line(7,-1,3,1);
				line(7,2,3,4);
			}
			else{
				strokeWeight(4);
				point(-5,2);
				point(5,2);
			}
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(0,0,32,32,-210,30);
			if(this.name === "Electrolysis"){
				fill(40,40,110,this.fade);
			}
			else if(this.name === "Desolator"){
				fill(130,10,10,this.fade);
			}
			else{
				fill(200,50,150,this.fade);
			}
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-10,-11);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,10,-11);
			endShape();
			rotate(-this.extraSpin);
		break;
		case "Summoner Boss": case "Divine Being":
			if(this.name === "Divine Being"){
				noStroke();
				fill(255,250,230,this.fade);
				quad(-30,-9,0,-3,30,9,0,3);
				quad(30,-9,0,-3,-30,9,0,3);
				stroke(190,195,210,this.fade);
			}
			else{
				stroke(30,this.fade);
			}
			noFill();
			strokeWeight(3);
			line(-18,18+this.handMove,18,18+this.handMove);
			ellipse(24,18+this.handMove,12,12);
			point(24,11+this.handMove);
			point(24,25+this.handMove);
			point(31,18+this.handMove);
			noStroke();
			if(this.name === "Divine Being"){
				fill(255,215,160,this.fade);
			}
			else{
				fill(60,20,120,this.fade);
			}
			beginShape();
			vertex(24,22+this.handMove);
			bezierVertex(23,19+this.handMove,23,19+this.handMove,20,18+this.handMove);
			bezierVertex(23,17+this.handMove,23,17+this.handMove,24,14+this.handMove);
			bezierVertex(25,17+this.handMove,25,17+this.handMove,28,18+this.handMove);
			bezierVertex(25,19+this.handMove,25,19+this.handMove,24,22+this.handMove);
			endShape();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-11,12+this.handMove,16,16);
			ellipse(11,12+this.handMove,16,16);
			if(this.name === "Divine Being"){
				fill(255,250,230,this.fade);
			}
			else{
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			}
			arc(-11,12+this.handMove,16,16,-140,40);
			arc(11,12+this.handMove,16,16,-220,-40);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			if(this.name === "Divine Being"){
				stroke(190,195,200,this.fade);
			}
			else{
				stroke(120,130,130,this.fade);
			}
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Divine Being"){
				noFill();
				stroke(255,245,205,this.fade);
				ellipse(0,-15,22,8);
				fill(245,235,220,this.fade);
				noStroke();
				rotate(-15);
				beginShape();
				vertex(-6,-14);
				bezierVertex(-10,-15,-13,-19,-14,-22);
				bezierVertex(-14,-18,-12,-14,-11,-10);
				endShape();
				rotate(30);
				beginShape();
				vertex(6,-14);
				bezierVertex(10,-15,13,-19,14,-22);
				bezierVertex(14,-18,12,-14,11,-10);
				endShape();
				rotate(-15);
			}
		break;
		case "Fallen Guardian": case "Nuclear Guardian": case "Divine Guardian":
			rotate(this.extraSpin);
			translate(-12,18+this.handMove);
			rotate(this.handSpin);
			if(this.name === "Divine Guardian"){
				stroke(255,this.fade);
			}
			else{
				stroke(250,120,180,this.fade);
			}
			strokeWeight(2);
			line(32,4,34,-4);
			line(28,4,30,-4);
			if(this.name === "Divine Guardian"){
				stroke(180,150,60,this.fade);
			}
			else{
				stroke(10,20,30,this.fade);
			}
			strokeWeight(3);
			line(-7,0,38,0);
			if(this.name === "Divine Guardian"){
				stroke(255,this.fade);
			}
			else{
				stroke(250,120,180,this.fade);
			}
			strokeWeight(2);
			line(34,-4,36,4);
			line(30,-4,32,4);
			line(26,-4,28,4);
			noStroke();
			if(this.name === "Divine Guardian"){
				fill(255,250,220,this.fade);
			}
			else{
				fill(60,this.fade);
			}
			triangle(38,-6,38,6,52,0);
			if(this.name === "Nuclear Guardian"){
				fill(0,255,0,this.fade);
				triangle(45,-3,45,3,53,0);
			}
			rotate(-this.handSpin);
			translate(12,-18-this.handMove);
			fill(255,0,150,this.fade);
			ellipse(-12,5,6,6);
			ellipse(12,5,6,6);
			fill(255,150,150,this.fade*2/5);
			ellipse(-12,5,8,8);
			ellipse(12,5,8,8);
			ellipse(-12,5,10,10);
			ellipse(12,5,10,10);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			for(var j=5;j>0;j--){
				fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
				ellipse(0,0,30*j/5,30*j/5);
				ellipse(-12,15+this.handMove,16*j/5,16*j/5);
				ellipse(12,15,16*j/5,16*j/5);
			}
			if(this.name === "Divine Guardian"){
				stroke(255,255,220,this.fade);
			}
			else{
				stroke(0,this.fade);
			}
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Nuclear Guardian"){
				stroke(0,255,0,this.fade);
			}
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			if(this.name === "Divine Guardian"){
				fill(175,175,160,this.fade);
			}
			else{
				fill(5,10,15,this.fade);
			}
			triangle(-12,3,-20,-3,-16,-7);
			triangle(12,3,20,-3,16,-7);
			arc(0,0,32,32,-200,20);
			quad(-20,15+this.handMove,-4,15+this.handMove,-5,12+this.handMove,-19,12+this.handMove);
			quad(-20,16+this.handMove,-4,16+this.handMove,-5,19+this.handMove,-19,19+this.handMove);
			quad(20,15,4,15,5,12,19,12);
			quad(20,16,4,16,5,19,19,19);
			rect(-15,14+this.handMove,6,3);
			rect(9,14,6,3);
			rect(-13,18+this.handMove,2,4);
			rect(11,18,2,4);
			rotate(-this.extraSpin);
		break;
		case "Fallen Soul": case "Awakened Soul":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade/5);
			for(var j=0;j<4;j++){
				ellipse(0,0,32+j*2,32+j*2);
				ellipse(-16,this.handMove+10,18+j*2,18+j*2);
			}
			rotate((sin(this.rate*4))*20);
			for(j=0;j<4;j++){
				ellipse(18,0,18+j*2);
			}
			rotate((sin(this.rate*4))*-20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			if(this.name === "Awakened Soul"){
				stroke(0,this.fade);
			}
			else{
				stroke(50,this.fade);
			}
			strokeWeight(3);
			line(-16,this.handMove+10,-16,this.handMove+20);
			noStroke();
			if(this.name === "Awakened Soul"){
				fill(255,this.fade);
			}
			else{
				fill(80,this.fade);
			}
			triangle(-20,this.handMove+20,-12,this.handMove+20,-16,this.handMove+34);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-16,this.handMove+10,16,16);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			noFill();
			stroke(this.color[0],this.color[1],this.color[2],this.fade);
			strokeWeight(5);
			arc(-10,-18,8,20,95,160);
			arc(10,-18,8,20,20,85);
			if(this.name === "Awakened Soul"){
				stroke(255,this.fade);
			}
			else{
				stroke(0,this.fade);
			}
			strokeWeight(6);
			line(-8,5,-4,7);
			line(8,5,4,7);
			if(this.name === "Awakened Soul"){
				stroke(0,this.fade);
			}
			else{
				stroke(225,25,150,this.fade);
			}
			strokeWeight(2);
			line(-8,5,-4,7);
			line(8,5,4,7);
			rotate(-this.extraSpin);
		break;
		case "Gold Guard":
			rotate(this.extraSpin);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(3);
			noFill();
			if(this.life>=this.maxLife*3/4){
				line(-25,16,20,16);
				arc(-25,16,16,8,-90,90);
			}
			else{
				line(-18,this.handMove-20,-18,25+this.handMove);
				arc(-18,25+this.handMove,8,16,-180,0);
			}
			noStroke();
			fill(230,this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			for(var j=5;j>0;j--){
				fill(this.color[0]*(1.125-j*0.05),this.color[1]*(1.125-j*0.05),this.color[2]*(1.125-j*0.05),this.fade);
				if(this.life>=this.maxLife*3/4){
					ellipse(-7,16,16*j/5,16*j/5);
					ellipse(7,16,16*j/5,16*j/5);
				}
				else{
					ellipse(-18,this.handMove,16*j/5,16*j/5);
					rotate((sin(this.rate*4))*20);
					ellipse(18,0,16*j/5,16*j/5);
					rotate((sin(this.rate*4))*-20);
				}
			}
			fill(230,this.fade);
			if(this.life>=this.maxLife*3/4){
				quad(15,14,-1,14,1,10,13,10);
				quad(-15,14,1,14,-1,10,-13,10);
			}
			else{
				quad(-16,this.handMove-8,-16,this.handMove+8,-12,this.handMove+6,-12,this.handMove-6);
				rotate((sin(this.rate*4))*20);
				quad(16,-8,16,8,12,6,12,-6);
				rotate((sin(this.rate*4))*-20);
			}
			for(j=5;j>0;j--){
				fill(this.color[0]*(1.125-j*0.05),this.color[1]*(1.125-j*0.05),this.color[2]*(1.125-j*0.05),this.fade);
				ellipse(0,0,30*j/5,30*j/5);
			}
			stroke(255,this.fade);
			strokeWeight(3);
			point(-5,2);
			point(5,2);
			strokeWeight(2);
			line(-5,9,5,9);
			stroke(255,this.fade/3);
			strokeWeight(5);
			point(-5,2);
			point(5,2);
			strokeWeight(4);
			line(-5,9,5,9);
			strokeWeight(7);
			point(-5,2);
			point(5,2);
			strokeWeight(6);
			line(-5,9,5,9);
			rotate(-this.extraSpin);
		break;
		case "Vindicator": case "Firewall":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade/5);
			for(var j=0;j<4;j++){
				ellipse(0,0,31+j,31+j);
			}
			rotate(this.handSpin);
			for(j=0;j<4;j++){
				ellipse(-6+this.handMoveX,18+this.handMoveY,17+j,17+j);
			}
			rotate(-this.handSpin);
			if(this.shield<=0){
				rotate((sin(this.rate*4))*20);
				for(j=0;j<4;j++){
					ellipse(18,0,17+j,17+j);
				}
				rotate((sin(this.rate*4))*-20);
			}
			else{
				for(j=0;j<4;j++){
					ellipse(0,18,17+j,17+j);
				}
			}
			if(this.name === "Firewall"){
				fill(45,30,5,this.fade);
				quad(-10,0,10,0,13,-19,-13,-19);
				fill(62,42,7,this.fade);
			}
			else{
				fill(30,5,45,this.fade);
				quad(-10,0,10,0,13,-19,-13,-19);
				fill(42,7,63,this.fade);
			}
			quad(-8,0,8,0,11,-17,-11,-17);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate(this.handSpin);
			if(this.name === "Firewall"){
				stroke(45,35,25,this.fade);
			}
			else{
				stroke(35,25,45,this.fade);
			}
			strokeWeight(3);
			translate(-6+this.handMoveX,36+this.handMoveY+this.hammerMove);
			rotate(this.hammerSpin);
			line(0,-18,0,0);
			noStroke();
			if(this.name === "Firewall"){
				fill(160,140,120,this.fade);
				rect(-8,0,16,12,2);
				fill(130,110,90,this.fade);
				rect(-7,1,14,10,1);
				stroke(115,95,75,this.fade);
			}
			else{
				fill(140,120,160,this.fade);
				rect(-8,0,16,12,2);
				fill(110,90,130,this.fade);
				rect(-7,1,14,10,1);
				stroke(95,75,115,this.fade);
			}
			strokeWeight(1.5);
			line(-5,3,5,9);
			line(5,3,-5,9);
			rotate(-this.hammerSpin);
			translate(6-this.handMoveX,-36-this.handMoveY-this.hammerMove);
			noStroke();
			fill(8,this.fade);
			ellipse(-6+this.handMoveX,18+this.handMoveY,16,16);
			rotate(-this.handSpin);
			if(this.shield<=0){
				rotate((sin(this.rate*4))*20);
				ellipse(18,0,16,16);
				rotate((sin(this.rate*4))*-20);
			}
			else{
				ellipse(0,18,16,16);
			}
			fill(20,this.fade);
			rotate(this.handSpin);
			rect(-14+this.handMoveX,16+this.handMoveY,16,4);
			rotate(-this.handSpin);
			if(this.shield<=0){
				rotate((sin(this.rate*4))*20);
				rect(16,-8,4,16);
				rotate((sin(this.rate*4))*-20);
			}
			else{
				rect(-8,16,16,4);
			}
			rotate(this.handSpin);
			if(this.name === "Firewall"){
				fill(180,120,20,this.fade);
			}
			else{
				fill(180,20,120,this.fade);
			}
			quad(-8+this.handMoveX,18+this.handMoveY,-6+this.handMoveX,16+this.handMoveY,-4+this.handMoveX,18+this.handMoveY,-6+this.handMoveX,20+this.handMoveY);
			rotate(-this.handSpin);
			if(this.shield<=0){
				rotate((sin(this.rate*4))*20);
				quad(16,0,18,-2,20,0,18,2);
				rotate((sin(this.rate*4))*-20);
			}
			else if(this.name === "Firewall"){
				quad(0,16,-2,18,0,20,2,18);
				fill(80,50,20,this.fade);
				triangle(-15,25.5,-15,28.5,-18,27);
				triangle(15,25.5,15,28.5,18,27);
				fill(20,16,12,this.fade);
				rect(-16,24,32,6,2);
				fill(180,120,20,this.fade);
				rect(-14,26,28,2,1);
			}
			else{
				quad(0,16,-2,18,0,20,2,18);
				fill(80,20,50,this.fade);
				triangle(-15,25.5,-15,28.5,-18,27);
				triangle(15,25.5,15,28.5,18,27);
				fill(16,12,20,this.fade);
				rect(-16,24,32,6,2);
				fill(180,20,120,this.fade);
				rect(-14,26,28,2,1);
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			triangle(0,11,0,-8,-20,-9);
			triangle(0,11,0,-8,20,-9);
			triangle(0,12,0,-9,-16,-15);
			triangle(0,12,0,-9,16,-15);
			triangle(-3,14,3,-12,-9,-20);
			triangle(3,14,-3,-12,9,-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(6);
			line(-8,5,-4,7);
			line(8,5,4,7);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(3);
			line(-8,5,-4,7);
			line(8,5,4,7);
			stroke(this.color2[0]*4/5,this.color2[1]*4/5,this.color2[2]*4/5,this.fade);
			strokeWeight(2);
			line(-8,5,-4,7);
			line(8,5,4,7);
			rotate(-this.extraSpin);
		break;
		case "Molten": case "Molten Titan": case "Acidic": case "Molten Commander": case "Waterflame": case "Symmetryte": case "Scorcher": case "Plasma Hero":
			noStroke();
			if(this.name === "Symmetryte"){
				fill(60,60,100,this.fade);
				for(k=0;k<8;k++){
					rotate(45);
					triangle(-3,-14,3,-14,0,-18);
				}
			}
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			if(this.name === "Molten Titan"||this.name === "Scorcher"){
				rotate(this.handSpin);
			}
			ellipse(-18,0,16,16);
			if(this.name === "Molten Titan"||this.name === "Scorcher"){
				rotate(-this.handSpin);
			}
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			if(this.name === "Molten"||this.name === "Acidic"||this.name === "Waterflame"||this.name === "Symmetryte"||this.name === "Plasma Hero"){
				if(this.name === "Acidic"){
					stroke(200,255,200,this.fade);
				}
				else if(this.name === "Waterflame"){
					stroke(230,255,255,this.fade);
				}
				else if(this.name === "Symmetryte"){
					fill(20,30,55,this.fade);
					rotate((sin(this.rate*4))*20);
					rect(-20,-8,4,16);
					rotate((sin(this.rate*4))*-20);
					stroke(0,150,255,this.fade);
				}
				else if(this.name === "Plasma Hero"){
					stroke(255,150,255,this.fade);
				}
				else{
					stroke(255,180,125,this.fade);
				}
				strokeWeight(3);
				arc(0,9,12,3,-170,-10);
				strokeWeight(4);
				point(-5,2);
				point(5,2);
				strokeWeight(2);
				line(-3,1,-7,-1);
				line(3,1,7,-1);
			}
			else{
				fill(255,180,125,this.fade);
				arc(-5,2,7,7,35,205);
				arc(5,2,7,7,-35,155);
			}
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(3);
			rotate((sin(this.rate*4))*20);
			if(this.name === "Molten"){
				line(-18,-7,-18,7);
			}
			else if(this.name === "Molten Titan"){
				rotate(this.handSpin);
				line(-20,-6.5,-20,6.5);
				line(-16,-6.5,-16,6.5);
				rotate(-this.handSpin);
				line(20,-6.5,20,6.5);
				line(16,-6.5,16,6.5);
			}
			else if(this.name === "Scorcher"){
				rotate(this.handSpin);
				line(-18,-7,-18,7);
				rotate(-this.handSpin);
				line(18,-7,18,7);
			}
			rotate((sin(this.rate*4))*-20);
			if(this.name === "Molten Commander"){
				noStroke();
				fill(0,60,0,this.fade);
				rect(-14,-15,28,10,2);
				arc(0,-6,24,10,0,180);
				fill(255,235,0,this.fade);
				ellipse(0,-8,6,6);
			}
		break;
		case "Void Reaver": case "Nuclear Void Reaver":
			noStroke();
			if(this.name === "Nuclear Void Reaver"){
				for(var j in this.shocks){
					fill(0,255,0,this.fade*this.shocks[j][2]/255);
					rotate(this.shocks[j][0]);
					triangle(-3,0,3,0,0,this.shocks[j][1]*0.75);
					rotate(-this.shocks[j][0]);
				}
			}
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handSpin);
			ellipse(-18,0,16,16);
			rotate(-this.handSpin);
			ellipse(18,0,16,16);
			rotate(this.handSpin);
			fill(25,this.armorFade/255*this.fade);
			arc(-18,0,17,17,-90,90);
			rotate(-this.handSpin);
			arc(18,0,17,17,-270,-90);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(2);
			point(-5,3);
			point(5,3);
			point(-6,7);
			point(6,7);
			point(-5,11);
			point(5,11);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade*2/5);
			strokeWeight(3);
			point(-5,3);
			point(5,3);
			point(-6,7);
			point(6,7);
			point(-5,11);
			point(5,11);
			strokeWeight(4);
			point(-5,3);
			point(5,3);
			point(-6,7);
			point(6,7);
			point(-5,11);
			point(5,11);
			noStroke();
			fill(30,this.armorFade/255*this.fade);
			ellipse(0,0,31,31);
			if(this.name === "Nuclear Void Reaver"){
				stroke(15,60,15,this.armorFade/255*this.fade);
			}
			else{
				stroke(15,this.armorFade/255*this.fade);
			}
			strokeWeight(3.5);
			point(-5,3);
			point(5,3);
			point(-6,7);
			point(6,7);
			point(-5,11);
			point(5,11);
		break;
		case "Mutated": case "Transgressor":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-19,0,18,18);
			ellipse(22,0,22,22);
			if(this.name === "Transgressor"){
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				rect(-20,-9,2,18);
				rect(21,-11,2,22);
				rect(18,-11,2,22);
				rect(24,-11,2,22);
				fill(this.color[0],this.color[1],this.color[2],this.fade);
			}
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Mutated"){
				stroke(50,this.fade);
				strokeWeight(1.5);
				rotate((sin(this.rate*4))*20);
				ellipse(-18,-2,4,4);
				ellipse(-18,2,4,4);
				ellipse(-17,-6,4,4);
				ellipse(-17,6,4,4);
				scale(1.2);
				ellipse(18,-2,4,4);
				ellipse(18,2,4,4);
				ellipse(17,-6,4,4);
				ellipse(17,6,4,4);
				scale(1/1.2);
				rotate((sin(this.rate*4))*-20);
			}
		break;
		case "Evolved Boss":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-19,0,16,16);
			ellipse(19,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(255,105,0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			stroke(50,this.fade);
			strokeWeight(1.5);
			rotate((sin(this.rate*4))*20);
			ellipse(-16,0,4,4);
			ellipse(-15,-4,4,4);
			ellipse(-15,4,4,4);
			ellipse(16,0,4,4);
			ellipse(15,-4,4,4);
			ellipse(15,4,4,4);
			rotate((sin(this.rate*4))*-20);
		break;
		case "Void Shadow":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(4);
			point(-6,7);
			point(6,7);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade*2/5);
			strokeWeight(6);
			point(-6,7);
			point(6,7);
			strokeWeight(8);
			point(-6,7);
			point(6,7);
		break;
		case "Amalgamation": case "Unholy Amalgamation":
			stroke(220,this.fade);
			strokeWeight(4);
			rotate((sin(this.rate*4))*15);
			line(-22,0,-24,10);
			line(22,0,32,-5);
			rotate((sin(this.rate*4))*-15);
			line(0,-10,-6,-16);
			line(-3,10,0,17);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*15);
			ellipse(-22,0,16,16);
			ellipse(22,0,16,16);
			rotate((sin(this.rate*4))*-15);
			rect(-18,-10,36,20,8);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Gravekeeper":
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			noStroke();
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate(this.handSpin);
			stroke(120,60,0,this.fade);
			strokeWeight(3);
			line(-6+this.handMoveX,18+this.handMoveY,-6+this.handMoveX,40+this.handMoveY);
			noStroke();
			fill(200,this.fade);
			arc(-6+this.handMoveX,40+this.handMoveY,12,24,0,180);
			fill(190,this.fade);
			arc(-6+this.handMoveX,40+this.handMoveY,4,24,0,180);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-6+this.handMoveX,18+this.handMoveY,16,16);
			rotate(-this.handSpin);
			noStroke();
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(245,0,0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(0,0,32,32,-195,15);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,18,18);
			rotate((sin(this.rate*4))*-20);
			rotate(this.handSpin);
			ellipse(-6+this.handMoveX,18+this.handMoveY,18,18);
			rotate(-this.handSpin);
		break;
		case "Splatter":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			scale(1/2);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			arc(0,9,12,3,-170,-10);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			scale(2);
		break;
		case "Giant Boss": case "Giant":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			stroke(255,this.fade/4);
			strokeWeight(2);
			ellipse(6,((sin(this.rate*4))*-9),12,12);
			ellipse(-6,((sin(this.rate*4))*9),12,12);
			noStroke();
			rotate(-30);
			translate(0,-15);
			for(var j=8;j>0;j--){
				fill(j*30,120+j*15,120+j*15,this.fade);
				rect(-9*j/8,-2*j/8,9*j/8+j,3*j/8);
				triangle(6-j,-4*j/8,6-j,4*j/8,18*j/8,0);
			}
			translate(0,15);
			rotate(30);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			if(this.name === "Giant"){
				rotate(-max(abs(this.time%600-300)-210,0));
			}
			ellipse(-18,0,16,16);
			if(this.name === "Giant"){
				rotate(max(abs(this.time%600-300)-210,0));
			}
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			stroke(255,this.fade/4);
			strokeWeight(2);
			rotate((sin(this.rate*4))*20);
			if(this.name === "Giant"){
				rotate(-max(abs(this.time%600-300)-210,0));
			}
			ellipse(-18,0,14,14);
			if(this.name === "Giant"){
				rotate(max(abs(this.time%600-300)-210,0));
			}
			ellipse(18,0,14,14);
			rotate((sin(this.rate*4))*-20);
			noStroke();
			ellipse(0,0,30,30);
			stroke(255,this.fade/4);
			strokeWeight(2);
			ellipse(0,0,28,28);
			noStroke();
			stroke(this.color[0]*3/4,this.color[1]*3/4,this.color[2]*3/4,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Jaxe": case "Expired Jaxe": case "Minion Jaxe":
			rotate(this.extraSpin);
			noStroke();
			fill(40,this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate(this.handSpin);
			if(this.name === "Jaxe"){
				fill(200,this.fade);
			}
			else{
				fill(100,this.fade);
			}
			arc(-6+this.handMoveX,45+this.handMoveY,25,25,-45,45);
			arc(-6+this.handMoveX,45+this.handMoveY,25,25,135,225);
			stroke(120,60,0,this.fade);
			strokeWeight(4);
			line(-6+this.handMoveX,18+this.handMoveY,-6+this.handMoveX,48+this.handMoveY);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-6+this.handMoveX,18+this.handMoveY,16,16);
			fill(40,this.fade);
			rect(-14+this.handMoveX,16+this.handMoveY,16,4);
			rotate(-this.handSpin);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(18,0,16,16);
			fill(40,this.fade);
			rect(16,-8,4,16);
			rotate((sin(this.rate*4))*-20);
			stroke(140,90,40,this.fade);
			strokeWeight(3);
			line(0,-15,0,-18);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,0,30,30);
			fill(255,255,30,this.fade);
			arc(-5,2,7,7,30,210);
			arc(5,2,7,7,-30,150);
			arc(0,9,11,8,0,180);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			triangle(-3.5,8,-0.5,8,-2,11.5);
			triangle(3.5,8,0.5,8,2,11.5);
			rotate(-this.extraSpin);
		break;
		case "Developer":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(0,50,0,this.fade);
			ellipse(6,((sin(this.rate*4))*-9),12,12);
			ellipse(-6,((sin(this.rate*4))*9),12,12);
			fill(40,this.fade);
			triangle(0,14,7,16,7,12);
			triangle(0,14,-7,16,-7,12);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			rotate(this.handSpin);
			ellipse(-18,0,16,16);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(-18,0,17,17,-90,90);
			triangle(-18,0,-18,-8.5,-19,-8.5);
			triangle(-18,0,-18,8.5,-19,8.5);
			rotate(-this.handSpin);
			arc(18,0,17,17,90,270);
			triangle(18,0,18,-8.5,19,-8.5);
			triangle(18,0,18,8.5,19,8.5);
			rotate((sin(this.rate*4))*-20);
			fill(50,this.fade);
			ellipse(-13,0,14,14);
			ellipse(13,0,14,14);
			stroke(50,this.fade);
			strokeWeight(2);
			noFill();
			arc(0,0,33,32,-180,0);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			rect(-8,3,6,6,1);
			rect(2,3,6,6,1);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(2);
			noFill();
			arc(0,-3,34,12,10,170);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(3);
			line(-15,-11,15,-11);
			quad(-10,-11,10,-11,7,-16,-7,-16);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(2);
			line(8,-17,-8,-17);
			line(8,-17,11,-11);
			line(-8,-17,-11,-11);
			stroke(50,this.fade);
			strokeWeight(2);
			line(-16,-2,-16,2);
			line(16,-2,16,2);
			fill(60,this.fade);
			noStroke();
			arc(-15,0,3,5,90,270);
			arc(15,0,3,5,-90,90);
		break;
		case "L": case "M": case "B": case "Unavailable": case "D": case "Unavailable Boss": case "Astroeaus Borealis":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			if(this.name === "Astroeaus Borealis"){
				fill(255,255,185,this.fade);
				triangle(-21,0,-15,0,-18,-15);
				triangle(-21,0,-15,0,-18,15);
				triangle(-18,-3,-18,3,-33,0);
				triangle(21,0,15,0,18,-15);
				triangle(21,0,15,0,18,15);
				triangle(18,-3,18,3,33,0);
			}
			if(this.name === "Unavailable"||this.name === "Unavailable Boss"){
				fill(135,30,35,this.fade);
			}
			else{
				fill(210,this.fade);
			}
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(3);
			arc(0,9,12,3,-170,-10);
			strokeWeight(4);
			point(-5,2);
			if(this.name === "Astroeaus Borealis"){
				stroke(255,255,180,this.fade);
			}
			point(5,2);
			if(this.name === "Unavailable"||this.name === "Unavailable Boss"){
				fill(125,20,25,this.fade);
			}
			else{
				fill(210,this.fade);
			}
			noStroke();
			arc(-10,0,11,24,90,270);
			arc(10,0,11,24,-90,90);
		break;
		case "Removed": case "Invalid":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(4);
			line(-7,-7,7,7);
			line(-7,7,7,-7);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade/3);
			strokeWeight(7);
			line(-7,-7,7,7);
			line(-7,7,7,-7);
			stroke(255,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			stroke(255,this.fade/3);
			strokeWeight(6);
			line(-5,9,5,9);
			strokeWeight(7);
			point(-5,2);
			point(5,2);
		break;
		case "Feature":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			ellipse(-18,0,16,16);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(-18,0,17,17,-90,90);
			triangle(-18,0,-18,-8.5,-19,-8.5);
			triangle(-18,0,-18,8.5,-19,8.5);
			arc(18,0,17,17,90,270);
			triangle(18,0,18,-8.5,19,-8.5);
			triangle(18,0,18,8.5,19,8.5);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			noStroke();
			arc(-10,0,11,24,90,270);
			arc(10,0,11,24,-90,90);
		break;
		case "Charge":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(255,113,112,this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			fill(70,this.fade);
			noStroke();
			rotate((sin(this.rate*4))*20);
			quad(19,-8,19,8,22,7,22,-7);
			quad(-17,-8,-17,8,-14,7,-14,-7);
			rotate((sin(this.rate*4))*-20);
		break;
		case "Sword Boss":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			if((this.gotSword||this.handSpin !== 0)&&this.swordFly<=600){
				rotate(this.handSpin);
				if(this.gotSword){
					translate(this.handMove,0);
					rotate(this.swordSpin);
					fill(200,this.fade);
					triangle(-2.5,11+this.swordFly,2.5,11+this.swordFly,0,27+this.swordFly);
					stroke(160,145,0,this.fade);
					strokeWeight(3);
					line(-3,10+this.swordFly,3,10+this.swordFly);
					line(0,10+this.swordFly,0,5+this.swordFly);
					noStroke();
					fill(this.color[0],this.color[1],this.color[2],this.fade);
					rotate(-this.swordSpin);
					translate(-this.handMove,0);
				}
				ellipse(this.handMove,0,16,16);
				rotate(-this.handSpin);
			}
			if(!this.gotSword&&this.swordFly === 0){
				translate(23,-23);
				rotate(45);
				fill(200,this.fade);
				triangle(-2.5,11,2.5,11,0,27);
				stroke(160,145,0,this.fade);
				strokeWeight(3);
				line(-3,10,3,10);
				line(0,10,0,5);
				noStroke();
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				rotate(-45);
				translate(-23,23);
			}
			rotate((sin(this.rate*4))*20);
			if(!this.gotSword&&this.handSpin === 0||this.swordFly>600){
				ellipse(-19,0,16,16);
			}
			ellipse(19,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(100,200,255,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(-this.extraSpin);
		break;
		case "Y":
			scale(0.6+sin(this.rate*8)*0.4,1);
			noStroke();
			fill(0,this.fade);
			rotate(20);
			ellipse(-7,-4,11,10);
			rotate(-40);
			ellipse(7,-4,11,10);
			rotate(20);
			fill(255,this.fade);
			rotate(20);
			ellipse(-7,-4,9,8);
			rotate(-40);
			ellipse(7,-4,9,8);
			rotate(20);
			stroke(0,155,255,this.fade);
			strokeWeight(2);
			point(-8,-7);
			point(-6,-9);
			point(8,-7);
			point(6,-9);
			strokeWeight(0.8);
			line(-8,-7,0,-4);
			line(-6,-9,0,-4);
			line(8,-7,0,-4);
			line(6,-9,0,-4);
			noStroke();
			fill(0,this.fade);
			rotate(20);
			ellipse(-4,4,14,20);
			rotate(-40);
			ellipse(4,4,14,20);
			rotate(20);
			fill(255,this.fade);
			rotate(20);
			ellipse(-4,4,12,18);
			rotate(-40);
			ellipse(4,4,12,18);
			rotate(20);
			stroke(255,220,0,this.fade);
			strokeWeight(3);
			point(-5,6);
			point(-6,2);
			point(-5,-2);
			point(5,6);
			point(6,2);
			point(5,-2);
			strokeWeight(1);
			line(-5,6,0,-4);
			line(-6,2,0,-4);
			line(-5,-2,0,-4);
			line(5,6,0,-4);
			line(6,2,0,-4);
			line(5,-2,0,-4);
			fill(0,155,255,this.fade);
			noStroke();
			rotate(20);
			arc(-4,10,9,6,0,180);
			rotate(-40);
			arc(4,10,9,6,0,180);
			rotate(20);
			scale(1/(0.6+sin(this.rate*8)*0.4),1);
		break;
		case "Bruh": case "Glass":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*4/5);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade*7/8);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			if(this.name === "Bruh"){
				stroke(60,205,250,this.fade);
			}
			else{
				stroke(255,this.fade);
			}
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Dodgeable": case "Precision": case "Accuracy": case "Ascent": case "Nachtflügel": case "Sanctity": case "Complexity":
			if(this.name === "Accuracy"||this.name === "Ascent"||this.name === "Sanctity"||this.name === "Complexity"){
				noFill();
				strokeWeight(5);
				stroke(this.color[0],this.color[1],this.color[2],this.fade);
				arc(-13,-22,12,36,95,160);
				arc(13,-22,12,36,20,85);
			}
			else if(this.name === "Nachtflügel"){
				noFill();
				strokeWeight(5);
				stroke(this.color[0],this.color[1],this.color[2],this.fade);
				arc(0,-20,100,40,25,155);
				arc(0,-30,60,60,20,160);
				arc(0,-40,40,80,10,170);
			}
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*5))*50);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*5))*-50);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,0,30,30);
			noStroke();
			fill(this.color2[0]*5/4,this.color2[1]*5/4,this.color2[2]*5/4,this.fade);
			rotate(45);
			ellipse(0,0,8,2.5);
			ellipse(-7,0,2.5,8);
			ellipse(7,0,2.5,8);
			ellipse(0,7,2.5,8);
			ellipse(0,-7,2.5,8);
			ellipse(-7,-7,8,2.5);
			ellipse(7,-7,8,2.5);
			ellipse(-7,7,8,2.5);
			ellipse(7,7,8,2.5);
			arc(14,0,8,2.5,90,270);
			arc(-14,0,8,2.5,-90,90);
			ellipse(0,14,8,2.5);
			ellipse(0,-14,8,2.5);
			rotate(-45);
			stroke(this.color[0]*3/5,this.color[1]*3/5,this.color[2]*3/5,this.fade);
			if(this.name === "Nachtflügel"){
				stroke(255,this.fade);
			}
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Undodgeable":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade*(255-(this.time*15%255))/255);
			ellipse(0,0,(this.time*15%255)/6+20,(this.time*15%255)/6+20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			triangle(-9,0,9,0,0,-25);
			triangle(-9,1,9,-1,-7,-24);
			triangle(9,1,-9,-1,7,-24);
			triangle(-9,2,9,-2,-13,-22);
			triangle(9,2,-9,-2,13,-22);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0]*4/5,this.color[1]*4/5,this.color[2]*4/5,this.fade);
			scale(0.85);
			triangle(-9,0,9,0,0,-25);
			triangle(-9,1,9,-1,-7,-24);
			triangle(9,1,-9,-1,7,-24);
			triangle(-9,2,9,-2,-13,-22);
			triangle(9,2,-9,-2,13,-22);
			scale(1/0.85);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,0,30,30);
			noStroke();
			fill(this.color2[0]*5/4,this.color2[1]*5/4,this.color2[2]*5/4,this.fade);
			rotate((sin(this.rate*4))*20);
			quad(-20,-8,-20,8,-22,7,-22,-7);
			quad(20,-8,20,8,22,7,22,-7);
			quad(-16,-8,-16,8,-14,7,-14,-7);
			quad(16,-8,16,8,14,7,14,-7);
			rotate((sin(this.rate*4))*-20);
			rotate(45);
			ellipse(0,0,8,2.5);
			ellipse(-7,0,2.5,8);
			ellipse(7,0,2.5,8);
			ellipse(0,7,2.5,8);
			ellipse(0,-7,2.5,8);
			ellipse(-7,-7,8,2.5);
			ellipse(7,-7,8,2.5);
			ellipse(-7,7,8,2.5);
			ellipse(7,7,8,2.5);
			arc(14,0,8,2.5,90,270);
			arc(-14,0,8,2.5,-90,90);
			ellipse(0,14,8,2.5);
			ellipse(0,-14,8,2.5);
			rotate(-45);
			stroke(this.color[0]*3/5,this.color[1]*3/5,this.color[2]*3/5,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(2);
			line(-3,0.5,-6.5,-1.25);
			line(3,0.5,6.5,-1.25);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Mega Slow":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(this.color[0]*7/8,this.color[1]*7/8,this.color[2]*7/8,this.fade*this.life/this.maxLife);
			rotate(45);
			ellipse(-13,13,8,2.5);
			ellipse(13,-13,8,2.5);
			ellipse(-6,13,2.5,8);
			ellipse(-20,13,2.5,8);
			ellipse(6,-13,2.5,8);
			ellipse(20,-13,2.5,8);
			arc(-13,6,2.5,8,0,180);
			arc(-13,20,2.5,8,-180,0);
			arc(13,-6,2.5,8,-180,0);
			arc(13,-20,2.5,8,0,180);
			rotate(-45);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(-17,0,18,18,-90,90);
			arc(17,0,18,18,-270,-90);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			ellipse(8,-12,9,9);
			ellipse(3,-13,7,7);
			ellipse(11,-9,6,6);
			fill(this.color[0]*7/8,this.color[1]*7/8,this.color[2]*7/8,this.fade*this.life/this.maxLife);
			rotate(45);
			ellipse(0,0,8,2.5);
			ellipse(-7,0,2.5,8);
			ellipse(7,0,2.5,8);
			ellipse(0,7,2.5,8);
			ellipse(0,-7,2.5,8);
			ellipse(-7,-7,8,2.5);
			ellipse(7,-7,8,2.5);
			ellipse(-7,7,8,2.5);
			ellipse(7,7,8,2.5);
			arc(14,0,8,2.5,90,270);
			arc(-14,0,8,2.5,-90,90);
			ellipse(0,14,8,2.5);
			ellipse(0,-14,8,2.5);
			rotate(-45);
			stroke(20,60,20,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Ruined Boss":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20+this.handSpin);
			ellipse(-18+this.handMove,0,16,16);
			rotate(-this.handSpin);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(240,130,240,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(1.5);
			stroke(120,this.fade);
			rotate((sin(this.rate*4))*20+this.handSpin);
			ellipse(-17.5+this.handMove,0,3,3);
			ellipse(-17+this.handMove,-3,3,3);
			ellipse(-17+this.handMove,3,3,3);
			ellipse(-16+this.handMove,-6,3,3);
			ellipse(-16+this.handMove,6,3,3);
			rotate(-this.handSpin);
			ellipse(20,0,3,3);
			ellipse(20.5,-3,3,3);
			ellipse(20.5,3,3,3);
			ellipse(21,-6,3,3);
			ellipse(21,6,3,3);
			rotate((sin(this.rate*4))*-20+55);
			for(var j=0;j<10;j++){
				ellipse(-13+j*3,2-pow(abs((5-j))*2,2)/25,3,3);
			}
			rotate(-55-this.extraSpin);
		break;
		case "Raider": case "Energized Raider":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			if(this.name === "Raider"){
				stroke(255,100,0,this.fade);
			}
			else{
				fill(186,208,170,this.fade/5);
				noStroke();
				ellipse(0,0,32,32);
				ellipse(0,0,34,34);
				ellipse(0,0,36,36);
				stroke(186,208,170,this.fade);
			}
			strokeWeight(5);
			line(1,10,1,22);
			stroke(40,this.fade);
			line(-1,10,-1,21);
			line(3,10,3,21);		
			noStroke();
			fill(180,160,0,this.fade);
			rect(-4,18,10,2);
			rect(-4,14,10,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			ellipse(-8,16,16,16);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			fill(60,this.fade);
			arc(18,0,16,16,-90,90);
			rotate((sin(this.rate*4))*-20);
			arc(-8,16,16,16,0,180);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			rotate(-this.extraSpin);
		break;
		case "Controlled":
			stroke(200,this.fade*5-1000);
			strokeWeight(this.shrike/10);
			rotate(this.randomSpin);
			for(j=0;j<7;j++){
				rotate(360/7);
				line(0,0,0,this.shrike);
			}
			rotate(-this.randomSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			ellipse(-18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(255,125+sin(this.time*5)*40,0,this.fade);
			strokeWeight(4);
			point(-5,2);
			stroke(255,125+sin(this.time*5)*-40,0,this.fade);
			point(5,2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			noStroke();
			rotate((sin(this.rate*4))*20);
			quad(-19,-8,-19,8,-22,7,-22,-7);
			quad(19,-8,19,8,22,7,22,-7);
			rotate((sin(this.rate*4))*-20);
		break;
		case "Energy":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade/5);
			for(var j=0;j<4;j++){
				ellipse(6,((sin(this.rate*4))*-9),16+j*2,16+j*2);
				ellipse(-6,((sin(this.rate*4))*9),16+j*2,16+j*2);
			}
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade/5);
			for(j=0;j<4;j++){
				ellipse(0,0,32+j*2,32+j*2);
			}
			rotate((sin(this.rate*4))*20);
			for(j=0;j<4;j++){
				ellipse(-18,0,18+j*2,18+j*2);
				ellipse(18,0,18+j*2,18+j*2);
			}
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			ellipse(-18,0,16,16);
			fill(this.color[0]*7/8,this.color[1]*7/8,this.color[2]*7/8,this.fade);
			rect(-20,-8,4,16);
			rect(16,-8,4,16);
			rotate((sin(this.rate*4))*-20);
			stroke(150,255,150,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Mummy": case "Undead": case "Strong Mummy":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			ellipse(-18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			if(this.name === "Mummy"||this.name === "Strong Mummy"){
				point(5,2);
			}
			strokeWeight(2);
			fill(200,0,0,this.fade);
			arc(0,10.5,7,9,-180,0);
			line(-3.5,10.5,3.5,10.5);
			if(this.name === "Mummy"||this.name === "Strong Mummy"){
				if(this.name === "Mummy"){
					stroke(255,min(this.fade,this.bandageFade));
				}
				else{
					stroke(100,min(this.fade,this.bandageFade));
				}
				rotate((sin(this.rate*4))*20);
				line(-21,-7,-15,7);
				line(-16,-7,-21,7);
				line(23,-6,16,7);
				line(15,-7,20,7);
				rotate((sin(this.rate*4))*-20);
				strokeWeight(3);
				line(-13,-4,3,14);
				line(7,-13,-10,11);
				line(-1,-14,12,8);
			}
			else{
				strokeWeight(1.5);
				line(3,0,7,4);
				line(3,4,7,0);
			}
		break;
		case "Buried":
			if(this.burying>0){
				scale(this.burying);
				noStroke();
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				ellipse(6,((sin(this.rate*4))*-9),14,14);
				ellipse(-6,((sin(this.rate*4))*9),14,14);
				stroke(220,this.fade);
				strokeWeight(2);
				rotate((sin(this.rate*4))*20);
				line(-18,0,-16,10);
				line(-18,0,-27,-4);
				line(18,0,23,-9);
				line(18,0,25,8);
				rotate((sin(this.rate*4))*-20);
				line(0,0,-5,-16);
				line(0,0,8,15);
				noStroke();
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				ellipse(0,0,30,30);
				rotate((sin(this.rate*4))*20);
				ellipse(18,0,16,16);
				ellipse(-18,0,16,16);
				rotate((sin(this.rate*4))*-20);
				stroke(0,this.fade);
				strokeWeight(4);
				point(-5,2);
				point(5,2);
				strokeWeight(2);
				fill(200,0,0,this.fade);
				arc(0,10.5,7,9,-180,0);
				line(-3.5,10.5,3.5,10.5);
				scale(1/this.burying);
			}
		break;
		case "Hallow Bones":
			scale(1.15);
			stroke(this.color[0],this.color[1],this.color[2],this.fade);
			strokeWeight(6);
			line(0,0,7,((sin(this.rate*4))*-10));
			line(0,0,-7,((sin(this.rate*4))*10));
			rotate((sin(this.rate*4))*20);
			line(0,0,15,0);
			line(0,0,-15,0);
			rotate((sin(this.rate*4))*-20);
			strokeWeight(18);
			point(0,0);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(4);
			point(-4,2);
			point(4,2);
			scale(1/1.15);
		break;
		case "Slimy": case "Goo":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade/3);
			ellipse(6,((sin(this.rate*4))*-9),18,18);
			ellipse(-6,((sin(this.rate*4))*9),18,18);
			fill(this.color[0],this.color[1],this.color[2],this.fade/3);
			ellipse(0,0,34,34);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,20,20);
			ellipse(-18,0,20,20);
			rotate((sin(this.rate*4))*-20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			ellipse(-18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			stroke(0,235,0,this.fade);
			strokeWeight(4);
			if(this.name === "Slimy"){
				point(-5,2);
				point(5,2);
			}
			else{
				point(0,2);
			}
		break;
		case "Ghost": case "Wraith": case "Ghost Knight":
			noStroke();
			if(this.name === "Ghost Knight"){
				fill(70,70,70,this.fade);
				rotate((sin(this.rate*4))*20);
				rect(-26,2,4,16,2);
				rect(-28,16,8,8);
				rotate((sin(this.rate*4))*-20);
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade/3);
			ellipse(8,-20.5,14,14);
			ellipse(-8,-20.5,14,14);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*8);
			ellipse(22,-6,16,16);
			if(this.name === "Ghost Knight"){
				ellipse(-24,0,16,16);
			}
			else{
				ellipse(-22,-6,16,16);
			}
			rotate((sin(this.rate*4))*-8);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade/3);
			strokeWeight(3);
			line(-5,10,5,10);
			strokeWeight(4);
			point(-5,4);
			point(5,4);
			if(this.name === "Wraith"){
				fill(60,this.fade);
				stroke(60,this.fade);
				strokeWeight(2);
				rect(-3,-9,6,6);
				line(-3,-3,-15,0);
				line(3,-3,15,0);
				noStroke();
				fill(0,this.fade);
				ellipse(0,-6,3,3);
			}
			else if(this.name === "Ghost Knight"){
				fill(60,65,75,this.fade);
				noStroke();
				arc(0,-2,-32,-32,-180,0);
				ellipse(0,-2,8,6);
			}
		break;
		case "Ducky":
			rotate(this.extraSpin);
			scale(3/4);
			noStroke();
			fill(80,this.fade);
			rect(-25,0,4,24,1);
			rect(-20.5,0,4,24,1);
			rect(21,0,4,24,1);
			rect(16.5,0,4,24,1);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(8,((sin(this.rate*4))*-12),18,18);
			ellipse(-8,((sin(this.rate*4))*12),18,18);
			ellipse(0,0,40,40);
			ellipse(-20,3,32,18);
			ellipse(20,3,32,18);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,10,30,16);
			stroke(0,this.fade);
			strokeWeight(3);
			arc(0,8,36,4,5,175);
			line(-5,5,-5,6);
			line(5,5,5,6);
			strokeWeight(5);
			point(-7,-1);
			point(7,-1);
			scale(4/3);
			rotate(-this.extraSpin);
		break;
		case "Necromancer 2":
			rotate(this.handMove);
			stroke(120,70,20,this.fade);
			strokeWeight(3);
			line(-18,0,-18,25);
			stroke(161+sin(this.rate*15)*30,159+sin(this.rate*15)*30,140+sin(this.rate*15)*30,this.fade);
			strokeWeight(8);
			point(-18,25);
			rotate(-this.handMove);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20+this.handMove);
			ellipse(-18,0,16,16);
			rotate(-this.handMove);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			stroke(0,255,0,this.fade);
			point(-5,2);
			point(5,2);
			fill(100,this.fade);
			noStroke();
			rotate((sin(this.rate*4))*20);
			quad(19,-8,19,8,22,7,22,-7);
			rotate((sin(this.rate*4))*-20+this.handMove);
			quad(-17,-8,-17,8,-14,7,-14,-7);
			rotate(-this.handMove);
			stroke(180,120,60,this.fade);
			strokeWeight(3);
			line(-10,-13,10,-13);
			line(0,-13,0,-20);
			line(-5,-13,-6,-20);
			line(5,-13,6,-20);
			line(-10,-13,-12,-19);
			line(10,-13,12,-19);
		break;
		case "Lead":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),15,15);
			ellipse(-6,((sin(this.rate*4))*9),15,15);
			ellipse(0,0,31,31);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,17,17);
			ellipse(18,0,17,17);
			rotate((sin(this.rate*4))*-20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			rotate(45);
			ellipse(0,0,8,2.5);
			ellipse(-7,0,2.5,8);
			ellipse(7,0,2.5,8);
			ellipse(0,7,2.5,8);
			ellipse(0,-7,2.5,8);
			ellipse(-7,-7,8,2.5);
			ellipse(7,-7,8,2.5);
			ellipse(-7,7,8,2.5);
			ellipse(7,7,8,2.5);
			arc(14,0,8,2.5,90,270);
			arc(-14,0,8,2.5,-90,90);
			ellipse(0,14,8,2.5);
			ellipse(0,-14,8,2.5);
			rotate((sin(this.rate*4))*20);
			ellipse(-13,13,8,2.5);
			ellipse(13,-13,8,2.5);
			ellipse(-6,13,2.5,8);
			ellipse(-20,13,2.5,8);
			ellipse(6,-13,2.5,8);
			ellipse(20,-13,2.5,8);
			arc(-13,6,2.5,8,0,180);
			arc(-13,20,2.5,8,-180,0);
			arc(13,-6,2.5,8,-180,0);
			arc(13,-20,2.5,8,0,180);
			rotate((sin(this.rate*4))*-20-45);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Demon":
			stroke(90,0,0,this.fade);
			strokeWeight(4);
			noFill();
			scale(0.7);
			arc(-15,-20,16,40,95,160);
			arc(-13,-22,12,36,95,160);
			arc(-11,-24,8,32,95,160);
			arc(15,-20,16,40,20,85);
			arc(13,-22,12,36,20,85);
			arc(11,-24,8,32,20,85);
			scale(1/0.7);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(47,this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			stroke(0,this.fade);
			arc(0,9,12,3,-170,-10);
			strokeWeight(2);
			line(-3,1,-7,-1);
			line(3,1,7,-1);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Great Guard":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			translate(-23,-23);
			rotate(-45);
			fill(200,this.fade);
			triangle(-2.5,11,2.5,11,0,27);
			stroke(160,145,0,this.fade);
			strokeWeight(3);
			line(-3,10,3,10);
			line(0,10,0,5);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate(45);
			translate(23,23);
			rotate((sin(this.rate*4))*20);
			ellipse(-19,0,16,16);
			ellipse(19,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(100,200,255,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Golden":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			for(var j=5;j>0;j--){
				fill(this.color[0]*(1.125-j*0.05),this.color[1]*(1.125-j*0.05),this.color[2]*(1.125-j*0.05),this.fade);
				rotate((sin(this.rate*4))*20);
				ellipse(-18,0,16*j/5,16*j/5);
				ellipse(18,0,16*j/5,16*j/5);
				rotate((sin(this.rate*4))*-20);
			}
			for(j=5;j>0;j--){
				fill(this.color[0]*(1.125-j*0.05),this.color[1]*(1.125-j*0.05),this.color[2]*(1.125-j*0.05),this.fade);
				ellipse(0,0,30*j/5,30*j/5);
			}
		break;
		case "Explosive": case "Blammer": case "Big Blammer":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			ellipse(-10,14,16,16);
			ellipse(10,14,16,16);
			fill(0,this.fade);
			if(this.name === "Big Blammer"){
				ellipse(0,32,30,30);
			}
			else{
				ellipse(0,28,22,22);
			}
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(1);
			if(this.name === "Big Blammer"){
				line(0,36,0,48);
			}
			else{
				line(0,28,0,40);
			}
		break;
		case "Double Blammer":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(0,this.fade);
			ellipse(-32,0,30,30);
			ellipse(32,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(1);
			line(-36,0,-48,0);
			line(36,0,48,0);
		break;
		case "Miserable":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			quad(-20,-8,-20,8,-23,6,-23,-6);
			quad(-19,-8,-19,8,-16,7,-16,-7);
			quad(20,-8,20,8,23,6,23,-6);
			quad(19,-8,19,8,16,7,16,-7);
			rotate((sin(this.rate*4))*-20);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			arc(0,0,32,32,-210,30);
			triangle(-12,3,-20,-3,-16,-7);
			triangle(12,3,20,-3,16,-7);
			fill(this.color2[0]*4/3,this.color2[1]*4/3,this.color2[2]*4/3,this.fade);
			rotate(45);
			ellipse(0,0,8,2.5);
			ellipse(-7,0,2.5,8);
			ellipse(0,-7,2.5,8);
			ellipse(-7,-7,8,2.5);
			ellipse(7,-7,8,2.5);
			ellipse(-7,7,8,2.5);
			arc(-14,0,8,2.5,-90,90);
			ellipse(0,-14,8,2.5);
			rotate(-45);
		break;
		case "Dark Necromancer":
			rotate((sin(this.rate*4))*20);
			noFill();
			stroke(42,42,40,this.fade);
			strokeWeight(3+sin(this.rate*3)*0.5);
			line(-18,-10,-18,18);
			arc(-18,25,8,14,-180,0);
			stroke(193,0,133,this.fade);
			strokeWeight(5);
			point(-18,25);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(-18,0,18,18,-90,90);
			arc(18,0,18,18,90,270);
			fill(193,0,133,this.fade);
			rect(-20,-9,2,18);
			rect(18,-9,2,18);
			noFill();
			stroke(50,this.fade);
			strokeWeight(1.5);
			ellipse(-21,-2,4,4);
			ellipse(-21,2,4,4);
			ellipse(-22,-6,4,4);
			ellipse(-22,6,4,4);
			ellipse(21,-2,4,4);
			ellipse(21,2,4,4);
			ellipse(22,-6,4,4);
			ellipse(22,6,4,4);
			rotate((sin(this.rate*4))*-20);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(29,59,71,this.fade);
			ellipse(0,0,30,30);
			fill(this.color2[0]*7/8,this.color2[1]*7/8,this.color2[2]*7/8,this.fade);
			arc(0,0,32,32,-210,30);
			triangle(-12,3,-20,-3,-16,-7);
			triangle(12,3,20,-3,16,-7);
			noFill();
			stroke(50,this.fade);
			strokeWeight(1.5);
			rotate(55);
			for(j=0;j<7;j++){
				ellipse(-13.5+j*4.1,2-pow(abs((3.5-j))*2,2)/25,4,4);
			}
			rotate(-55);
		break;
		case "Starship": case "Dreadnought":
			scale(1/4);
			stroke(90,this.fade);
			strokeWeight(5);
			fill(140,this.fade);
			quad(0,-90,-75,-55,0,150,75,-55);
			quad(0,-75,-60,-45,0,120,60,-45);
			line(40,40,47.5,42.5);
			line(-40,40,-47.5,42.5);
			line(45,25,52.5,27.5);
			line(-45,25,-52.5,27.5);
			line(47.5,42.5,52.5,27.5);
			line(-47.5,42.5,-52.5,27.5);
			strokeWeight(3);
			ellipse(-35,-35,40,40);
			ellipse(-25,10,36,36);
			ellipse(35,-35,40,40);
			ellipse(25,10,36,36);
			ellipse(-35,-35,20,20);
			ellipse(-25,10,18,18);
			ellipse(35,-35,20,20);
			ellipse(25,10,18,18);
			line(0,150,0,155);
			line(-75,-55,-75,-50);
			line(75,-55,75,-50);
			strokeWeight(1);
			line(0,155,0,158);
			line(-75,-50,-75,-47);
			line(75,-50,75,-47);
			strokeWeight(3.5);
			line(-25,-52,-35,-52);
			line(-25,-47,-35,-47);
			line(-25,-34,-35,-34);
			line(-25,-39,-35,-39);
			line(25,-52,35,-52);
			line(25,-47,35,-47);
			line(25,-34,35,-34);
			line(25,-39,35,-39);
			strokeWeight(4);
			rect(-25,-60,50,35);
			strokeWeight(2);
			ellipse(-12,-42.5,10,10);
			ellipse(12,-42.5,10,10);
			line(-3,-42.5,3,-42.5);
			ellipse(0,-8,10,10);
			ellipse(0,55,10,10);
			ellipse(-15,35,10,10);
			ellipse(15,35,10,10);
			ellipse(0,80,8,8);
			ellipse(0,20,8,8);
			line(-2,-4,-2,2);
			line(2,-4,2,2);
			line(-2,59,-2,65);
			line(2,59,2,65);
			line(-17,39,-17,45);
			line(-13,39,-13,45);
			line(17,39,17,45);
			line(13,39,13,45);
			line(-14,-38,-14,-34);
			line(-10,-38,-10,-34);
			line(14,-38,14,-34);
			line(10,-38,10,-34);
			line(0,84,0,90);
			line(0,24,0,30);
			fill(255,this.fade);
			noStroke();
			rect(-10,-33,20,10);
			scale(4);
		break;
		case "Lord Boss":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color2[0]*2,this.color2[1]*2,this.color2[2]*2,this.fade);
			quad(-10,0,10,0,13,-19,-13,-19);
			fill(this.color2[0]*3,this.color2[1]*3,this.color2[2]*3,this.fade);
			quad(-8,0,8,0,11,-17,-11,-17);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			rotate(this.handSpin);
			ellipse(18,0,16,16);
			rotate(-this.handSpin);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(-18,0,18,18,-90,90);
			rotate(this.handSpin);
			arc(18,0,18,18,90,270);
			rotate(-this.handSpin);
			fill(this.color[0]*3/4,this.color[1]*3/4,this.color[2]*3/4,this.fade);
			arc(-16,0,18,18,-90,90);
			rotate(this.handSpin);
			arc(16,0,18,18,90,270);
			rotate(-this.handSpin);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(255,100,100,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(this.color[0]/2,this.color[1]/2,this.color[2]/2,this.fade);
			rect(-14,-10,28,4);
			rect(-14,-13,6,3);
			rect(-3,-13,6,3);
			rect(8,-13,6,3);
		break;
		case "Fallen Tank":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			for(var j=5;j>0;j--){
				fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
				ellipse(0,0,30*j/5,30*j/5);
				rotate((sin(this.rate*4))*20+this.handSpin);
				ellipse(-21,0,22*j/5,22*j/5);
				ellipse(21,0,22*j/5,22*j/5);
				rotate((sin(this.rate*4))*-20-this.handSpin);
			}
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Golden Tank":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handSpin);
			for(var j=5;j>0;j--){
				fill(this.color[0]*(1.125-j*0.05),this.color[1]*(1.125-j*0.05),this.color[2]*(1.125-j*0.05),this.fade);
				ellipse(-21,0,22*j/5,22*j/5);
				ellipse(21,0,22*j/5,22*j/5);
			}
			rotate((sin(this.rate*4))*-20-this.handSpin);
			for(j=5;j>0;j--){
				fill(this.color[0]*(1.125-j*0.05),this.color[1]*(1.125-j*0.05),this.color[2]*(1.125-j*0.05),this.fade);
				ellipse(0,0,30*j/5,30*j/5);
			}
		break;
		case "Lunar Tank":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(60,this.fade);
			rect(-3,11,6,6);
			fill(0,this.fade);
			ellipse(0,14,3,3);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20+this.handSpin);
			ellipse(-21,0,22,22);
			ellipse(21,0,22,22);
			fill(40,this.fade);
			rect(-23.5,-11,5,22,2);
			rect(18.5,-11,5,22,2);
			rotate((sin(this.rate*4))*-20-this.handSpin);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Fallen Princess":
			noStroke();
			rotate(this.handSpin+this.completeSpin);
			translate(-18+this.handMoveX,this.handMoveY);
			rotate(this.pointSpin);
			fill(193,0,133,this.fade/2);
			triangle(3,9,-3,9,0,50);
			fill(40,this.fade);
			rect(-4,5,8,4,2);
			fill(200,this.fade);
			triangle(2,9,-2,9,0,44);
			rotate(-this.pointSpin);
			translate(18-this.handMoveX,-this.handMoveY);
			rotate(-this.handSpin);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(0,50,100,this.fade);
			ellipse(-5,9,13,13);
			ellipse(5,9,13,13);
			ellipse(-7,14,3,3);
			ellipse(7,14,3,3);
			fill(155,255,255,this.fade*this.armorFade3/255);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.armorFade/255);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(25,this.fade*this.armorFade/255);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(255,this.fade*this.armorFade2/255);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			for(j=5;j>0;j--){
				fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
				rotate(this.handSpin);
				ellipse(-18+this.handMoveX,this.handMoveY,16*j/5,16*j/5);
				rotate((sin(this.rate*4))*20-this.handSpin);
				ellipse(18,0,16*j/5,16*j/5);
				rotate((sin(this.rate*4))*-20);
			}
			fill(10,this.fade*this.armorFade/255);
			rotate(this.handSpin);
			arc(-18+this.handMoveX,-1+this.handMoveY,18,18,-180+this.pointSpin,this.pointSpin);
			rotate((sin(this.rate*4))*20-this.handSpin);
			arc(17,0,18,18,90,270);
			rotate((sin(this.rate*4))*-20);
			fill(255,this.fade*this.armorFade2/255);
			rotate(this.handSpin);
			arc(-18+this.handMoveX,-1+this.handMoveY,16,16,-180+this.pointSpin,this.pointSpin);
			rotate((sin(this.rate*4))*20-this.handSpin);
			arc(17,0,16,16,90,270);
			rotate((sin(this.rate*4))*-20);
			fill(193,0,133,this.fade*this.armorFade/255);
			rotate(this.handSpin);
			translate(-18+this.handMoveX,this.handMoveY);
			rotate(this.pointSpin);
			rect(-9,-1,18,1);
			rotate(-this.pointSpin);
			translate(18-this.handMoveX,-this.handMoveY);
			rotate((sin(this.rate*4))*20-this.handSpin);
			rect(17,-9,1,18);
			rotate((sin(this.rate*4))*-20);
			fill(193,0,133,this.fade*this.armorFade/255);
			triangle(0,15,-4,16,-7,10);
			triangle(0,15,4,16,7,10);
			for(j=5;j>0;j--){
				fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
				ellipse(0,0,30*j/5,30*j/5);
			}
			stroke(this.eyeColor[0],this.eyeColor[1],this.eyeColor[2],this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			noStroke();
			fill(193,0,133,this.fade*this.armorFade/255);
			arc(0,1,30,30,-200,20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.armorFade/255);
			arc(0,0,32,32,-200,20);
			triangle(-12,3,-20,-3,-16,-7);
			triangle(12,3,20,-3,16,-7);
			fill(193,0,133,this.fade*this.armorFade/255);
			arc(0,0,20,20,-180,0);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.armorFade/255);
			arc(0,0,17,17,-200,0);
			arc(0,0,20,20,-155,-145);
			arc(0,0,20,20,-35,-25);
			fill(0,30,45,this.fade*this.armorFade/255);
			rect(-14,-13,28,5,1);
			rect(-14,-16,6,7,1);
			rect(-3,-16,6,7,1);
			rect(8,-16,6,7,1);
			fill(0,36,54,this.fade*this.armorFade/255);
			rect(-13,-12,26,3,1);
			rect(-13,-15,4,5,1);
			rect(-2,-15,4,5,1);
			rect(9,-15,4,5,1);
			fill(0,42,63,this.fade*this.armorFade/255);
			rect(-12,-11,24,1);
			rect(-12,-14,2,3);
			rect(-1,-14,2,3);
			rect(10,-14,2,3);
			fill(0,this.fade*this.armorFade4/255);
			rect(-12,8,24,8);
			rotate(-this.completeSpin);
		break;
		case "Fallen Supplier": case "Armored Fallen":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			if(this.name === "Armored Fallen"||this.dropped){
				rotate((sin(this.rate*4))*20);
				ellipse(-18,0,16,16);
				ellipse(18,0,16,16);
				rotate((sin(this.rate*4))*-20);
			}
			else{
				ellipse(-10,14,16,16);
				ellipse(10,14,16,16);
			}
			for(var j=5;j>0;j--){
				fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
				ellipse(0,0,30*j/5,30*j/5);
			}
			if(this.name === "Fallen Supplier"&&!this.dropped){
				fill(255,this.fade);
				rect(-14,21,28,16,2);
			}
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Fallen Energy": case "Ancient Energy":
			rotate(this.time*5);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade*3/4);
			beginShape();
			for(var j=0;j<6;j++){
				vertex(sin(j*60)*(24+sin(this.time*10)*4),cos(j*60)*(24+sin(this.time*10)*4));
				vertex(sin(j*60+30)*12,cos(j*60+30)*12);
			}
			endShape();
			rotate(this.time*-5);
		break;
		case "Fallen Mage":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(25,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			for(var j=5;j>0;j--){
				fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
				rotate((sin(this.rate*4))*20-this.handSpin);
				ellipse(-18,0,16*j/5,16*j/5);
				rotate(this.handSpin);
				ellipse(18,0,16*j/5,16*j/5);
				rotate((sin(this.rate*4))*-20);
			}
			fill(10,this.fade);
			rotate((sin(this.rate*4))*20-this.handSpin);
			arc(-17,0,18,18,-90,90);
			rotate(this.handSpin);
			arc(17,0,18,18,90,270);
			rotate((sin(this.rate*4))*-20);
			fill(193,0,133,this.fade);
			rotate((sin(this.rate*4))*20-this.handSpin);
			rect(-18,-9,1,18);
			rotate(this.handSpin);
			rect(17,-9,1,18);
			rotate((sin(this.rate*4))*-20);
			for(j=5;j>0;j--){
				fill(this.color[0]*(1.5-j*0.2),this.color[1]*(1.5-j*0.2),this.color[2]*(1.5-j*0.2),this.fade);
				ellipse(0,0,30*j/5,30*j/5);
			}
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			noStroke();
			fill(193,0,133,this.fade);
			arc(0,1,30,30,-200,20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(0,0,32,32,-200,20);
			triangle(-12,3,-20,-3,-16,-7);
			triangle(12,3,20,-3,16,-7);
		break;
		case "Mossy": case "Mossy Hero":
			noStroke();
			if(this.name === "Mossy Hero"){
				fill(this.color[0]*4/3,this.color[1]*4/3,this.color[2]*4/3,this.fade);
				ellipse(6,((sin(this.rate*4))*-9),16,16);
				ellipse(-6,((sin(this.rate*4))*9),16,16);
				rotate((sin(this.rate*4))*20);
				ellipse(-18,0,18,18);
				ellipse(18,0,18,18);
				rotate((sin(this.rate*4))*-20);
				ellipse(0,0,32,32);
			}
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(0,this.fade);
			arc(0,5,20,16,0,180);
			stroke(255,125,0,this.fade);
			strokeWeight(4);
			point(-5,9);
			point(5,9);
		break;
		case "Flying Ducky":
			rotate(180);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			noStroke();
			ellipse(0,-32,24,36);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,-20,40,40);
			ellipse(0,5,20,30);
			ellipse(-10,22+sin(this.rate*5)*2,18,18);
			ellipse(10,22+sin(this.rate*5)*2,18,18);
			translate(0,3);
			rotate(sin(this.rate*5)*20);
			ellipse(-10,0,30,16);
			rotate(sin(this.rate*5)*-40);
			ellipse(10,0,30,16);
			rotate(sin(this.rate*5)*20);
			stroke(0,this.fade);
			strokeWeight(2);
			line(-4,-45,-4,-48);
			line(4,-45,4,-48);
			strokeWeight(5);
			point(-7,-36);
			point(7,-36);
			translate(0,-3);
			rotate(-180);
		break;
		case "Fairy": case "Supreme Executor":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade/2);
			rotate(sin(this.rate*5)*15+20);
			ellipse(-12,0,11,7);
			rotate(sin(this.rate*5)*-30+140);
			ellipse(-12,0,11,7);
			rotate(sin(this.rate*5)*15-160);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,15,15);
			fill(this.color[0],this.color[1],this.color[2],this.fade/6);
			for(j=0;j<5;j++){
				ellipse(0,0,18+j*3,18+j*3);
			}
		break;
		case "Adventurist": case "Button Man": case "Sharpshooter": case "Broderick": case "Normal.gs": case "Quick.gs": case "Hefty.gs": case "Hidden.gs":
			rotate(this.extraSpin);
			noStroke();
			if(this.name === "Button Man"){
				fill(95,90,85,this.fade);
				triangle(-4,14,4,14,0,16);
			}
			else if(this.name === "Sharpshooter"){
				fill(115,95,75,this.fade);
				triangle(-4,14,4,14,0,16);
			}
			else if(this.name === "Broderick"){
				fill(5,5,15,this.fade);
				triangle(-4,14,4,14,0,16);
			}
			fill(40,this.fade);
			rect(-8,22,5,10,2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(-6,17,16,16);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Adventurist"){
				arc(0,-5,40,10,15,165);
				fill(0,this.fade);
				noStroke();
				rect(-8,0,6,6,1);
				rect(2,0,6,6,1);
				rect(-14,16,16,3);
				stroke(160,120,40,this.fade);
				fill(160,120,40,this.fade);
				strokeWeight(4);
				line(-17,-6,17,-6);
				quad(-13,-6,13,-6,8,-15,-8,-15);
			}
			else{
				strokeWeight(4);
				point(-5,2);
				point(5,2);
				if(this.name === "Button Man"||this.name === "Sharpshooter"||this.name === "Broderick"){
					if(this.name === "Sharpshooter"){
						stroke(70,50,50,this.fade);
						fill(70,50,50,this.fade);
					}
					else if(this.name === "Broderick"){
						stroke(240,230,200,this.fade);
						fill(240,230,200,this.fade);
					}
					else{
						stroke(115,100,95,this.fade);
						fill(115,100,95,this.fade);
					}
					strokeWeight(4);
					line(-15,-11,15,-11);
					quad(-10,-11,10,-11,7,-16,-7,-16);
				}
				else if(this.name === "Hefty.gs"){
					stroke(50,this.fade);
					strokeWeight(1.5);
					ellipse(-8,18,4,4);
					ellipse(-4,18,4,4);
					ellipse(-12,17,4,4);
					ellipse(0,17,4,4);
					rotate((sin(this.rate*4))*20);
					ellipse(19,-2,4,4);
					ellipse(19,2,4,4);
					ellipse(18,-6,4,4);
					ellipse(18,6,4,4);
					rotate((sin(this.rate*4))*-20);
				}
			}
			rotate(-this.extraSpin);
		break;
		case "Moss, the Guardian":
			noStroke();
			fill(this.color[0]*9/10,this.color[1]*9/10,this.color[2]*9/10,this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.dress/255);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0]*19/20,this.color[1]*19/20,this.color[2]*19/20,this.fade);
			ellipse(-5,9,13,13);
			ellipse(5,9,13,13);
			ellipse(-7,14,3,3);
			ellipse(7,14,3,3);
			fill(125,255,125,this.fade*this.bra/255);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color2[0]*19/20,this.color2[1]*19/20,this.color2[2]*19/20,this.fade*this.dress/255);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			rotate(this.handMove);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20-this.handMove);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			noStroke();
			fill(this.color2[0]*4/5,this.color2[1]*4/5,this.color2[2]*4/5,this.fade);
			arc(0,0,32,32,-205,25);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			triangle(14.5,6.25,0,-4,-14.5,6.25);
			fill(0,this.fade*this.nudityCensor/255);
			rect(-12,8,24,8);
			stroke(0,255,0,this.fade);
			strokeWeight(4);
			point(-5,3);
			point(5,3);
		break;
		case "Red": case "Blue": case "Green": case "Yellow": case "Pink": case "Ceramic": case "Brick": case "Static": case "Orange": case "Cyan": case "Lime": case "Cream": case "Purple": case "Color Splash": case "Robot":
			noStroke();
			if(this.name === "Brick"&&this.lead){
				fill(115,this.fade);
			}
			else{
				fill(this.color[0],this.color[1],this.color[2],this.fade);
			}
			ellipse(0,0,30,30);
			noFill();
			if(this.name === "Ceramic"){
				stroke(155,86,33,this.fade);
				strokeWeight(3);
				arc(0,-24,40,40,55,125);
				ellipse(0,0,8,8);
				ellipse(0,-10,9,9);
				ellipse(0,10,9,9);
				ellipse(-10,0,9,9);
				ellipse(10,0,9,9);
				arc(0,24,40,40,-125,-55);
			}
			else if(this.name === "Robot"){
				fill(130,this.fade);
				ellipse(0,0,26,26);
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				ellipse(0,0,24,24);
				fill(0,this.fade);
				ellipse(0,0,18,18);
				fill(255,0,0,this.fade);
				ellipse(sin(this.target)*-4,cos(this.target)*4,8,8);
				noFill();
			}
			if(this.name !== "Brick"&&this.lead){
				stroke(140,this.fade);
				strokeWeight(2);
				ellipse(0,0,28,28);
				ellipse(0,0,14,28);
				line(0,-14,0,14);
			}
			if(this.name === "Color Splash"){
				fill(255,0,0,this.fade);
				ellipse(0,0,18,18);
				ellipse(6,-5,8,8);
				ellipse(-6,3,7,7);
				ellipse(3,7,6,6);
				stroke(this.color2[0],this.color2[1],this.color2[2],this.fade/3);
			}
			else if(this.name === "Brick"||this.name === "Static"){
				if(this.lead){
					stroke(50,this.fade);
				}
				else{
					stroke(255,170,170,this.fade);
				}
				strokeWeight(1.5);
				line(-13,-4,13,-4);
				line(-13,4,13,4);
				line(-7,-12,7,-12);
				line(-7,12,7,12);
				line(0,-14,0,-12);
				line(0,14,0,12);
				line(0,-4,0,4);
				line(-6,-4,-6,-12);
				line(-6,4,-6,12);
				line(6,-4,6,-12);
				line(6,4,6,12);
				line(-12,-4,-12,4);
				line(12,-4,12,4);
				stroke(this.color2[0],this.color2[1],this.color2[2],this.fade/3);
			}
			else{
				stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			}
			strokeWeight(4);
			arc(0,0,20,20,-160,-110);
			stroke(0,this.fade);
			if(this.name !== "Robot"){
				point(-5,2);
				point(5,2);
			}
			if(this.hidden){
				noStroke();
				fill(0,this.fade/6);
				ellipse(-6,-4,10,10);
				ellipse(7,-2,9,9);
				ellipse(-2,8,8,8);
			}
			else if(this.name === "Static"&&this.life>10){
				noStroke();
				fill(200,255,255,this.fade/3);
				ellipse(0,0,38,38);
				ellipse(0,0,42,42);
				fill(255,this.fade);
				triangle(0,-12,-4,1,1,3);
				triangle(0,12,4,-3,-1,-3);
			}
		break;
		case "Rainbow":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			arc(0,0,30,30,-60,0);
			fill(255,110,0,this.fade);
			arc(0,0,30,30,0,60);
			fill(245,245,0,this.fade);
			arc(0,0,30,30,60,120);
			fill(0,194,0,this.fade);
			arc(0,0,30,30,120,180);
			fill(0,159,255,this.fade);
			arc(0,0,30,30,180,240);
			fill(194,0,190,this.fade);
			arc(0,0,30,30,240,300);
			noFill();
			if(this.name !== "Brick"&&this.lead){
				stroke(140,this.fade);
				strokeWeight(2);
				ellipse(0,0,28,28);
				ellipse(0,0,14,28);
				line(0,-14,0,14);
			}
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade/3);
			strokeWeight(4);
			arc(0,0,20,20,-160,-110);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			if(this.hidden){
				noStroke();
				fill(0,this.fade/3);
				ellipse(-6,-4,10,10);
				ellipse(7,-2,9,9);
				ellipse(-2,8,8,8);
			}
		break;
		case "Mini MOAB": case "Shielded Mini MOAB":
			scale(10/9);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,16,24);
			triangle(0,-5,6,-14,-6,-14);
			fill(255,this.fade);
			arc(0,9,9,6,30,150);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			triangle(-4,11,4,11,0,9);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade/3);
			strokeWeight(1.5);
			noFill();
			arc(0,0,12,20,150,210);
			point(-2,-10);
			point(0,-10);
			point(-3,-8);
			point(-1,-8);
			point(1,-8);
			point(-2,-6);
			point(0,-6);
			ellipse(3,8,2,2);
			strokeWeight(1);
			arc(0,0,9,15,150,210);
			strokeWeight(0.5);
			line(5,-4,5,4);
			line(3.5,-2.5,3.5,2.5);
			line(6,-2.5,6,2.5);
			arc(0,0,6,10,150,210);
			line(2,8,0,8);
			line(2,7,1,7);
			line(2,9,1,9);
			line(3,-9,1,-4);
			scale(9/10);
			if(this.name === "Shielded Mini MOAB"&&this.shieldFade>0){
				stroke(175,this.fade*this.shieldFade/255);
				strokeWeight(2);
				fill(150,255,255,this.fade/4*this.shieldFade/255);
				ellipse(0,0,32,40);
			}
		break;
		case "BRC": case "Mega BRC": case "Shielded BRC":
			noStroke();
			if(this.name === "Mega BRC"){
				for(j=0;j<2;j++){
					fill(255,0,0,this.fade/5);
					ellipse(0,0,21+j,25+j);
				}
			}
			fill(this.color[0]*9/10,this.color[1]*9/10,this.color[2]*9/10,this.fade);
			triangle(-1.5,-11,-7,-8.5,-9,-15);
			triangle(1.5,-11,7,-8.5,9,-15);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,20,24);
			fill(255,0,0,this.fade);
			ellipse(0,1,13,13);
			rect(-2,-11.75,4,10);
			arc(0,-11.75,4,0.5,-180,0);
			rect(-9.7,-1,6,4);
			rect(3.7,-1,6,4);
			arc(-9.6,-1,1,8,90,180);
			arc(9.6,-1,1,8,0,90);
			rect(-2,0,4,11.75);
			arc(0,11.75,4,0.5,0,180);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,1,11,11);
			rect(-1,-12,2,10);
			rect(-10,0,6,2);
			rect(4,0,6,2);
			arc(-9.9,0,0.5,4,90,180);
			arc(9.9,0,0.5,4,0,90);
			rect(-1,0,2,12);
			fill(255,110,0,this.fade);
			ellipse(-5,7.6,3,3);
			fill(0,85,255,this.fade);
			ellipse(5,7.6,3,3);
			fill(230,0,230,this.fade);
			ellipse(-5.6,-5.5,3,3);
			fill(0,230,0,this.fade);
			ellipse(5.6,-5.5,3,3);
			fill(255,this.fade);
			ellipse(0,1,9,9);
			stroke(255,0,0,this.fade);
			strokeWeight(1);
			noFill();
			line(-3,0,3,0);
			arc(-1.5,0,3,5,0,180);
			arc(1.5,0,3,5,0,180);
			if(this.name === "Shielded BRC"&&this.shieldFade>0){
				stroke(175,this.fade*this.shieldFade/255);
				strokeWeight(2);
				fill(150,255,255,this.fade/4*this.shieldFade/255);
				ellipse(0,0,35,40);
			}
		break;
		case "LPZ":
			noFill();
			stroke(70,255,255,this.fade);
			strokeWeight(3);
			rotate(this.time*2);
			for(var j=0;j<4;j++){
				rotate(90);
				line(0,0,0,13);
				if((this.time*2+j*90)%360>45&&(this.time*2+j*90)%360<135){
					line(0,13,0,14);
				}
				if((this.time*2+j*90)%360>260&&(this.time*2+j*90)%360<280){
					line(0,13,0,15);
				}
			}
			rotate(this.time*-2);
			stroke(this.color[0],this.color[1],this.color[2],this.fade);
			strokeWeight(4);
			arc(0,-3,27,27,-180,0);
			arc(7,-3,13,26,0,75);
			arc(-7,-3,13,26,105,180);
			arc(16,21,32,26,-172,-120);
			arc(-16,21,32,26,-60,-8);
			noStroke();
			fill(70,255,255,this.fade);
			ellipse(0,0,13,13);
			stroke(255,this.fade);
			strokeWeight(1);
			ellipse(0,0,9,9);
			strokeWeight(2);
			point(-1.75,1.5);
			point(1.75,1.5);
			if(this.shieldFade>0){
				stroke(70,255,255,this.fade*this.shieldFade/255);
				strokeWeight(2);
				fill(150,255,255,this.fade/4*this.shieldFade/255);
				ellipse(0,0,42,46);
			}
		break;
		case "Annoying Balloon": case "Irritating Balloon": case "4 Letter Word Balloon":
			noStroke();
			if(this.name === "4 Letter Word Balloon"){
				for(j=0;j<3;j++){
					fill(0,255,255,this.fade/5);
					ellipse(0,0,32+j*2,32+j*2);
				}
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			if(this.name !== "Irritating Balloon"){
				ellipse(0,0,30,30);
			}
			else{
				for(k=0;k<2;k++){
					scale(-1,1);
					beginShape();
					vertex(0,-7.5);
					bezierVertex(-15,-22.5,-30,0,0,20);
					endShape();
				}
			}
			noFill();
			strokeWeight(2);
			stroke(0,this.fade);
			arc(-5,0,6,8,-150,-30);
			arc(5,0,6,8,-150,-30);
			arc(-5,0,12,14,-145,-95);
			arc(5,0,12,14,-85,-35);
			fill(255,this.fade);
			arc(0,4,12,10,0,180);
			line(-6,4,6,4);
			stroke(85,255,255,this.fade);
			strokeWeight(4);
			point(-9,1);
			point(9,1);
			noFill();
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade/4);
			strokeWeight(2);
			arc(0,0,20,20,-160,-110);
		break;
		case "Frustrating Balloon":
			scale(3/5);
			translate(0,-3);
			fill(175,175,0,this.fade);
			noStroke();
			beginShape();
			vertex(0,50);
			bezierVertex(-30,30,-26,-10,0,-40);
			bezierVertex(26,-10,30,30,0,50);
			endShape();
			fill(180,this.fade);
			beginShape();
			vertex(-13,32);
			bezierVertex(-15,33,-18,33,-20,20);
			vertex(20,20);
			bezierVertex(18,33,15,33,13,32);
			endShape();
			beginShape();
			vertex(-15,-18);
			bezierVertex(-17,-14,-18,-10,-19,-6);
			vertex(19,-6);
			bezierVertex(18,-10,17,-14,15,-18);
			endShape();
			fill(150,this.fade);
			beginShape();
			vertex(-18,28);
			bezierVertex(-18,27,-19,25,-19,24);
			vertex(19,24);
			bezierVertex(19,25,18,27,18,28);
			endShape();
			beginShape();
			vertex(-17,-14);
			bezierVertex(-17,-13,-18,-11,-18,-10);
			vertex(18,-10);
			bezierVertex(18,-11,17,-13,17,-14);
			endShape();
			fill(210,210,0,this.fade);
			ellipse(9,12,10,10);
			ellipse(-11,8,12,12);
			ellipse(0,1,9,9);
			ellipse(2,40,8,8);
			ellipse(-3,-25,11,11);
			fill(220,220,0,this.fade);
			ellipse(-9,14,9,9);
			ellipse(11,4,13,13);
			ellipse(0,2,10,10);
			ellipse(-3,42,6,6);
			ellipse(3,-22,10,10);
			fill(60,this.fade);
			triangle(-15,-15,-5,-32,-25,-35);
			triangle(15,-15,5,-32,25,-35);
			triangle(-20,0,-20,15,-35,0);
			triangle(20,0,20,15,35,0);
			translate(0,3);
			scale(5/3);
			noFill();
			strokeWeight(2);
			stroke(0,this.fade);
			arc(-5,0,6,8,-150,-30);
			arc(5,0,6,8,-150,-30);
			arc(-5,0,12,14,-145,-95);
			arc(5,0,12,14,-85,-35);
			fill(255,this.fade);
			arc(0,4,12,10,0,180);
			line(-6,4,6,4);
			stroke(85,255,255,this.fade);
			strokeWeight(4);
			point(-9,1);
			point(9,1);
			noFill();
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade/4);
			strokeWeight(2);
			arc(0,0,20,20,-160,-110);
		break;
		case "Big Rage Balloon":
			noStroke();
			for(j=0;j<3;j++){
				fill(255,0,0,this.fade/5);
				ellipse(0,0,32+j*2,32+j*2);
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			noFill();
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(4);
			arc(0,0,20,20,-160,-110);
			stroke(0,this.fade);
			point(-5,2);
			point(5,2);
			strokeWeight(2);
			arc(0,9,12,3,-170,-10);
			line(-3,1,-7,-1);
			line(3,1,7,-1);
		break;
		case "Magnemite":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(255,this.fade);
			ellipse(0,5,15,15);
			fill(0,this.fade);
			ellipse(0,6,3,3);
			noFill();
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(4);
			arc(-27,0,22,18,-90,90);
			arc(27,0,22,18,90,270);
			stroke(200,50,50,this.fade);
			point(-27,-9);
			point(27,9);
			stroke(50,200,200,this.fade);
			point(27,-9);
			point(-27,9);
		break;
		case "Cobalt Guard":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(60,50,70,this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			stroke(0,this.fade);
			strokeWeight(2.5);
			line(-7,2,-3,2);
			line(7,2,3,2);
		break;
		case "Cursed Guard":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(0,this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			stroke(255,60,255,this.fade);
			strokeWeight(2.5);
			line(-7,2,-3,2);
			line(7,2,3,2);
		break;
		case "Flare":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade/2);
			ellipse(0,0,36,36);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(230,180,240,this.fade);
			beginShape();
			for(k=0;k<6;k++){
				vertex(-18+sin(k*60)*16,cos(k*60)*16);
				vertex(-18+sin(k*60+30)*4,cos(k*60+30)*4);
			}
			endShape();
			beginShape();
			for(k=0;k<6;k++){
				vertex(18+sin(k*60)*16,cos(k*60)*16);
				vertex(18+sin(k*60+30)*4,cos(k*60+30)*4);
			}
			endShape();
			fill(30,0,40,this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Cursed Horse":
			noStroke();
			fill(30,this.fade);
			rect(-9,20,18,16,3);
			rect(-12,-24,24,48,4);
			rect(-14,((sin(this.rate*4))*-9)-18,6,6,2);
			rect(-14,((sin(this.rate*4))*-9)+12,6,6,2);
			rect(8,((sin(this.rate*4))*-9)-18,6,6,2);
			rect(8,((sin(this.rate*4))*-9)+12,6,6,2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			ellipse(-16,8,16,16);
			ellipse(16,8,16,16);
			ellipse(0,0,30,30);
			stroke(255,60,255,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(255,0,0,this.fade);
			point(-3,32);
			point(3,32);
		break;
		case "Lunar Shield":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(60,this.fade);
			rect(-3,11,6,6);
			fill(0,this.fade);
			ellipse(0,14,3,3);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			if(this.shield>0){
				ellipse(-12,14,16,16);
				ellipse(12,14,16,16);
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				rect(-21,20,42,8,2);
				fill(230,200,225,this.fade);
				rect(-18,22,36,4,2);
				fill(185,100,190,this.fade);
				rect(-9,23,18,2,1);
				fill(40,this.fade);
				rect(-20,12,16,4,2);
				rect(4,12,16,4,2);
			}
			else{
				rotate((sin(this.rate*4))*20);
				ellipse(-18,0,16,16);
				ellipse(18,0,16,16);
				fill(40,this.fade);
				rect(-20,-8,4,16,2);
				rect(16,-8,4,16,2);
				rotate((sin(this.rate*4))*-20);
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Lunar Servant":
			stroke(255,120,255,this.fade);
			strokeWeight(4);
			noFill();
			scale(0.7);
			arc(-13,-22,12,36,95,160);
			arc(13,-22,12,36,20,85);
			scale(1/0.7);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color2[0]+10,this.color2[1]+10,this.color2[2]+10,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(255,this.fade);
			stroke(255,235,235,this.fade);
			strokeWeight(1.5);
			beginShape();
			vertex(-12,-15);
			bezierVertex(-6,-5,6,-5,12,-15);
			bezierVertex(6,-10,-6,-10,-12,-15);
			bezierVertex(-6,-5,6,-5,12,-15);
			bezierVertex(6,-10,-6,-10,-12,-15);
			endShape();
			rotate((sin(this.rate*4))*20);
			translate(0,this.handMove);
			stroke(90,this.fade);
			strokeWeight(2);
			fill(135,this.fade/2);
			line(18,-10,18,30);
			line(18,30,15,27);
			line(18,30,21,27);
			ellipse(13,20,10,10);
			ellipse(23,20,10,10);
			fill(255,this.fade);
			stroke(255,235,235,this.fade);
			strokeWeight(1);
			beginShape();
			vertex(13,18);
			bezierVertex(14,19,14,21,13,22);
			bezierVertex(13.5,21,13.5,19,13,18);
			bezierVertex(14,19,14,21,13,22);
			bezierVertex(13.5,21,13.5,19,13,18);
			endShape();
			noFill();
			stroke(255,145,70,this.fade);
			ellipse(23,20,5,5);
			translate(23,20);
			for(k=0;k<8;k++){
				line(0,2.5,0,3.5);
				rotate(45);
			}
			translate(-23,-20);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(18,0,16,16);
			translate(0,-this.handMove);
			ellipse(-18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(255,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(255,this.fade);
			ellipse(0,-8,22,12);
		break;
		case "Moon Goddess":
			rotate(this.completeSpin);
			stroke(255,120,255,this.fade);
			strokeWeight(4);
			noFill();
			scale(0.7);
			arc(-13,-22,12,36,95,160);
			arc(13,-22,12,36,20,85);
			arc(-15,-20,16,40,95,160);
			arc(15,-20,16,40,20,85);
			scale(1/0.7);
			noStroke();
			fill(this.color[0]-20,this.color[1]-20,this.color[2]-20,this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.dress);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(250,200,210,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color2[0]+10,this.color2[1]+10,this.color2[2]+10,this.fade*this.dress);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(255,this.fade);
			stroke(255,235,235,this.fade);
			strokeWeight(1.5);
			beginShape();
			vertex(-12,-15);
			bezierVertex(-6,-5,6,-5,12,-15);
			bezierVertex(6,-10,-6,-10,-12,-15);
			bezierVertex(-6,-5,6,-5,12,-15);
			bezierVertex(6,-10,-6,-10,-12,-15);
			endShape();
			rotate((sin(this.rate*4))*20);
			translate(-this.armMove*18,this.handMove+this.armMove*18);
			stroke(90,this.fade);
			strokeWeight(2);
			fill(135,this.fade/2);
			line(18,-10,18,30);
			line(18,30,15,27);
			line(18,30,21,27);
			ellipse(13,20,10,10);
			ellipse(23,20,10,10);
			fill(255,this.fade);
			stroke(255,235,235,this.fade);
			strokeWeight(1);
			beginShape();
			vertex(13,18);
			bezierVertex(14,19,14,21,13,22);
			bezierVertex(13.5,21,13.5,19,13,18);
			bezierVertex(14,19,14,21,13,22);
			bezierVertex(13.5,21,13.5,19,13,18);
			endShape();
			noFill();
			stroke(255,145,70,this.fade);
			ellipse(23,20,5,5);
			translate(23,20);
			for(k=0;k<8;k++){
				line(0,2.5,0,3.5);
				rotate(45);
			}
			translate(-23,-20);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(18,0,16,16);
			translate(this.armMove*18,-this.handMove-this.armMove*18);
			ellipse(-18,0,16,16);
			fill(200,160,200,this.fade*this.dress);
			rect(-22,-7,2,14,2);
			rect(20-this.armMove*18,-7+this.handMove+this.armMove*18,2,14,2);
			rotate((sin(this.rate*4))*-20);
			fill(230,this.fade*this.dress);
			ellipse(0,14,6,6);
			ellipse(5,13,5,5);
			ellipse(-5,13,5,5);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(255,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(255,this.fade);
			ellipse(0,-8,22,12);
			rotate(-this.completeSpin);
		break;
		case "Glitched Giant":
			noStroke();
			fill(this.colors[0][0],this.colors[0][1],this.colors[0][2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			fill(this.colors[1][0],this.colors[1][1],this.colors[1][2],this.fade);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			stroke(255,this.fade/4);
			strokeWeight(2);
			noFill();
			ellipse(6,((sin(this.rate*4))*-9),12,12);
			ellipse(-6,((sin(this.rate*4))*9),12,12);
			noStroke();
			rotate(-30);
			translate(0,-15);
			for(var j=8;j>0;j--){
				fill(j*30,120+j*15,120+j*15,this.fade);
				rect(-9*j/8,-2*j/8,9*j/8+j,3*j/8);
				triangle(6-j,-4*j/8,6-j,4*j/8,18*j/8,0);
			}
			translate(0,15);
			rotate(30);
			fill(this.colors[2][0],this.colors[2][1],this.colors[2][2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			fill(this.colors[3][0],this.colors[3][1],this.colors[3][2],this.fade);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			stroke(255,this.fade/4);
			strokeWeight(2);
			noFill();
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,14,14);
			ellipse(18,0,14,14);
			rotate((sin(this.rate*4))*-20);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(255,this.fade/4);
			strokeWeight(2);
			ellipse(0,0,28,28);
			noStroke();
			stroke(this.color[0]*3/4,this.color[1]*3/4,this.color[2]*3/4,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Carrier Truck":
			scale(2/3);
			noStroke();
			fill(80,this.fade);
			rect(-20,-20,6,12,2);
			rect(-20,8,6,12,2);
			rect(14,-20,6,12,2);
			rect(14,8,6,12,2);
			fill(255,255,180,this.fade);
			rect(-13,27,8,6,2);
			rect(4,27,8,6,2);
			fill(255,255,180,this.fade/5);
			rect(-14,27,10,7,3);
			rect(3,27,10,7,3);
			rect(-15,27,12,8,4);
			rect(2,27,12,8,4);
			fill(120,this.fade);
			triangle(-9,30,-3,30,-6,38);
			triangle(3,30,-3,30,0,38);
			triangle(9,30,3,30,6,38);
			fill(100,125,125,this.fade);
			rect(-20,-30,40,60,4);
			fill(125,150,150,this.fade);
			rect(-19,-15,38,30,4);
			fill(40,this.fade);
			rect(-15,4,14,8,3);
			rect(1,4,14,8,3);
			stroke(40,this.fade);
			strokeWeight(5);
			point(10,-24);
			scale(1.5);
		break;
		case "Faded Summoner": case "Summoner": case "Descended Summoner":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			if(this.name === "Descended Summoner"){
				stroke(75,0,90,this.fade);
				strokeWeight(3);
				line(18,-10,18,20);
				line(18,20,9,22);
				stroke(255,170,255,this.fade);
				strokeWeight(7);
				point(9,22);
			}
			else{
				stroke(20,30,35,this.fade)
				strokeWeight(3);
				line(18,-10,18,20);
				line(18,20,9,22);
			}
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			if(this.name === "Descended Summoner"){
				fill(70,0,65,this.fade);
			}
			else if(this.name === "Summoner"){
				fill(200,200,185,this.fade);
			}
			else{
				fill(180,195,210,this.fade);
			}
			ellipse(-12,0,12,12);
			ellipse(12,0,12,12);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			if(this.name === "Descended Summoner"){
				fill(30,0,30,this.fade);
			}
			else if(this.name === "Summoner"){
				fill(40,45,45,this.fade);
			}
			else{
				fill(110,150,190,this.fade);
			}
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			if(this.name === "Descended Summoner"){
				stroke(215,75,225,this.fade);
			}
			else{
				stroke(0,this.fade);
			}
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Elite Raybeamer":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate(this.extraSpin);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(100,this.fade);
			rect(-2,24,4,8);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,18,16,16);
			ellipse(0,0,30,30);
			stroke(100,200,255,this.fade);
			strokeWeight(4);
			point(-5,6);
			point(5,6);
			point(0,-1);
			rotate(-this.extraSpin);
		break;
		case "Carrier Tank":
			scale(2/3);
			noStroke();
			fill(80,this.fade);
			rect(-29,-20,6,12,2);
			rect(-29,8,6,12,2);
			rect(23,-20,6,12,2);
			rect(23,8,6,12,2);
			fill(255,180,180,this.fade);
			rect(-13,27,8,6,2);
			rect(4,27,8,6,2);
			fill(255,180,180,this.fade/5);
			rect(-14,27,10,7,3);
			rect(3,27,10,7,3);
			rect(-15,27,12,8,4);
			rect(2,27,12,8,4);
			fill(120,this.fade);
			triangle(-9,30,-3,30,-6,38);
			triangle(3,30,-3,30,0,38);
			triangle(9,30,3,30,6,38);
			fill(100,110,110,this.fade);
			rect(-27,-30,54,60,4);
			fill(125,135,135,this.fade);
			rect(-25,-15,50,30,4);
			fill(40,this.fade);
			rect(-15,4,14,8,3);
			rect(1,4,14,8,3);
			stroke(40,this.fade);
			strokeWeight(5);
			point(10,-24);
			scale(1.5);
		break;
		case "Tranquil":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			rotate(-60);
			for(k=0;k<5;k++){
				triangle(-2,-14,2,-14,0,-19);
				rotate(30);
			}
			rotate(-90);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(255,120,0,this.fade);
			ellipse(0,7,12,12);
			fill(0,this.fade);
			ellipse(0,9,6,6);
		break;
		case "Cosmil": case "Tartara": case "Cosminor":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			if(this.name === "Cosminor"){
				stroke(195,155,255,this.fade);
				fill(195,155,255,this.fade/3);
			}
			else if(this.name === "Tartara"){
				stroke(30,145,180,this.fade);
				fill(30,145,180,this.fade/3);
			}
			else{
				stroke(240,215,120,this.fade);
				fill(240,215,120,this.fade/3);
			}
			strokeWeight(2);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,14,14);
			ellipse(18,0,14,14);
			rotate((sin(this.rate*4))*-20);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			if(this.name === "Cosminor"){
				stroke(250,230,255,this.fade);
			}
			else if(this.name === "Tartara"){
				stroke(30,145,180,this.fade);
			}
			else{
				stroke(240,215,120,this.fade);
			}
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Counter Truck":
			scale(2/3);
			noStroke();
			fill(80,this.fade);
			rect(-20,-20,6,12,2);
			rect(-20,8,6,12,2);
			rect(14,-20,6,12,2);
			rect(14,8,6,12,2);
			fill(255,255,180,this.fade);
			rect(-13,27,8,6,2);
			rect(4,27,8,6,2);
			fill(255,255,180,this.fade/5);
			rect(-14,27,10,7,3);
			rect(3,27,10,7,3);
			rect(-15,27,12,8,4);
			rect(2,27,12,8,4);
			fill(120,this.fade);
			triangle(-9,32,-3,32,-6,40);
			triangle(3,32,-3,32,0,40);
			triangle(9,32,3,32,6,40);
			fill(100,125,125,this.fade);
			rect(-18,-32,36,64,4);
			fill(125,150,150,this.fade);
			rect(-17,-17,34,34,4);
			fill(40,this.fade);
			rect(-15,4,14,8,3);
			rect(1,4,14,8,3);
			stroke(40,this.fade);
			strokeWeight(5);
			point(10,-24);
			scale(1.5);
		break;
		case "Returned Mage":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6+this.defeatAnim*2,((sin(this.rate*4))*-9)+this.defeatAnim*33,15,15);
			ellipse(-6-this.defeatAnim*2,((sin(this.rate*4))*9)+this.defeatAnim*33,15,15);
			fill(this.color[0]-10,this.color[1]-10,this.color[2]-10,this.fade);
			ellipse(6+this.defeatAnim*2,((sin(this.rate*4))*-9)-1+this.defeatAnim*33,12,12);
			ellipse(-6-this.defeatAnim*2,((sin(this.rate*4))*9)-1+this.defeatAnim*33,12,12);
			fill(this.color[0]-5,this.color[1]-5,this.color[2]-5,this.fade);
			ellipse(0,this.defeatAnim*14,16,32);
			fill(this.color[0]/2,this.color[1]/2,this.color[2]/2,this.fade);
			ellipse(0,this.defeatAnim*14+8,0.5,0.5);
			fill(175,90,95,this.fade);
			ellipse(0,this.defeatAnim*14+13,2,2);
			fill(175,90,95,this.fade/2);
			ellipse(0,this.defeatAnim*14+13,4,4);
			fill(195,35,95,this.fade*this.under);
			arc(0,this.defeatAnim*14+9,14,14,0,180);
			fill(190,120,90,this.fade*this.under);
			ellipse(-2.5,this.defeatAnim*14+12,3,3);
			ellipse(2.5,this.defeatAnim*14+12.5,3,3);
			fill(220,200,130,this.fade*this.under);
			ellipse(-5,9+this.defeatAnim*2,16,16);
			ellipse(5,9+this.defeatAnim*2,16,16);
			ellipse(0,0,32-this.defeatAnim*2,32-this.defeatAnim*2);
			fill(this.color[0]-10,this.color[1]-10,this.color[2]-10,this.fade);
			ellipse(-5,9+this.defeatAnim*2,14,14);
			ellipse(5,9+this.defeatAnim*2,14,14);
			fill(190,130,135,this.fade*(1-this.under));
			ellipse(-7,14.5+this.defeatAnim*2,2,2);
			ellipse(7,14.5+this.defeatAnim*2,2,2);
			fill(170,110,150,this.fade*this.under);
			stroke(120,40,110,this.fade*this.under);
			strokeWeight(1);
			ellipse(0,16+this.defeatAnim*2,5,4);
			noStroke();
			fill(100,50,90,this.fade*this.clothes);
			arc(-5,9,14,14,-255,-90);
			arc(5,9,14,14,-90,75);
			fill(165,100,95,this.fade);
			triangle(-15,0,-7,0,-10-this.defeatAnim*6,22-this.defeatAnim*3);
			triangle(15,0,7,0,10+this.defeatAnim*6,22-this.defeatAnim*3);
			rotate((sin(this.rate*4))*20);
			stroke(95,75,75,this.fade*(1-this.defeatAnim));
			noFill();
			strokeWeight(2);
			line(-18+this.handMoveB*18,-this.defeatAnim*12-12+this.handMove+this.handMoveB*18,-18+this.handMoveB*18,-this.defeatAnim*12+26+this.handMove+this.handMoveB*18);
			arc(-18+this.handMoveB*18,-this.defeatAnim*12+24+this.handMove+this.handMoveB*18,10,12,-210,30);
			fill(120,155,140,this.fade*(1-this.defeatAnim));
			noStroke();
			ellipse(-18+this.handMoveB*18,-this.defeatAnim*12+30+this.handMove+this.handMoveB*18,6,6);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18+this.handMoveB*18,-this.defeatAnim*12+this.handMove+this.handMoveB*18,16,16);
			ellipse(18,-this.defeatAnim*12,16,16);
			fill(110,60,100,this.fade*this.clothes);
			arc(-20+this.handMoveB*18,this.handMove+this.handMoveB*18,18,18,-90-this.handMoveB*90,90-this.handMoveB*90);
			arc(20,0,18,18,-270,-90);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(185,120,115,this.fade);
			arc(0,-this.defeatAnim*3,34,34,-205,25);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			triangle(cos(25)*15,sin(25)*15-this.defeatAnim*3,0,-4-this.defeatAnim*3,-cos(25)*15,sin(25)*15-this.defeatAnim*3);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9-this.defeatAnim,5,9-this.defeatAnim);
			strokeWeight(4-this.defeatAnim*2);
			line(-5+this.defeatAnim*1.5,2-this.defeatAnim*1.5,-5-this.defeatAnim*1.5,2-this.defeatAnim*2.5);
			line(5-this.defeatAnim*1.5,2-this.defeatAnim*1.5,5+this.defeatAnim*1.5,2-this.defeatAnim*2.5);
			line(-5+this.defeatAnim*1.5,2-this.defeatAnim*1.5,-5-this.defeatAnim*1.5,2+this.defeatAnim/2);
			line(5-this.defeatAnim*1.5,2-this.defeatAnim*1.5,5+this.defeatAnim*1.5,2+this.defeatAnim/2);
		break;
		case "Cysian Master":
			stroke(255,220,215,this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,105);
			arc(-13,-22,12,36,95,105);
			arc(-11,-24,8,32,95,105);
			arc(15,-20,16,40,75,85);
			arc(13,-22,12,36,75,85);
			arc(11,-24,8,32,75,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18-this.handMove*18,this.handMove*18,16,16);
			fill(240,125,120,this.fade);
			quad(-20,0,-18,-2,-16,0,-18,2);
			quad(20-this.handMove*18,this.handMove*18,18-this.handMove*18,-2+this.handMove*18,16-this.handMove*18,this.handMove*18,18-this.handMove*18,2+this.handMove*18);
			rotate((sin(this.rate*4))*-20);
			triangle(0,16,-3,14,3,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(255,185,190,this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			stroke(250,120,120,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Elemental Energy": case "Pure Energy": case "Ravager Energy": case "Plutonic Energy": case "Disorder Energy": case "Infernal Energy": case "Extinguished": case "Structural Energy":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			if(this.name === "Disorder Energy"){
				fill(85,55,165,this.fade);
			}
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			if(this.name === "Pure Energy"){
				stroke(5,15,35,this.fade);
			}
			else if(this.name === "Ravager Energy"){
				stroke(150,200,250,this.fade);
			}
			else if(this.name === "Plutonic Energy"){
				stroke(255,200,200,this.fade);
			}
			else if(this.name === "Disorder Energy"){
				stroke(245,95,115,this.fade);
			}
			else if(this.name === "Infernal Energy"){
				stroke(255,this.fade);
			}
			else if(this.name === "Extinguished"){
				stroke(0,this.fade);
			}
			else if(this.name === "Structural Energy"){
				stroke(115,170,145,this.fade);
			}
			else{
				stroke(200,this.fade);
			}
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Robotic Overseer": case "Exiled Overseer": case "Hectisce": case "Galactic Commander":
			rotate(this.extraSpin);
			noStroke();
			if(this.name !== "Hectisce"){
				fill(40,this.fade);
				rect(-5,-21,10,10,2);
				fill(0,this.fade);
				ellipse(0,-16,6,6);
			}
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(80,this.fade);
			rect(-21,0,4,16,1);
			rect(-16.5,0,4,16,1);
			rect(17,0,4,16,1);
			rect(12.5,0,4,16,1);
			if(this.name == "Galactic Commander"){
				fill(115,225,255,this.fade);
				rect(-20,0,2,15,1);
				rect(-15.5,0,2,15,1);
				rect(18,0,2,15,1);
				rect(13.5,0,2,15,1);
			}
			fill(25,35,45,this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			if(this.name === "Hectisce"){
				quad(0,0,-15*sin(30),-15*cos(30),-14,-14,-15*sin(60),-15*cos(60));
				quad(0,0,15*sin(30),-15*cos(30),14,-14,15*sin(60),-15*cos(60));
				fill(175,135,255,this.fade);
				ellipse(-5,2,4,4);
				ellipse(5,2,4,4);
			}
			else if(this.name === "Exiled Overseer"){
				fill(160,235,210,this.fade);
				rect(-10,5,20,5,2);
				fill(215,255,245,this.fade);
				rect(-19,-8,2,16);
				rect(17,-8,2,16);
			}
			else if(this.name === "Galactic Commander"){
				fill(190,245,255,this.fade);
				rect(-10,5,20,5,2);
				fill(45,90,150,this.fade);
				rect(-19,-8,2,16);
				rect(17,-8,2,16);
			}
			else{
				fill(195,145,255,this.fade);
				rect(-19,-8,1,16,2);
				rect(18,-8,1,16,2);
				fill(120,20,135,this.fade);
				arc(0,0,27,27,0,180);
			}
			rotate(-this.extraSpin);
		break;
		case "Pure Champion": case "Awakened Champion":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(255,this.fade);
			triangle(21+this.handMove[0],this.handMove[1],15+this.handMove[0],this.handMove[1],18+this.handMove[0],this.handMove[1]+40);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18+this.handMove[0],this.handMove[1],16,16);
			ellipse(0,0,30,30);
			fill(255,this.fade);
			quad(-20,0,-18,-2,-16,0,-18,2);
			quad(20+this.handMove[0],this.handMove[1],18+this.handMove[0],-2+this.handMove[1],16+this.handMove[0],this.handMove[1],18+this.handMove[0],2+this.handMove[1]);
			rotate((sin(this.rate*4))*-20);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			stroke(255,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(2);
			line(-7,-1,-3,1);
			line(-7,2,-3,4);
			line(7,-1,3,1);
			line(7,2,3,4);
			rotate(-this.completeSpin);
		break;
		case "True Vanguard":
			rotate(this.completeSpin);
			stroke(255,255,180,this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,105);
			arc(-13,-22,12,36,95,105);
			arc(-11,-24,8,32,95,105);
			arc(15,-20,16,40,75,85);
			arc(13,-22,12,36,75,85);
			arc(11,-24,8,32,75,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			translate(-18,0);
			rotate(this.pointSpin);
			fill(10,12,14,this.fade);
			rect(-2,-12,4,27);
			fill(30,36,42,this.fade);
			rect(-9,15,18,9,2);
			fill(255,245,175,this.fade);
			rect(-4,15,1,9);
			rect(3,15,1,9);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate(-this.pointSpin);
			translate(18,0);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			fill(255,235,135,this.fade);
			rotate(this.handMove);
			rect(-20,-8,1,16,2);
			rect(-17,-8,1,16,2);
			rotate(-this.handMove);
			rect(19,-8,1,16,2);
			rect(16,-8,1,16,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(255,230,140,this.fade);
			arc(-5,2,6,4,30,210);
			arc(5,2,6,4,-30,150);
			fill(30,33,36,this.fade);
			arc(0,0,33,33,-180,0);
			rotate(-this.completeSpin);
		break;
		case "Avant Guard":
			rotate(this.completeSpin);
			stroke(210,215,225,this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,105);
			arc(-13,-22,12,36,95,105);
			arc(-11,-24,8,32,95,105);
			arc(15,-20,16,40,75,85);
			arc(13,-22,12,36,75,85);
			arc(11,-24,8,32,75,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			translate(-18,0);
			rotate(this.pointSpin);
			fill(10,12,14,this.fade);
			rect(-2,-12,4,27);
			fill(30,36,42,this.fade);
			arc(0,15,24,24,-45,45);
			arc(0,15,24,24,135,225);
			fill(255,250,215,this.fade);
			arc(0,15,16,16,-45,45);
			arc(0,15,16,16,135,225);
			fill(30,36,42,this.fade);
			arc(0,15,14,14,-45,45);
			arc(0,15,14,14,135,225);
			ellipse(0,15,8,8);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate(-this.pointSpin);
			translate(18,0);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			fill(245,195,150,this.fade);
			rotate(this.handMove);
			rect(-20,-8,1,16,2);
			rect(-17,-8,1,16,2);
			rotate(-this.handMove);
			rect(19,-8,1,16,2);
			rect(16,-8,1,16,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(175,170,190,this.fade);
			arc(-5,2,6,4,30,210);
			arc(5,2,6,4,-30,150);
			fill(30,33,36,this.fade);
			arc(0,0,33,33,-180,0);
			rotate(-this.completeSpin);
		break;
		case "Null":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			rotate(-60);
			for(k=0;k<5;k++){
				triangle(-2,-14,2,-14,0,-19);
				rotate(30);
			}
			rotate(-90);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(245,250,250,this.fade);
			ellipse(0,0,30,30);
			fill(130,25,190,this.fade);
			ellipse(0,7,12,12);
			fill(0,this.fade);
			ellipse(0,9,6,6);
		break;
		case "Eye": case "Decay":
			stroke(120,5,5,this.fade);
			strokeWeight(3);
			rotate(-18);
			for(var j=0;j<8;j++){
				line(sin(this.time*8+j*25)*2,-14-j*2,sin(this.time*8+(j-1)*25)*2,-14-j*2+2);
			}
			rotate(36);
			for(j=0;j<8;j++){
				line(sin(this.time*8+j*25+70)*-2,-14-j*2,sin(this.time*8+(j-1)*25+70)*-2,-14-j*2+2);
			}
			rotate(-18);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,7,12,12);
			fill(0,this.fade);
			ellipse(0,9,6,6);
		break;
		case "Grand Eye of the Seer":
			rotate(this.completeSpin);
			stroke(0,this.fade);
			strokeWeight(3);
			rotate(-18);
			for(var j=0;j<8;j++){
				line(sin(this.time*8+j*25)*2,-14-j*2,sin(this.time*8+(j-1)*25)*2,-14-j*2+2);
			}
			rotate(36);
			for(j=0;j<8;j++){
				line(sin(this.time*8+j*25+70)*-2,-14-j*2,sin(this.time*8+(j-1)*25+70)*-2,-14-j*2+2);
			}
			rotate(-18);
			noStroke();
			fill(0,this.fade);
			for(k=0;k<24;k++){
				rotate(15);
				if(k%4 === 0){
					triangle(-3,-14,3,-14,0,-21);
				}
				else if(k%2 === 0){
					triangle(-2,-14,2,-14,0,-19);
				}
				else{
					triangle(-2,-14,2,-14,0,-17);
				}
			}
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,7,12,12);
			fill(0,this.fade);
			ellipse(0,9,6,6);
			rotate(-this.completeSpin);
		break;
		case "Monocrystalline":
			graphene(-6,((sin(this.rate*4))*9),0,0.3,this.fade);
			graphene(6,((sin(this.rate*4))*-9),0,0.3,this.fade);
			graphene(0,0,0,0.6,this.fade);
			rotate((sin(this.rate*4))*20);
			graphene(-18,0,0,0.3,this.fade);
			graphene(18,0,0,0.3,this.fade);
			rotate((sin(this.rate*4))*-20);
			stroke(60,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Prompter": case "Vengeful Prompter":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			if(this.name === "Vengeful Prompter"){
				fill(150,220,255,this.fade);
				ellipse(0,0,30,30);
				fill(130,200,235,this.fade);
			}
			else{
				fill(255,this.fade);
				ellipse(0,0,30,30);
				fill(230,this.fade);
			}
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			if(this.name === "Vengeful Prompter"){
				stroke(0,100,200,this.fade);
			}
			else{
				stroke(200,this.fade);
			}
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Ok":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			fill(255,this.fade);
			rect(-9,-1,18,8,2);
		break;
		case "Vengeful Champion":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(230,225,255,this.fade);
			triangle(21+this.handMove[0],this.handMove[1],15+this.handMove[0],this.handMove[1],18+this.handMove[0],this.handMove[1]+40);
			fill(215,250,255,this.fade);
			triangle(19.5+this.handMove[0],this.handMove[1],16.5+this.handMove[0],this.handMove[1],18+this.handMove[0],this.handMove[1]+20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18+this.handMove[0],this.handMove[1],16,16);
			fill(195,230,255,this.fade);
			rect(-21.5,-8,1,16);
			rect(-15.5,-8,1,16);
			rect(10,-3.5,16,1);
			rect(10,2.5,16,1);
			fill(240,230,255,this.fade);
			quad(-20,0,-18,-2,-16,0,-18,2);
			quad(20+this.handMove[0],this.handMove[1],18+this.handMove[0],-2+this.handMove[1],16+this.handMove[0],this.handMove[1],18+this.handMove[0],2+this.handMove[1]);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(45,65,130,this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			fill(15,20,60,this.fade);
			rect(-16,-12,32,5,2);
			rect(-10,-21,20,12,2);
			stroke(175,220,255,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(2);
			line(-7,-1,-3,1);
			line(-7,2,-3,4);
			line(7,-1,3,1);
			line(7,2,3,4);
			rotate(-this.completeSpin);
		break;
		case "Banished": case "Banished Boss": case "Polaris": case "Spirit Construct": case "Lunatic": case "Lunatic Boss": case "Discharge": case "Unperceivable":
			noStroke();
			if(this.name === "Lunatic"||this.name === "Lunatic Boss"){
				fill(70,45,15,this.fade*2/5);
			}
			else{
				fill(this.color[0],this.color[1],this.color[2],this.fade*2/5);
			}
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade*4/5);
			ellipse(0,0,30,30);
			if(this.name === "Lunatic"||this.name === "Lunatic Boss"){
				fill(255,0,0,this.fade*3/5);
				rotate((sin(this.rate*4))*20);
				ellipse(-18,0,16,16);
				fill(255,255,0,this.fade*3/5);
			}
			else{
				rotate((sin(this.rate*4))*20);
				ellipse(-18,0,16,16);
			}
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			if(this.name === "Polaris"){
				fill(95,225,240,this.fade*4/5);
			}
			beginShape();
			if(this.name === "Banished"||this.name === "Banished Boss"||this.name === "Polaris"||this.name === "Spirit Construct"||this.name === "Discharge"){
				vertex(-6,-14);
				bezierVertex(-10,-15,-13,-19,-14,-22);
				bezierVertex(-14,-18,-12,-14,-11,-10);
				endShape();
				beginShape();
				vertex(6,-14);
				bezierVertex(10,-15,13,-19,14,-22);
				bezierVertex(14,-18,12,-14,11,-10);
				endShape();
			}
			if(this.name === "Discharge"){
				for(var j in this.shocks){
					fill(this.color[0],this.color[1],this.color[2],this.fade*this.shocks[j][2]/255);
					rotate(this.shocks[j][0]);
					triangle(-4,0,4,0,0,this.shocks[j][1]);
					rotate(-this.shocks[j][0]);
				}
			}
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			if(this.name === "Banished Boss"){
				stroke(150,120,155,this.fade*3/5);
				strokeWeight(4);
				noFill();
				arc(-15,-20,16,40,95,160);
				arc(-13,-22,12,36,95,160);
				arc(-11,-24,8,32,95,160);
				arc(15,-20,16,40,20,85);
				arc(13,-22,12,36,20,85);
				arc(11,-24,8,32,20,85);
			}
			else if(this.name === "Polaris"){
				stroke(45,215,245,this.fade*3/5);
				strokeWeight(4);
				noFill();
				arc(-15,-20,16,40,95,160);
				arc(-13,-22,12,36,95,160);
				arc(-11,-24,8,32,95,160);
				arc(15,-20,16,40,20,85);
				arc(13,-22,12,36,20,85);
				arc(11,-24,8,32,20,85);
				stroke(195,255,255,this.fade);
				strokeWeight(3);
				ellipse(0,-15,22,8);
			}
			else if(this.name === "Spirit Construct"){
				stroke(this.color[0],this.color[1],this.color[2],this.fade*3/5);
				strokeWeight(4);
				noFill();
				arc(-15,-20,16,40,95,160);
				arc(-13,-22,12,36,95,160);
				arc(-11,-24,8,32,95,160);
				arc(15,-20,16,40,20,85);
				arc(13,-22,12,36,20,85);
				arc(11,-24,8,32,20,85);
			}
			else if(this.name === "Lunatic"||this.name === "Lunatic Boss"){
				fill(50,55,75,this.fade*3/5);
				noStroke();
				rect(-16,-12,32,5,2);
				rect(-10,-21,20,12,2);
			}
			else if(this.name === "Unperceivable"){
				fill(20,30,35,this.fade*4/5);
				noStroke();
				rect(-14,-9,28,3);
			}
		break;
		case "UFO": case "Mothership": case "Hellship": case "Awakened Ship":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			if(this.name === "Mothership"||this.name === "Hellship"||this.name === "Awakened Ship"){
				for(k=0;k<8;k++){
					rotate(45);
					triangle(-2,-14,2,-14,0,-19);
				}
			}
			if(this.name === "Hellship"){
				fill(235,115,115,this.fade);
			}
			else if(this.name === "Awakened Ship"){
				fill(255,this.fade);
			}
			else{
				fill(225,190,245,this.fade);
			}
			ellipse(0,0,24,24);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,20,20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,0,14,14);
			stroke(this.color2[0]*1.5,this.color2[1]*1.5,this.color2[2]*1.5,this.fade);
			strokeWeight(2);
			arc(0,0,10,10,-160,-110);
			if(this.name === "Hellship"){
				noStroke();
				fill(115,5,10,this.fade);
				rect(-7,-5,14,2);
				rect(-7,-6.5,3,2);
				rect(-1.5,-6.5,3,2);
				rect(4,-6.5,3,2);
			}
		break;
		case "Legionship":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			for(k=0;k<5;k++){
				rotate(72);
				triangle(-4,-14,4,-14,0,-21);
			}
			ellipse(0,0,30,30);
			fill(50,85,245,this.fade);
			ellipse(0,0,24,24);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,20,20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,0,14,14);
			stroke(this.color2[0]*1.5,this.color2[1]*1.5,this.color2[2]*1.5,this.fade);
			strokeWeight(2);
			arc(0,0,10,10,-160,-110);
			fill(70,85,195,this.fade);
			stroke(200,215,245,this.fade);
			strokeWeight(1);
			triangle(0,5,sin(120)*5,cos(120)*5,-sin(120)*5,cos(120)*5);
			triangle(0,2,sin(120)*2,cos(120)*2,-sin(120)*2,cos(120)*2);
		break;
		case "The Vanguard":
			rotate(this.completeSpin);
			stroke(165,250,210,this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,105);
			arc(-13,-22,12,36,95,105);
			arc(-11,-24,8,32,95,105);
			arc(15,-20,16,40,75,85);
			arc(13,-22,12,36,75,85);
			arc(11,-24,8,32,75,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			translate(-18,0);
			rotate(this.pointSpin);
			fill(10,12,14,this.fade);
			rect(-2,-12,4,27);
			fill(30,36,42,this.fade);
			rect(-9,15,18,9,2);
			fill(40,200,55,this.fade);
			rect(-4,15,1,9);
			rect(3,15,1,9);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate(-this.pointSpin);
			translate(18,0);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			fill(160,255,195,this.fade);
			rotate(this.handMove);
			rect(-20,-8,1,16,2);
			rect(-17,-8,1,16,2);
			rotate(-this.handMove);
			rect(19,-8,1,16,2);
			rect(16,-8,1,16,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(165,255,205,this.fade);
			arc(-5,2,6,4,30,210);
			arc(5,2,6,4,-30,150);
			fill(30,33,36,this.fade);
			arc(0,0,33,33,-180,0);
			rotate(-this.completeSpin);
		break;
		case "Invisible": case "Invisible Boss":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade*1/10);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade*1/5);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
		break;
		case "Reactor": case "Hellflame Reactor":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			if(this.name === "Hellflame Reactor"){
				stroke(220,110,20,this.fade);
				fill(255,240,75,this.fade);
			}
			else{
				stroke(135,40,40,this.fade);
				fill(255,50,50,this.fade);
			}
			strokeWeight(3);
			ellipse(0,0,30,30);
			noFill();
			ellipse(0,0,20,30);
			ellipse(0,0,10,30);
			line(0,-15,0,15);
		break;
		case "Dark Priest":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(0,this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,this.handMove,16,16);
			ellipse(18,this.handMove,16,16);
			fill(195,185,145,this.fade);
			rect(-26,this.handMove-1,16,2);
			rect(10,this.handMove-1,16,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			arc(0,0,32,32,-210,30);
			fill(255,250,215,this.fade);
			noStroke();
			arc(-5,6,5,4,30,210);
			arc(5,6,5,4,-30,150);
			rotate(-this.extraSpin);
		break;
		case "Gilded Berserker": case "Juggernaut":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			if(this.name === "Juggernaut"){
				fill(80,60,60,this.fade);
				rect(-20-this.handMove[0],-12+this.handMove[1],4,28);
				fill(60,45,45,this.fade);
			}
			else{
				fill(200,180,140,this.fade);
				rect(-20-this.handMove[0],-12+this.handMove[1],4,28);
				fill(190,170,90,this.fade);
			}
			rect(-27-this.handMove[0],16+this.handMove[1],18,12,2);
			fill(105,155,190,this.fade);
			triangle(-20-this.handMove[0],28+this.handMove[1],-16-this.handMove[0],28+this.handMove[1],-18-this.handMove[0],33+this.handMove[1]);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18-this.handMove[0],this.handMove[1],16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			rotate(-30);
			triangle(-3,-14,3,-14,0,-18);
			rotate(60);
			triangle(-3,-14,3,-14,0,-18);
			rotate(-30);
			triangle(-3,-14,3,-14,0,-18);
			if(this.name === "Juggernaut"){
				stroke(255,45,45,this.fade);
			}
			else{
				stroke(255,235,135,this.fade);
			}
			strokeWeight(3);
			line(-4,-1,-4,5);
			line(4,-1,4,5);
			line(-8,0,-8,4);
			line(8,0,8,4);
			line(0,-1,0,5);
			rotate(-this.completeSpin);
		break;
		case "Demonic Summoner": case "Hellrisen":
			if(this.name === "Demonic Summoner"){
				noStroke();
				fill(250,140,140,this.fade);
				quad(-30,-9,0,-3,30,9,0,3);
				quad(30,-9,0,-3,-30,9,0,3);
				stroke(25,5,10,this.fade);
				noFill();
				strokeWeight(3);
				line(-18,18+this.handMove,18,18+this.handMove);
				ellipse(24,18+this.handMove,12,12);
				point(24,11+this.handMove);
				point(24,25+this.handMove);
				point(31,18+this.handMove);
				noStroke();
				fill(255,120,120,this.fade);
				beginShape();
				vertex(24,22+this.handMove);
				bezierVertex(23,19+this.handMove,23,19+this.handMove,20,18+this.handMove);
				bezierVertex(23,17+this.handMove,23,17+this.handMove,24,14+this.handMove);
				bezierVertex(25,17+this.handMove,25,17+this.handMove,28,18+this.handMove);
				bezierVertex(25,19+this.handMove,25,19+this.handMove,24,22+this.handMove);
				endShape();
			}
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(0,this.fade);
			ellipse(0,0,30,30);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			if(this.name === "Hellrisen"){
				rotate((sin(this.rate*4))*20);
				ellipse(-18,0,16,16);
				ellipse(18,0,16,16);
				rotate((sin(this.rate*4))*-20);
			}
			else{
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				ellipse(-11,12+this.handMove,16,16);
				ellipse(11,12+this.handMove,16,16);
			}
			arc(0,0,32,32,-210,30);
			fill(255,165,165,this.fade);
			noStroke();
			arc(-3,5,5,4,30,210);
			arc(3,5,5,4,-30,150);
			arc(-3,9,5,4,30,210);
			arc(3,9,5,4,-30,150);
			if(this.name === "Demonic Summoner"){
				fill(250,130,130,this.fade);
				noStroke();
				rotate(-15);
				beginShape();
				vertex(-6,-14);
				bezierVertex(-10,-15,-13,-19,-14,-22);
				bezierVertex(-14,-18,-12,-14,-11,-10);
				endShape();
				rotate(30);
				beginShape();
				vertex(6,-14);
				bezierVertex(10,-15,13,-19,14,-22);
				bezierVertex(14,-18,12,-14,11,-10);
				endShape();
				rotate(-15);
			}
		break;
		case "Flight Drone":
			rotate(this.time);
			noStroke();
			fill(15,25,35,this.fade);
			beginShape();
			for(k=0;k<6;k++){
				vertex(sin(k*60)*18,cos(k*60)*18);
			}
			endShape();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			beginShape();
			for(k=0;k<6;k++){
				vertex(sin(k*60)*16,cos(k*60)*16);
			}
			endShape();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			beginShape();
			for(k=0;k<6;k++){
				vertex(sin(k*60)*9,cos(k*60)*9);
			}
			endShape();
			fill(130,150,210,this.fade);
			beginShape();
			for(k=0;k<6;k++){
				vertex(sin(k*60)*6,cos(k*60)*6);
			}
			endShape();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			beginShape();
			for(k=0;k<6;k++){
				vertex(sin(k*60)*4,cos(k*60)*4);
			}
			endShape();
			fill(155,210,250,this.fade);
			ellipse(sin(60)*12,cos(60)*12,2,2);
			rotate(-this.time);
		break;
		case "Brilliancy":
			rotate(this.completeSpin);
			noStroke();
			fill(235,235,205,this.fade);
			quad(-30,-9,0,-3,30,9,0,3);
			quad(30,-9,0,-3,-30,9,0,3);
			fill(this.color[0]-20,this.color[1]-20,this.color[2]-20,this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.dress);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(220,245,255,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color2[0]+10,this.color2[1]+10,this.color2[2]+10,this.fade*this.dress);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			rotate((sin(this.rate*4))*20);
			translate(-this.armMove*18,this.handMove+this.armMove*18);
			stroke(180,180,165,this.fade);
			strokeWeight(2);
			line(18,-10,18,30);
			noFill();
			stroke(255,255,230,this.fade);
			ellipse(18,30,8,8);
			translate(18,30);
			for(k=0;k<8;k++){
				line(0,4,0,7);
				rotate(45);
			}
			translate(-18,-30);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(18,0,16,16);
			translate(this.armMove*18,-this.handMove-this.armMove*18);
			ellipse(-18,0,16,16);
			fill(85,70,40,this.fade*this.dress);
			rect(-22,-8,2,16,2);
			rect(20-this.armMove*18,-8+this.handMove+this.armMove*18,2,16,2);
			rotate((sin(this.rate*4))*-20);
			fill(255,255,230,this.fade*this.dress);
			triangle(-3,-14,3,-14,0,-16);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(255,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(255,255,230,this.fade);
			ellipse(0,-8,22,12);
			rotate(-this.completeSpin);
		break;
		case "Chronos": case "Broken Overlord":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			if(this.name === "Broken Overlord"){
				fill(0,0,5,this.fade);
				rect(-18.5,-12+this.handMove,1,32);
				fill(245,255,255,this.fade);
				ellipse(-18,26+this.handMove,6,6);
				stroke(0,0,5,this.fade);
			}
			else{
				fill(80,0,25,this.fade);
				rect(-18.5,-12+this.handMove,1,32);
				fill(255,225,225,this.fade);
				ellipse(-18,26+this.handMove,6,6);
				stroke(80,0,25,this.fade);
			}
			noFill();
			strokeWeight(1);
			ellipse(-18,26+this.handMove,12,12);
			line(-18,32+this.handMove,-18,20+this.handMove);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,this.handMove,16,16);
			ellipse(18,0,16,16);
			if(this.name === "Broken Overlord"){
				fill(165,155,255,this.fade);
			}
			else{
				fill(250,120,130,this.fade);
			}
			quad(-20,this.handMove,-18,-2+this.handMove,-16,this.handMove,-18,2+this.handMove);
			quad(20,0,18,-2,16,0,18,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			if(this.name === "Broken Overlord"){
				fill(100,205,230,this.fade);
			}
			else{
				fill(220,35,85,this.fade);
			}
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			if(this.name === "Broken Overlord"){
				fill(255,this.fade);
				arc(-5,2,5,4,30,210);
				arc(5,2,5,4,-30,150);
				fill(0,0,90,this.fade);
				rect(-14,-10,28,4);
				fill(250,250,255,this.fade);
				quad(-3,-12,0,-7,3,-12,0,-17);
				fill(140,20,230,this.fade);
			}
			else{
				fill(220,65,85,this.fade);
				arc(-5,2,5,4,30,210);
				arc(5,2,5,4,-30,150);
				fill(40,5,5,this.fade);
				rect(-14,-10,28,4);
				fill(200,55,80,this.fade);
				quad(-3,-12,0,-7,3,-12,0,-17);
				fill(0,this.fade);
			}
			quad(-2,-12,0,-9,2,-12,0,-15);
		break;
		case "Nonexistent":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade/6);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade/3);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(120,180,240,this.fade*2/3);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "True Ignitus":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			translate(-18,0);
			rotate(this.pointSpin);
			fill(200,this.fade);
			triangle(0,18,0,30,30,24);
			fill(255,this.fade);
			triangle(0,21,0,27,20,24);
			stroke(0,this.fade);
			strokeWeight(3);
			line(0,0,0,30);
			rotate(-this.pointSpin);
			translate(18,0);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(220,this.fade);
			strokeWeight(2);
			translate(-15,-16);
			line(15,15,3,9);
			line(9,12,12,3);
			line(15,15,9,27);
			line(12,21,3,24);
			line(15,15,21,21);
			line(21,21,24,27);
			line(21,21,24,18);
			line(18,18,21,6);
			translate(15,16);
			rotate((sin(this.rate*4))*20+this.handMove);
			line(-20,-4,-16,4);
			line(-18,0,-20,7);
			rotate(-this.handMove);
			line(24,2,15,0);
			line(15,0,22,-5);
			rotate((sin(this.rate*4))*-20);
			noStroke();
			fill(110,this.fade);
			rect(-14,-10,28,4);
			fill(255,this.fade);
			quad(-3,-12,0,-7,3,-12,0,-17);
			fill(90,this.fade);
			quad(-2,-12,0,-9,2,-12,0,-15);
			rotate(-this.completeSpin);
		break;
		case "Saber Champion":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(100,this.fade);
			triangle(21+this.handMove[0],this.handMove[1],15+this.handMove[0],this.handMove[1],18+this.handMove[0],this.handMove[1]+40);
			fill(125,this.fade);
			triangle(19.5+this.handMove[0],this.handMove[1],16.5+this.handMove[0],this.handMove[1],18+this.handMove[0],this.handMove[1]+20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18+this.handMove[0],this.handMove[1],16,16);
			fill(130,140,150,this.fade);
			rect(-21.5,-8,1,16);
			rect(-15.5,-8,1,16);
			rect(10,-3.5,16,1);
			rect(10,2.5,16,1);
			fill(250,255,255,this.fade);
			quad(-20,0,-18,-2,-16,0,-18,2);
			quad(20+this.handMove[0],this.handMove[1],18+this.handMove[0],-2+this.handMove[1],16+this.handMove[0],this.handMove[1],18+this.handMove[0],2+this.handMove[1]);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(100,110,120,this.fade);
			rect(-16,-12,32,5,2);
			rect(-10,-21,20,12,2);
			fill(245,250,250,this.fade);
			rect(-10,-15,20,3);
			stroke(255,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(-this.completeSpin);
		break;
		case "Hollow Champion":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(150,this.fade);
			triangle(21+this.handMove[0],this.handMove[1],15+this.handMove[0],this.handMove[1],18+this.handMove[0],this.handMove[1]+40);
			fill(175,this.fade);
			triangle(19.5+this.handMove[0],this.handMove[1],16.5+this.handMove[0],this.handMove[1],18+this.handMove[0],this.handMove[1]+20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18+this.handMove[0],this.handMove[1],16,16);
			fill(70,35,40,this.fade);
			rect(-21.5,-8,1,16);
			rect(-15.5,-8,1,16);
			rect(10,-3.5,16,1);
			rect(10,2.5,16,1);
			fill(120,155,140,this.fade);
			quad(-20,0,-18,-2,-16,0,-18,2);
			quad(20+this.handMove[0],this.handMove[1],18+this.handMove[0],-2+this.handMove[1],16+this.handMove[0],this.handMove[1],18+this.handMove[0],2+this.handMove[1]);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(195,35,95,this.fade);
			strokeWeight(2);
			translate(-15,-16);
			line(15,15,3,9);
			line(9,12,12,3);
			line(15,15,9,27);
			line(12,21,3,24);
			line(15,15,21,21);
			line(21,21,24,27);
			line(21,21,24,18);
			line(18,18,21,6);
			translate(15,16);
			rotate((sin(this.rate*4))*20);
			line(-20,-4,-16,4);
			line(-18,0,-20,7);
			rotate(-this.handMove);
			line(24+this.handMove[0],2+this.handMove[1],15+this.handMove[0],this.handMove[1]);
			line(15+this.handMove[0],this.handMove[1],22+this.handMove[0],-5+this.handMove[1]);
			rotate((sin(this.rate*4))*-20);
			stroke(100,50,90,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			scale(0.75);
			rotate(30);
			stroke(80,50,35,this.fade);
			noFill();
			strokeWeight(2);
			ellipse(10,15,5,5);
			ellipse(9,10,5,5);
			ellipse(7,5,5,5);
			ellipse(4,1,5,5);
			ellipse(1,-3,5,5);
			ellipse(-4,-7,5,5);
			ellipse(-9,-9,5,5);
			ellipse(-14,-11,5,5);
			rotate(-30);
			scale(1/0.75);
			rotate(-this.completeSpin);
		break;
		case "Robotic Guard":
			rotate(this.completeSpin);
			stroke(220,250,100,this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,105);
			arc(-13,-22,12,36,95,105);
			arc(-11,-24,8,32,95,105);
			arc(15,-20,16,40,75,85);
			arc(13,-22,12,36,75,85);
			arc(11,-24,8,32,75,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			translate(-18,0);
			rotate(this.pointSpin);
			fill(10,12,14,this.fade);
			rect(-2,-12,4,27);
			fill(255,210,150,this.fade);
			arc(0,15,20,28,-60,60);
			arc(0,15,20,28,120,240);
			fill(235,190,130,this.fade);
			arc(0,15,12,20,-60,60);
			arc(0,15,12,20,120,240);
			fill(255,210,150,this.fade);
			arc(0,15,10,18,-60,60);
			arc(0,15,10,18,120,240);
			ellipse(0,15,8,8);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate(-this.pointSpin);
			translate(18,0);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			fill(240,185,150,this.fade);
			rotate(this.handMove);
			rect(-21,-8,1,16,2);
			rect(-16,-8,1,16,2);
			quad(-19,0,-18,-1,-17,0,-18,1);
			rotate(-this.handMove);
			rect(20,-8,1,16,2);
			rect(15,-8,1,16,2);
			quad(19,0,18,-1,17,0,18,1);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(185,150,130,this.fade);
			arc(-5,2,6,4,30,210);
			arc(5,2,6,4,-30,150);
			fill(30,33,36,this.fade);
			arc(0,0,33,33,-180,0);
			rotate(-this.completeSpin);
		break;
		case "Ducky Unit": case "Operator Ducky":
			scale(3/4);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(8,((sin(this.rate*4))*-12),18,18);
			ellipse(-8,((sin(this.rate*4))*12),18,18);
			ellipse(0,0,40,40);
			rotate((sin(this.rate*4))*20);
			ellipse(-20,3,32,18);
			ellipse(20,3,32,18);
			rotate((sin(this.rate*4))*-20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,10,30,16);
			stroke(0,this.fade);
			strokeWeight(3);
			arc(0,8,36,4,5,175);
			line(-5,5,-5,6);
			line(5,5,5,6);
			if(this.name === "Ducky Unit"){
				strokeWeight(5);
				point(-7,-1);
				point(7,-1);
			}
			scale(4/3);
			if(this.name === "Operator Ducky"){
				arc(0,-6,40,10,15,165);
				fill(0,this.fade);
				noStroke();
				rect(-8,-2,6,6,1);
				rect(2,-2,6,6,1);
				fill(80,this.fade);
				arc(0,0,33,33,-180,0);
				ellipse(0,0,336,0,180);
			}
		break;
		case "Agent Ducky":
			scale(3/4);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(8,((sin(this.rate*4))*-12),18,18);
			ellipse(-8,((sin(this.rate*4))*12),18,18);
			rotate(this.extraSpin);
			rotate((sin(this.rate*4))*20);
			ellipse(-20,3,32,18);
			rotate((sin(this.rate*4))*-20);
			fill(100,this.fade);
			rect(-8/3,34,16/3,12);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,21,18,32);
			ellipse(0,0,40,40);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,10,30,16);
			stroke(0,this.fade);
			strokeWeight(3);
			noFill();
			arc(0,8,36,4,5,175);
			line(-5,5,-5,6);
			line(5,5,5,6);
			scale(4/3);
			arc(0,-6,40,10,15,165);
			fill(0,this.fade);
			noStroke();
			rect(-8,-2,6,6,1);
			rect(2,-2,6,6,1);
			stroke(30,this.fade);
			fill(30,this.fade);
			strokeWeight(4);
			line(-17,-6,17,-6);
			quad(-13,-6,13,-6,8,-15,-8,-15);
			rotate(-this.extraSpin);
		break;
		case "Boltmaster":
			stroke(50,60,80,this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,100);
			arc(-13,-22,12,36,95,100);
			arc(-11,-24,8,32,95,100);
			arc(15,-20,16,40,80,85);
			arc(13,-22,12,36,80,85);
			arc(11,-24,8,32,80,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18-this.handMove*18,this.handMove*18,16,16);
			fill(250,245,255,this.fade);
			quad(-20,0,-18,-2,-16,0,-18,2);
			quad(20-this.handMove*18,this.handMove*18,18-this.handMove*18,-2+this.handMove*18,16-this.handMove*18,this.handMove*18,18-this.handMove*18,2+this.handMove*18);
			rotate((sin(this.rate*4))*-20);
			triangle(0,16,-3,14,3,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(150,140,225,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Umbra":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			stroke(50,20,30,this.fade);
			noFill();
			strokeWeight(6);
			arc(-12,-4,20,20,-150,0);
			arc(12,-4,20,20,-180,-30);
			stroke(255,145,70,this.fade);
			strokeWeight(3);
			ellipse(0,-15,8,8);
			translate(0,-15);
			for(k=0;k<8;k++){
				line(0,4,0,6);
				rotate(45);
			}
			translate(0,15);
			noStroke();
			fill(this.color2[0]*6/5,this.color2[1]*6/5,this.color2[2]*6/5,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			stroke(180,this.fade);
			strokeWeight(2);
			line(-24,-12,-24,12);
			stroke(200,this.fade);
			strokeWeight(4);
			noFill();
			arc(-24,0,12,24,-90,90);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			fill(75,35,75,this.fade);
			rotate(this.handMove);
			arc(-18,0,18,18,-120,120);
			rotate(-this.handMove);
			arc(18,0,18,18,60,300);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(250,255,140,this.fade);
			quad(-3,4,-6,4,-9,1,-6,1);
			quad(3,4,6,4,9,1,6,1);
		break;
		case "Mechanical": case "Scout": case "SuperScout": case "Bonker": case "UberBot": case "FlameBot": case "ScoutBat": case "ChargeScoutBat": case "RepairBot": case "GiantRepairBot": case "GiantFlameBot": case "ScoutBall": case "DetonatorBot": case "GiantScoutBall": case "GiantDetonatorBot": case "Burster": case "ChargeBonker": case "EngineerBot": case "GiantBurster": case "RustBot": case "BloodBot": case "GoldBot": case "CarbonadoBot":
			if(this.name === "ChargeScoutBat"){
				fill(100,200,255,this.fade);
				noStroke();
				ellipse(0,0,34,34);
				ellipse(6,((sin(this.rate*4))*-9),20,20);
				ellipse(-6,((sin(this.rate*4))*9),20,20);
				rotate((sin(this.rate*4))*80);
				ellipse(-18,0,20,20);
				ellipse(18,0,20,20);
				rotate((sin(this.rate*4))*-80);
			}
			else if(this.name === "ChargeBonker"){
				fill(100,200,255,this.fade);
				noStroke();
				ellipse(0,0,34,34);
				ellipse(6,((sin(this.rate*4))*-9),20,20);
				ellipse(-6,((sin(this.rate*4))*9),20,20);
				rotate((sin(this.rate*4))*60);
				ellipse(-18,0,20,20);
				ellipse(18,0,20,20);
				rotate((sin(this.rate*4))*-60);
			}
			else if(this.name === "ScoutBall"||this.name === "GiantScoutBall"){
				rotate(this.extraSpin);
			}
			stroke(this.color2[0]*4/5,this.color2[1]*4/5,this.color2[2]*4/5,this.fade);
			strokeWeight(2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),12,12);
			ellipse(-6,((sin(this.rate*4))*9),12,12);
			if(this.name === "ScoutBat"||this.name === "ChargeScoutBat"){
				rotate((sin(this.rate*4))*80);
				stroke(125,125,120,this.fade);
				strokeWeight(5);
				line(-18,0,-36,0);
				line(18,0,36,0);
			}
			else if(this.name === "Scout"||this.name === "SuperScout"||this.name === "Bonker"||this.name === "ScoutBall"||this.name === "GiantScoutBall"||this.name === "Burster"||this.name === "ChargeBonker"||this.name === "GiantBurster"){
				rotate((sin(this.rate*4))*60);
			}
			else{
				rotate((sin(this.rate*4))*20);
				if(this.name === "EngineerBot"){
					noFill();
					stroke(100,this.fade);
					strokeWeight(5);
					line(-18,-12,-18,12);
					arc(-18,20,10,16,-180,0);
				}
			}
			stroke(this.color[0]*4/5,this.color[1]*4/5,this.color[2]*4/5,this.fade);
			strokeWeight(4);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,12,12);
			ellipse(18,0,12,12);
			if(this.name === "ScoutBat"||this.name === "ChargeScoutBat"){
				rotate((sin(this.rate*4))*-80);
			}
			else if(this.name === "Scout"||this.name === "SuperScout"||this.name === "Bonker"||this.name === "ScoutBall"||this.name === "GiantScoutBall"||this.name === "Burster"||this.name === "ChargeBonker"||this.name === "GiantBurster"){
				rotate((sin(this.rate*4))*-60);
			}
			else{
				rotate((sin(this.rate*4))*-20);
			}
			ellipse(0,0,26,26);
			noStroke();
			fill(40,this.fade);
			ellipse(-5,2,6,6);
			ellipse(5,2,6,6);
			if(this.name === "RustBot"){
				stroke(80,70,60,this.fade);
			}
			else if(this.name === "BloodBot"){
				stroke(145,0,0,this.fade);
			}
			else if(this.name === "GoldBot"){
				stroke(220,20,20,this.fade);
			}
			else if(this.name === "CarbonadoBot"){
				stroke(195,200,195,this.fade);
			}
			else{
				stroke(50,150,200,this.fade);
			}
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			if(this.name === "RepairBot"||this.name === "GiantRepairBot"){
				fill(230,this.fade/2);
				stroke(230,this.fade);
				strokeWeight(3);
				ellipse(0,0,56,56);
			}
			else if(this.name === "ScoutBall"||this.name === "GiantScoutBall"){
				rotate(-this.extraSpin);
			}
		break;
		case "RocketLauncher": case "HeavyWeapon": case "SniperRifle": case "SpyBot": case "GiantHeavyWeapon": case "GiantRocketLauncher": case "GiantRocketRapid": case "GiantRocketBurst": case "GiantHeavyDeflector": case "GiantHeavyHeal": case "GiantHeavyHeal": case "GiantShotgun": case "EnergyRocketLauncher": case "SniperInhibitor": case "KnightBot": case "ChargeKnightBot": case "BuffRocketLauncher": case "MajorBarrage": case "ChiefBlastLauncher": case "BoostRocketLauncher": case "ColonelBarrage": case "SamuraiBot": case "GiantKnightBot": case "ChargeGiantRocket": case "GiantDemolitions": case "HeavyDeflector": case "ChargeGiantBurst": case "Demolitions": case "Buff2RocketLauncher": case "Shotgun": case "SirNukesalot": case "GiantBurstDemolitions": case "GiantRocketHeal": case "ChargeHeavyWeapon": case "AdmiralAirstrike": case "ChargeRocketLauncher":
			rotate(this.extraSpin);
			if(this.name === "ChargeKnightBot"||this.name === "ChargeGiantRocket"||this.name === "ChargeGiantBurst"||this.name === "ChargeHeavyWeapon"||this.name === "ChargeRocketLauncher"){
				fill(100,200,255,this.fade);
				noStroke();
				ellipse(0,0,34,34);
				ellipse(6,((sin(this.rate*4))*-9),20,20);
				ellipse(-6,((sin(this.rate*4))*9),20,20);
				rotate((sin(this.rate*4))*20);
				ellipse(18,0,20,20);
				rotate((sin(this.rate*4))*-20);
				if(this.name === "ChargeGiantRocket"||this.name === "GiantChargeBurst"||this.name === "ChargeHeavyWeapon"||this.name === "ChargeRocketLauncher"||this.name === "ChargeRocketLauncher"){
					ellipse(-10,16,20,20);
				}
				else{
					ellipse(-10,16+this.handMove,20,20);
				}
			}
			else if(this.name === "BuffRocketLauncher"){
				fill(40,20,0,this.fade);
				noStroke();
				rect(-10,-18,20,12,2);
			}
			else if(this.name === "Buff2RocketLauncher"){
				fill(20,60,0,this.fade);
				noStroke();
				rect(-10,-18,20,12,2);
			}
			stroke(this.color2[0]*4/5,this.color2[1]*4/5,this.color2[2]*4/5,this.fade);
			strokeWeight(2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),12,12);
			ellipse(-6,((sin(this.rate*4))*9),12,12);
			fill(60,this.fade);
			noStroke();
			if(this.name === "HeavyWeapon"||this.name === "GiantHeavyWeapon"||this.name === "GiantHeavyDeflector"||this.name === "GiantHeavyHeal"||this.name === "HeavyDeflector"||this.name === "ChargeHeavyWeapon"){
				rect(-11,10,2,18);
				rect(-7,10,2,18);
				rect(-3,10,2,18);
				rect(-11,26,10,2);
				rect(-11,23,10,2);
				rect(-11,20,10,2);
				if(this.name === "GiantHeavyDeflector"||this.name === "HeavyDeflector"){
					rect(-12,10,1,14);
					rect(-1,10,1,14);
				}
				else if(this.name === "GiantHeavyHeal"){
					rect(-12,10,1,16);
					rect(-1,10,1,16);
				}
			}
			else if(this.name === "SniperRifle"){
				rect(-8,10,4,24);
			}
			else if(this.name === "GiantShotgun"||this.name === "Shotgun"){
				rect(-13,10,14,14);
			}
			else if(this.name === "SpyBot"){
				fill(200,this.fade);
				triangle(-15,16+this.handMove,-5,16+this.handMove,-10,30+this.handMove);
			}
			else if(this.name === "SniperInhibitor"){
				rect(-8,10,4,20);
				triangle(-8,30,-8,34,-6,30);
				triangle(-4,30,-4,34,-6,30);
			}
			else if(this.name === "KnightBot"||this.name === "ChargeKnightBot"||this.name === "GiantKnightBot"){
				fill(200,this.fade);
				triangle(-16,16+this.handMove,-4,16+this.handMove,-10,48+this.handMove);
			}
			else if(this.name === "SamuraiBot"){
				fill(200,this.fade);
				triangle(-15,16+this.handMove,-8,16+this.handMove,-10,68+this.handMove);
			}
			else if(this.name === "BoostRocketLauncher"){
				rect(-6,10,8,18);
				stroke(60,40,20,this.fade);
				strokeWeight(3);
				line(-10,16+this.handMove,-10,26+this.handMove);
				fill(40,100,40);
				noStroke();
				arc(-10,26+this.handMove,12,20,0,180);
			}
			else if(this.name === "GiantDemolitions"||this.name === "Demolitions"||this.name === "GiantBurstDemolitions"){
				quad(1,10,-7,10,-9,26,3,26);
				if(this.name === "GiantBurstDemolitions"){
					rect(-9,20,12,3);
					rect(-9,15,12,3);
				}
			}
			else if(this.name === "SirNukesalot"){
				quad(1,10,-7,10,-10,30,4,30);
			}
			else{
				rect(-7,10,8,18);
				if(this.name === "GiantRocketRapid"){
					rect(-9,18,12,6);
				}
				else if(this.name === "GiantRocketBurst"||this.name === "ChargeGiantBurst"){
					rect(-9,21,12,3);
					rect(-9,16,12,3);
				}
				else if(this.name === "MajorBarrage"||this.name === "ColonelBarrage"){
					rect(-9,24,12,2);
					rect(-9,20,12,2);
					rect(-9,16,12,2);
				}
				else if(this.name === "GiantRocketHeal"){
					triangle(-7,24,-7,18,-10,21);
					triangle(1,24,1,18,4,21);
				}
				else if(this.name === "AdmiralAirstrike"){
					rect(-10,24,14,2);
					rect(-10,20,14,2);
					rect(-10,16,14,2);
				}
				if(this.name === "EnergyRocketLauncher"||this.name === "BuffRocketLauncher"||this.name === "MajorBarrage"){
					fill(120,this.fade);
					ellipse(-3,20,4,4);
				}
				else if(this.name === "ChiefBlastLauncher"){
					fill(160,40,40,this.fade);
					ellipse(-3,20,4,4);
				}
			}
			rotate((sin(this.rate*4))*20);
			stroke(this.color[0]*4/5,this.color[1]*4/5,this.color[2]*4/5,this.fade);
			strokeWeight(4);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(18,0,12,12);
			rotate((sin(this.rate*4))*-20);
			if(this.name === "SpyBot"||this.name === "KnightBot"||this.name === "ChargeKnightBot"||this.name === "BoostRocketLauncher"||this.name === "SamuraiBot"){
				ellipse(-10,16+this.handMove,12,12);
			}
			else{
				ellipse(-10,16,12,12);
			}
			ellipse(0,0,26,26);
			noStroke();
			fill(40,this.fade);
			ellipse(-5,2,6,6);
			ellipse(5,2,6,6);
			if(this.name === "SpyBot"){
				stroke(75,this.fade);
			}
			else{
				stroke(50,150,200,this.fade);
			}
			point(-5,2);
			point(5,2);
			rotate(-this.extraSpin);
		break;
		case "HeavyWeight": case "LightWeight": case "CaptainPunch":
			rotate(this.extraSpin);
			stroke(this.color2[0]*4/5,this.color2[1]*4/5,this.color2[2]*4/5,this.fade);
			strokeWeight(2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),12,12);
			ellipse(-6,((sin(this.rate*4))*9),12,12);
			rotate((sin(this.rate*4))*20+this.handSpin);
			stroke(this.color[0]*4/5,this.color[1]*4/5,this.color[2]*4/5,this.fade);
			strokeWeight(4);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18+this.handMove,0,12,12);
			rotate(-this.handSpin);
			ellipse(18,0,12,12);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,26,26);
			noStroke();
			fill(40,this.fade);
			ellipse(-5,2,6,6);
			ellipse(5,2,6,6);
			stroke(50,150,200,this.fade);
			point(-5,2);
			point(5,2);
			noStroke();
			if(this.name === "LightWeight"){
				fill(140,35,30,this.fade);
			}
			else{
				fill(180,this.fade);
			}
			rotate((sin(this.rate*4))*20+this.handSpin);
			arc(-18+this.handMove,0,20,20,90,270);
			rotate(-this.handSpin);
			arc(18,0,20,20,-90,90);
			rotate((sin(this.rate*4))*-20-this.extraSpin);
		break;
		case "SniperBow": case "ChargeSniperBow":
			rotate(this.extraSpin);
			if(this.name === "ChargeSniperBow"){
				fill(100,200,255,this.fade);
				noStroke();
				ellipse(0,0,34,34);
				ellipse(6,((sin(this.rate*4))*-9),20,20);
				ellipse(-6,((sin(this.rate*4))*9),20,20);
				ellipse(-14,11,20,20);
				ellipse(14,11,20,20);
			}
			stroke(180,this.fade);
			strokeWeight(2);
			line(-12,20,12,20);
			stroke(200,this.fade);
			strokeWeight(4);
			noFill();
			arc(0,20,24,12,-180,0);
			stroke(this.color2[0]*4/5,this.color2[1]*4/5,this.color2[2]*4/5,this.fade);
			strokeWeight(2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),12,12);
			ellipse(-6,((sin(this.rate*4))*9),12,12);
			stroke(this.color[0]*4/5,this.color[1]*4/5,this.color[2]*4/5,this.fade);
			strokeWeight(4);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-14,11,12,12);
			ellipse(14,11,12,12);
			ellipse(0,0,26,26);
			noStroke();
			fill(40,this.fade);
			ellipse(-5,2,6,6);
			ellipse(5,2,6,6);
			stroke(50,150,200,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(-this.extraSpin);
		break;
		case "TankBot": case "CarrierShip":
			if(this.name === "TankBot"){
				stroke(this.color2[0]*4/5,this.color2[1]*4/5,this.color2[2]*4/5,this.fade);
				strokeWeight(2);
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				rect(-13,-10,26,6,2);
				rect(-13,4,26,6,2);
			}
			stroke(this.color[0]*4/5,this.color[1]*4/5,this.color[2]*4/5,this.fade);
			strokeWeight(4);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rect(-10,-15,20,30,3);
			if(this.name === "CarrierShip"){
				fill(140,150,160,this.fade);
				noStroke();
				rect(-1,-12,2,24);
				rect(-5,-12,2,24);
				rect(3,-12,2,24);
			}
		break;
		case "Phantomess":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade*2/5);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade*3/5);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade*4/5);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*3/5);
			arc(0,0,34,34,-200,20);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Ennealis":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color[0]-10,this.color[1]-10,this.color[2]-10,this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.sandals);
			ellipse(6,((sin(this.rate*4))*-9),14.25,14.25);
			ellipse(-6,((sin(this.rate*4))*9),14.25,14.25);
			fill(this.color[0]-10,this.color[1]-10,this.color[2]-10,this.fade);
			ellipse(6,((sin(this.rate*4))*-9)-0.25,13,13);
			ellipse(-6,((sin(this.rate*4))*9)-0.25,13,13);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.sandals);
			rect(5.75,((sin(this.rate*4))*-9)-6.75,0.5,13.5);
			rect(-6.25,((sin(this.rate*4))*9)-6.75,0.5,13.5);
			fill(232,230,249,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(155,193,227,this.fade*this.dress);
			ellipse(-5,9,15,15);
			ellipse(5,9,15,15);
			rotate(this.handSpin);
			translate(-18-this.handMove,0);
			rotate(this.pointSpin);
			fill(140,this.fade);
			triangle(-4,0,4,0,0,36);
			fill(160,this.fade);
			triangle(-2,0,2,0,0,18);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,16,16);
			rotate(-this.pointSpin);
			translate(18+this.handMove,0);
			rotate(-this.handSpin+(sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			noStroke();
			fill(63,98,187,this.fade);
			arc(0,0,32,32,-205,25);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			triangle(14.5,6.25,0,-4,-14.5,6.25);
			fill(155,193,227,this.fade*this.dress);
			rotate(this.handSpin);
			quad(-19-this.handMove,-9,-19-this.handMove,9,-16-this.handMove,8,-16-this.handMove,-8);
			rotate(-this.handSpin+(sin(this.rate*4))*20);
			quad(19,-9,19,9,16,8,16,-8);
			rotate((sin(this.rate*4))*-20);
			fill(247,177,51,this.fade*this.dress);
			triangle(0,1,-1.5,3,1.5,3);
			triangle(0,1,-0.75,0,0.75,0);
			quad(0,1,-1.5,-1,-3.625,-1.4375,-7.25,1.125);
			quad(0,1,1.5,-1,3.625,-1.4375,7.25,1.125);
			stroke(66,64,157,this.fade);
			strokeWeight(4);
			point(-5,3);
			point(5,3);
			stroke(247,177,50,this.fade*this.dress);
			strokeWeight(1.5);
			rotate(this.handSpin);
			line(-16-this.handMove,8,-16-this.handMove,-8);
			rotate(-this.handSpin+(sin(this.rate*4))*20);
			line(16,8,16,-8);
			rotate((sin(this.rate*4))*-20-this.completeSpin);
		break;
		case "Donu":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rect(-28,-3,20,6);
			rect(8,-3,20,6);
			rotate((sin(this.rate*4))*-20);
			stroke(this.color[0],this.color[1],this.color[2],this.fade);
			strokeWeight(10);
			noFill();
			ellipse(0,0,20,20);
		break;
		case "Deca":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			triangle(-10,-5,-10,5,-30,0);
			triangle(10,-5,10,5,30,0);
			rotate((sin(this.rate*4))*-20);
			quad(0,-18,18,0,0,18,-18,0);
			fill(this.color[0]*7/8,this.color[1]*7/8,this.color[2]*7/8,this.fade);
			triangle(0,0,0,-18,-18,0);
			triangle(0,0,0,18,18,0);
		break;
		case "Spheron":
			noStroke();
			fill(this.color[0]*7/8,this.color[1]*7/8,this.color[2]*7/8,this.fade);
			ellipse(sin(this.time*3)*24,cos(this.time*3)*24,10,10);
			ellipse(sin(this.time*3+120)*24,cos(this.time*3+120)*24,10,10);
			ellipse(sin(this.time*3+240)*24,cos(this.time*3+240)*24,10,10);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(sin(this.time*3)*24,cos(this.time*3)*24,4,4);
			ellipse(sin(this.time*3+120)*24,cos(this.time*3+120)*24,4,4);
			ellipse(sin(this.time*3+240)*24,cos(this.time*3+240)*24,4,4);
			noFill();
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(3);
			for(k=0;k<3;k++){
				arc(8,0,16,12,-180,-30);
				rotate(120);
			}
		break;
		case "The Collector":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0]*4/5*(1-this.dress)+20*this.dress,this.color[1]*4/5*(1-this.dress)+90*this.dress,this.color[2]*4/5*(1-this.dress)+105*this.dress,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			rotate((sin(this.rate*4))*20);
			translate(-this.armMove*18,this.handMove+this.armMove*18);
			stroke(175,155,100,this.fade);
			strokeWeight(2);
			line(18,-10,18,24);
			line(18,18,12,24);
			line(18,18,24,24);
			noStroke();
			fill(220,250,45,this.fade);
			ellipse(18,32,12,12);
			fill(this.color[0]*(1-this.dress)+40*this.dress,this.color[1]*(1-this.dress)+110*this.dress,this.color[2]*(1-this.dress)+125*this.dress,this.fade);
			ellipse(18,0,16,16);
			translate(this.armMove*18,-this.handMove-this.armMove*18);
			ellipse(-18,0,16,16);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(180,250,45,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(40,110,125,this.fade*this.dress);
			arc(0,0,35,35,-210,30);
			rotate(-this.completeSpin);
		break;
		case "Eternal Awakened King": case "The Awakened Void":
			rotate(this.completeSpin);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade/2);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,100);
			arc(-13,-22,12,36,95,100);
			arc(-11,-24,8,32,95,100);
			arc(15,-20,16,40,80,85);
			arc(13,-22,12,36,80,85);
			arc(11,-24,8,32,80,85);
			noStroke();
			rotate(this.handSpin);
			translate(-18+this.handMoveX,this.handMoveY);
			rotate(this.pointSpin);
			fill(40,this.fade);
			rect(-4,5,8,4,2);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			triangle(2,9,0,9,0,32);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			triangle(-2,9,0,9,0,32);
			rotate(-this.pointSpin);
			translate(18-this.handMoveX,-this.handMoveY);
			rotate(-this.handSpin);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate(this.handSpin);
			ellipse(-18+this.handMoveX,this.handMoveY,16,16);
			rotate((sin(this.rate*4))*20-this.handSpin);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			triangle(-3,14,3,14,0,17);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			rotate(this.handSpin);
			translate(-18+this.handMoveX,this.handMoveY);
			rotate(this.pointSpin);
			quad(-2,0,0,-2,2,0,0,2);
			rotate(-this.pointSpin);
			translate(18-this.handMoveX,-this.handMoveY);
			rotate((sin(this.rate*4))*20-this.handSpin);
			quad(16,0,18,-2,20,0,18,2);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(-5,2,5,4,30,210);
			arc(5,2,5,4,-30,150);
			rotate(-this.completeSpin);
		break;
		case "Eternal Hero": case "Void Hero":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			rect(-19,-8,2,16);
			rect(17,-8,2,16);
			rotate((sin(this.rate*4))*-20);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(-5,2,5,4,30,210);
			arc(5,2,5,4,-30,150);
		break;
		case "Dimension Wanderer":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(250,250,240,this.fade);
			rect(-18.5,-12+this.handMove,1,32);
			fill(225,250,200,this.fade);
			ellipse(-18,26+this.handMove,6,6);
			stroke(250,250,240,this.fade);
			noFill();
			strokeWeight(1);
			ellipse(-18,26+this.handMove,12,12);
			line(-18,32+this.handMove,-18,20+this.handMove);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,this.handMove,16,16);
			ellipse(18,0,16,16);
			fill(255,255,250,this.fade);
			quad(-20,this.handMove,-18,-2+this.handMove,-16,this.handMove,-18,2+this.handMove);
			quad(20,0,18,-2,16,0,18,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(255,250,225,this.fade);
			arc(-5,2,5,4,30,210);
			arc(5,2,5,4,-30,150);
			fill(0,this.fade);
			rect(-14,-10,28,4);
			fill(220,220,210,this.fade);
			quad(-3,-12,0,-7,3,-12,0,-17);
			fill(0,this.fade);
			quad(-2,-12,0,-9,2,-12,0,-15);
		break;
		case "Conveyor":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(245,245,250,this.fade);
			stroke(10,15,25,this.fade);
			strokeWeight(3);
			strokeJoin(ROUND);
			translate(0,-20);
			for(k=0;k<5;k++){
				rotate(72);
				triangle(0,0,-12.5,-17,12.5,-17);
				triangle(0,-21,-12.5,-17,12.5,-17);
			}
			translate(0,20);
			strokeJoin(MITER);
			noStroke();
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(0,5,20,this.fade);
			rect(-14,-10,28,4);
			fill(225,225,230,this.fade);
			quad(-3,-12,0,-7,3,-12,0,-17);
			fill(0,5,20,this.fade);
			quad(-2,-12,0,-9,2,-12,0,-15);
		break;
		case "Watcher":
			rotate(this.completeSpin);
			stroke(45,85,130,this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,105);
			arc(-13,-22,12,36,95,105);
			arc(-11,-24,8,32,95,105);
			arc(15,-20,16,40,75,85);
			arc(13,-22,12,36,75,85);
			arc(11,-24,8,32,75,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			fill(15,15,30,this.fade);
			ellipse(-18,0,16,16);
			translate(-18,0);
			rotate(this.pointSpin);
			fill(5,0,0,this.fade);
			rect(-2,-12,4,27);
			fill(10,5,15,this.fade);
			rect(-10,14,6,14,2);
			rect(4,14,6,14,2);
			rect(-4,15,8,12);
			fill(200,25,200,this.fade);
			rect(-4,15,1,12);
			rect(3,15,1,12);
			fill(15,15,30,this.fade);
			rotate(-this.pointSpin);
			translate(18,0);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			fill(145,10,245,this.fade);
			rotate(this.handMove);
			rect(-20,-8,1,16,2);
			rect(-17,-8,1,16,2);
			rotate(-this.handMove);
			rect(19,-8,1,16,2);
			rect(16,-8,1,16,2);
			rotate((sin(this.rate*4))*-20);
			fill(255,165,250,this.fade);
			ellipse(0,14,6,4);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(250,250,255,this.fade);
			arc(-5,2,6,4,30,210);
			arc(5,2,6,4,-30,150);
			fill(30,30,60,this.fade);
			arc(0,0,33,33,-180,0);
			rotate(-this.completeSpin);
		break;
		case "Expunged":
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,105);
			arc(-13,-22,12,36,95,105);
			arc(-11,-24,8,32,95,105);
			arc(15,-20,16,40,75,85);
			arc(13,-22,12,36,75,85);
			arc(11,-24,8,32,75,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0]/2,this.color[1]/2,this.color[2]/2,this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(70,75,95,this.fade);
			rect(-19,-8,2,16);
			rect(17,-8,2,16);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(this.color[0]*3/4,this.color[1]*3/4,this.color[2]*3/4,this.fade);
			ellipse(0,7,12,12);
			fill(255,this.fade);
			ellipse(0,9,6,6);
		break;
		case "Checkpoint":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade);
			noFill();
			strokeWeight(1.5);
			ellipse(0,0,10,10);
			for(k=0;k<8;k++){
				line(-5,0,-5,-12);
				line(-5,-12,-2,-5);
				rotate(45);
			}
		break;
		case "Redistributor":
			rotate(this.extraSpin);
			noStroke();
			fill(this.colors[0][0],this.colors[0][1],this.colors[0][2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			fill(this.colors[1][0],this.colors[1][1],this.colors[1][2],this.fade);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.colors[2][0],this.colors[2][1],this.colors[2][2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			fill(this.colors[3][0],this.colors[3][1],this.colors[3][2],this.fade);
			rotate(this.handMove);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20-this.handMove);
			fill(this.colors[4][0],this.colors[4][1],this.colors[4][2],this.fade);
			ellipse(0,0,30,30);
			stroke(255,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			rotate(-this.extraSpin);
		break;
		case "Vengeful Ignitus":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			translate(-18,0);
			rotate(this.pointSpin);
			fill(190,235,255,this.fade);
			triangle(0,18,0,30,30,24);
			fill(50,150,245,this.fade);
			triangle(0,21,0,27,20,24);
			stroke(5,20,75,this.fade);
			strokeWeight(3);
			line(0,0,0,30);
			rotate(-this.pointSpin);
			translate(18,0);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(165,220,255,this.fade);
			strokeWeight(2);
			translate(-15,-16);
			line(15,15,3,9);
			line(9,12,12,3);
			line(15,15,9,27);
			line(12,21,3,24);
			line(15,15,21,21);
			line(21,21,24,27);
			line(21,21,24,18);
			line(18,18,21,6);
			translate(15,16);
			rotate((sin(this.rate*4))*20+this.handMove);
			line(-20,-4,-16,4);
			line(-18,0,-20,7);
			rotate(-this.handMove);
			line(24,2,15,0);
			line(15,0,22,-5);
			rotate((sin(this.rate*4))*-20);
			noStroke();
			fill(0,10,35,this.fade);
			rect(-14,-10,28,4);
			fill(100,170,240,this.fade);
			quad(-3,-12,0,-7,3,-12,0,-17);
			fill(200,240,255,this.fade);
			quad(-2,-12,0,-9,2,-12,0,-15);
			rotate(-this.completeSpin);
		break;
		case "Regenerator":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			stroke(15,15,25,this.fade);
			strokeWeight(2);
			line(18,-10,18,18);
			noStroke();
			fill(245,120,120,this.fade);
			rect(16,18,4,16);
			rect(10,24,16,4);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(160,255,160,this.fade);
			rotate(-60);
			for(k=0;k<5;k++){
				triangle(-2,-14,2,-14,0,-19);
				rotate(30);
			}
			rotate(-90);
			fill(10,35,20,this.fade);
			ellipse(-12,0,12,12);
			ellipse(12,0,12,12);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(10,25,40,this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(40,70,45,this.fade);
			rect(-16,-12,32,5,2);
			rect(-10,-21,20,12,2);
		break;
		case "Tharea the Shattered":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,this.handMove,16,16);
			ellipse(18,this.handMove,16,16);
			fill(this.color[0]/2+125,this.color[1]/2+125,this.color[2]/2+125,this.fade);
			rect(-26,-1+this.handMove,16,2);
			rect(10,-1+this.handMove,16,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(255,100,100,this.fade/6);
			ellipse(-6,6,6,4);
			ellipse(6,6,6,4);
			noFill();
			stroke(0,this.fade);
			strokeWeight(2);
			arc(0,5,18,9,30,150);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(this.color[0]*3/5,this.color[1]*3/5,this.color[2]*3/5,this.fade);
			arc(0,0,33,33,-200,20);
			rotate(-this.extraSpin);
		break;
		case "Councilman":
			stroke(250,235,210,this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,105);
			arc(-13,-22,12,36,95,105);
			arc(-11,-24,8,32,95,105);
			arc(15,-20,16,40,75,85);
			arc(13,-22,12,36,75,85);
			arc(11,-24,8,32,75,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(255,250,220,this.fade);
			strokeWeight(3);
			line(-6,-1,-6,5);
			line(6,-1,6,5);
			line(0,-1,0,5);
			noFill();
			stroke(250,240,230,this.fade);
			strokeWeight(2);
			ellipse(0,-15,22,8);
		break;
		case "Curtailment":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,0,16,16);
			fill(0,this.fade);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			arc(0,0,30,30,-90,90);
			stroke(255,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(85,85,105,this.fade);
			rect(-16,-12,32,5,2);
			rect(-10,-21,20,12,2);
		break;
		case "Autosentry":
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate(this.time*3);
			for(k=0;k<5;k++){
				rotate(72);
				triangle(-3,-15,3,-15,0,-30);
			}
			rotate(this.time*-3);
			ellipse(0,0,24,24);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(0,0,12,12);
		break;
		case "Oppressor":
			rotate(this.completeSpin);
			stroke(245,200,45,this.fade);
			strokeWeight(4);
			noFill();
			arc(-15,-20,16,40,95,105);
			arc(-13,-22,12,36,95,105);
			arc(-11,-24,8,32,95,105);
			arc(15,-20,16,40,75,85);
			arc(13,-22,12,36,75,85);
			arc(11,-24,8,32,75,85);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20+this.handMove);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			translate(-18,0);
			rotate(this.pointSpin);
			fill(140,90,60,this.fade);
			rect(-2,-12,4,27);
			fill(155,this.fade);
			arc(0,15,24,24,-45,45);
			arc(0,15,24,24,135,225);
			fill(90,85,85,this.fade);
			arc(0,15,16,16,-45,45);
			arc(0,15,16,16,135,225);
			fill(155,this.fade);
			arc(0,15,14,14,-45,45);
			arc(0,15,14,14,135,225);
			ellipse(0,15,8,8);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate(-this.pointSpin);
			translate(18,0);
			rotate(-this.handMove);
			ellipse(18,0,16,16);
			fill(245,195,150,this.fade);
			rotate(this.handMove);
			rect(-20,-8,1,16,2);
			rect(-17,-8,1,16,2);
			rotate(-this.handMove);
			rect(19,-8,1,16,2);
			rect(16,-8,1,16,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(-this.completeSpin);
		break;
		case "Zenith":
			rotate(this.completeSpin);
			noStroke();
			fill(170,15,10,this.fade);
			rotate(-60);
			for(k=0;k<5;k++){
				triangle(-2,-14,2,-14,0,-19);
				rotate(30);
			}
			rotate(-90);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			fill(190,5,5,this.fade);
			ellipse(0,7,12,12);
			fill(0,this.fade);
			ellipse(0,9,6,6);
			rotate(-this.direction-this.completeSpin);
			for(k=0;k<6;k++){
				translate(sin(this.time+k*60)*27.5,cos(this.time+k*60)*27.5);
				fill(this.pointColor3[k][0],this.pointColor3[k][1],this.pointColor3[k][2],this.fade);
				rotate(this.pointSpin[k]+this.direction);
				for(l=0;l<6;l++){
					rotate(60);
					triangle(-2,-7,2,-7,0,-10);
				}
				fill(this.pointColor[k][0],this.pointColor[k][1],this.pointColor[k][2],this.fade);
				ellipse(0,0,15,15);
				fill(this.pointColor2[k][0],this.pointColor2[k][1],this.pointColor2[k][2],this.fade);
				ellipse(0,3.5,6,6);
				fill(0,this.fade);
				ellipse(0,4.5,3,3);
				rotate(-this.pointSpin[k]-this.direction);
				translate(sin(this.time+k*60)*-27.5,cos(this.time+k*60)*-27.5);
			}
			rotate(this.direction+this.completeSpin);
			noFill();
			stroke(240,120,115,this.fade);
			strokeWeight(3);
			ellipse(0,-15,22,8);
			rotate(-this.completeSpin);
		break;
		case "Inconsistent": case "Irreconcilable":
			noStroke();
			fill(this.colors[0][0],this.colors[0][1],this.colors[0][2],this.fade);
			ellipse(6+random(-2,2),((sin(this.rate*4))*-9)+random(-2,2),14+random(-2,2),14+random(-2,2));
			fill(this.colors[1][0],this.colors[1][1],this.colors[1][2],this.fade);
			ellipse(-6+random(-2,2),((sin(this.rate*4))*9)+random(-2,2),14+random(-2,2),14+random(-2,2));
			fill(this.colors[2][0],this.colors[2][1],this.colors[2][2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18+random(-2,2),random(-2,2),16+random(-2,2),16+random(-2,2));
			fill(this.colors[3][0],this.colors[3][1],this.colors[3][2],this.fade);
			ellipse(18+random(-2,2),random(-2,2),16+random(-2,2),16+random(-2,2));
			rotate((sin(this.rate*4))*-20);
			fill(this.colors[4][0],this.colors[4][1],this.colors[4][2],this.fade);
			ellipse(random(-2,2),random(-2,2),30+random(-2,2),30+random(-2,2));
			stroke(255,this.fade);
			strokeWeight(4);
			point(-5+random(-2,2),2+random(-2,2));
			point(5+random(-2,2),2+random(-2,2));
			strokeWeight(3);
			line(-5+random(-2,2),9+random(-2,2),5+random(-2,2),9+random(-2,2));
		break;
		case "Awakened Guardian":
			rotate(this.extraSpin);
			translate(-12,18+this.handMove);
			rotate(this.handSpin);
			stroke(255,this.fade);
			strokeWeight(2);
			line(32,4,34,-4);
			line(28,4,30,-4);
			stroke(5,this.fade);
			strokeWeight(3);
			line(-7,0,38,0);
			stroke(255,this.fade);
			strokeWeight(2);
			line(34,-4,36,4);
			line(30,-4,32,4);
			line(26,-4,28,4);
			noStroke();
			fill(5,this.fade);
			triangle(38,-6,38,6,52,0);
			rotate(-this.handSpin);
			translate(12,-18-this.handMove);
			fill(255,this.fade);
			ellipse(-12,5,6,6);
			ellipse(12,5,6,6);
			fill(255,this.fade*2/5);
			ellipse(-12,5,8,8);
			ellipse(12,5,8,8);
			ellipse(-12,5,10,10);
			ellipse(12,5,10,10);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			ellipse(-12,15+this.handMove,16,16);
			ellipse(12,15,16,16);
			stroke(255,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(255,this.fade);
			triangle(-12,3,-20,-3,-16,-7);
			triangle(12,3,20,-3,16,-7);
			arc(0,0,32,32,-200,20);
			quad(-20,15+this.handMove,-4,15+this.handMove,-5,12+this.handMove,-19,12+this.handMove);
			quad(-20,16+this.handMove,-4,16+this.handMove,-5,19+this.handMove,-19,19+this.handMove);
			quad(20,15,4,15,5,12,19,12);
			quad(20,16,4,16,5,19,19,19);
			rect(-15,14+this.handMove,6,3);
			rect(9,14,6,3);
			rect(-13,18+this.handMove,2,4);
			rect(11,18,2,4);
			rotate(-this.extraSpin);
		break;
		case "Awakened Mage":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(25,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20-this.handSpin);
			ellipse(-18,0,16,16);
			rotate(this.handSpin);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(193,0,133,this.fade);
			rotate((sin(this.rate*4))*20-this.handSpin);
			arc(-17,0,18,18,-90,90);
			rotate(this.handSpin);
			arc(17,0,18,18,90,270);
			rotate((sin(this.rate*4))*-20);
			fill(255,this.fade);
			rotate((sin(this.rate*4))*20-this.handSpin);
			rect(-18,-9,1,18);
			rotate(this.handSpin);
			rect(17,-9,1,18);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(255,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			noStroke();
			fill(193,0,133,this.fade);
			arc(0,1,30,30,-200,20);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			arc(0,0,32,32,-200,20);
			triangle(-12,3,-20,-3,-16,-7);
			triangle(12,3,20,-3,16,-7);
		break;
		case "Catharis":
			rotate(this.extraSpin);
			translate(-12,18+this.handMove);
			rotate(this.handSpin);
			stroke(255,this.fade);
			strokeWeight(2);
			line(32,4,34,-4);
			line(28,4,30,-4);
			stroke(200,200,180,this.fade);
			strokeWeight(3);
			line(-7,0,38,0);
			stroke(255,this.fade);
			strokeWeight(2);
			line(34,-4,36,4);
			line(30,-4,32,4);
			line(26,-4,28,4);
			noStroke();
			fill(5,this.fade);
			triangle(38,-6,38,6,52,0);
			rotate(-this.handSpin);
			translate(12,-18-this.handMove);
			fill(255,200,200,this.fade);
			ellipse(-12,5,6,6);
			ellipse(12,5,6,6);
			fill(255,200,200,this.fade*2/5);
			ellipse(-12,5,8,8);
			ellipse(12,5,8,8);
			ellipse(-12,5,10,10);
			ellipse(12,5,10,10);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			ellipse(-12,15+this.handMove,16,16);
			ellipse(12,15,16,16);
			stroke(255,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(180,180,160,this.fade);
			triangle(-12,3,-20,-3,-16,-7);
			triangle(12,3,20,-3,16,-7);
			arc(0,0,32,32,-200,20);
			quad(-20,15+this.handMove,-4,15+this.handMove,-5,12+this.handMove,-19,12+this.handMove);
			quad(-20,16+this.handMove,-4,16+this.handMove,-5,19+this.handMove,-19,19+this.handMove);
			quad(20,15,4,15,5,12,19,12);
			quad(20,16,4,16,5,19,19,19);
			rect(-15,14+this.handMove,6,3);
			rect(9,14,6,3);
			rect(-13,18+this.handMove,2,4);
			rect(11,18,2,4);
			rotate(-this.extraSpin);
		break;
		case "War Machine":
			rotate(this.extraSpin);
			scale(3/4);
			noStroke();
			fill(80,this.fade);
			rect(-25,0,4,24,1);
			rect(-20.5,0,4,24,1);
			rect(21,0,4,24,1);
			rect(16.5,0,4,24,1);
			scale(4/3);
			stroke(90,this.fade);
			strokeWeight(5);
			fill(140,this.fade);
			rect(-28,-4,56,8,2);
			rect(-12,-12,24,24,2);
			fill(255,0,0,this.fade);
			noStroke();
			ellipse(-6,6,5,5);
			ellipse(6,6,5,5);
			rotate(-this.extraSpin);
		break;
		case "Torpedo Sphere":
			stroke(90,this.fade);
			strokeWeight(1);
			fill(140,this.fade);
			for(k=0;k<20;k++){
				rotate(18);
				rect(-20,-2,8,4);
			}
			strokeWeight(4);
			ellipse(0,0,30,30);
			fill(255,0,0,this.fade);
			noStroke();
			ellipse(0,6,5,5);
		break;
		case "Rotoblade":
			stroke(90,this.fade);
			strokeWeight(3);
			fill(140,this.fade);
			rotate(this.time*5);
			for(k=0;k<5;k++){
				rotate(72);
				triangle(-7,-12,7,-12,0,-28);
			}
			rotate(-this.time*5);
			strokeWeight(4);
			ellipse(0,0,30,30);
			fill(255,0,0,this.fade);
			noStroke();
			ellipse(0,0,5,5);
		break;
		case "Field Artillery":
			stroke(90,this.fade);
			strokeWeight(5);
			fill(140,this.fade);
			rect(-32,-4,16,16,2);
			rect(16,-4,16,16,2);
			rect(-36,-4,72,8,2);
			rect(-12,-12,24,24,2);
			fill(255,0,0,this.fade);
			noStroke();
			ellipse(-6,6,5,5);
			ellipse(6,6,5,5);
		break;
		case "Planetary Devastator":
			stroke(90,this.fade);
			strokeWeight(5);
			fill(140,this.fade);
			rect(-12,-24,24,18,3);
			rect(-8,-6,16,12);
			rect(-12,6,24,18,3);
			fill(255,0,0,this.fade);
			noStroke();
			ellipse(-6,18,5,5);
			ellipse(6,18,5,5);
		break;
		case "Rewriter":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(10,25,40,this.fade);
			triangle(0,14,7,16,7,12);
			triangle(0,14,-7,16,-7,12);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			stroke(30,30,40,this.fade);
			strokeWeight(2);
			fill(245,245,250,this.fade);
			rect(-9,-1,18,6,2);
			noStroke();
			fill(170,170,175,this.fade);
			rect(-16,-12,32,5,2);
			rect(-10,-21,20,12,2);
		break;
		case "Octrax":
			rotate(this.completeSpin);
			stroke(130,77,118,this.fade);
			strokeWeight(3);
			rotate(-18);
			for(var j=0;j<8;j++){
				line(sin(this.time*8+j*25)*2,-14-j*2,sin(this.time*8+(j-1)*25)*2,-14-j*2+2);
			}
			rotate(36);
			for(j=0;j<8;j++){
				line(sin(this.time*8+j*25+70)*-2,-14-j*2,sin(this.time*8+(j-1)*25+70)*-2,-14-j*2+2);
			}
			rotate(-18);
			noStroke();
			fill(this.color[0]-10,this.color[1]-10,this.color[2]-10,this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.sandals);
			ellipse(6,((sin(this.rate*4))*-9),14.25,14.25);
			ellipse(-6,((sin(this.rate*4))*9),14.25,14.25);
			fill(this.color[0]-10,this.color[1]-10,this.color[2]-10,this.fade);
			ellipse(6,((sin(this.rate*4))*-9)-0.25,13,13);
			ellipse(-6,((sin(this.rate*4))*9)-0.25,13,13);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.sandals);
			rect(5.75,((sin(this.rate*4))*-9)-6.75,0.5,13.5);
			rect(-6.25,((sin(this.rate*4))*9)-6.75,0.5,13.5);
			fill(203,156,228,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(158,116,245,this.fade*this.dress);
			ellipse(-5,9,15,15);
			ellipse(5,9,15,15);
			rotate(this.handSpin);
			translate(-18-this.handMove,0);
			rotate(this.pointSpin);
			fill(226,205,122,this.fade);
			triangle(-4,0,4,0,0,36);
			fill(206,185,102,this.fade);
			triangle(-2,0,2,0,0,18);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,16,16);
			rotate(-this.pointSpin);
			translate(18+this.handMove,0);
			rotate(-this.handSpin+(sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			noStroke();
			fill(61,72,105,this.fade);
			arc(0,0,32,32,-205,25);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			triangle(14.5,6.25,0,-4,-14.5,6.25);
			fill(158,116,245,this.fade*this.dress);
			rotate(this.handSpin);
			quad(-19-this.handMove,-9,-19-this.handMove,9,-16-this.handMove,8,-16-this.handMove,-8);
			rotate(-this.handSpin+(sin(this.rate*4))*20);
			quad(19,-9,19,9,16,8,16,-8);
			rotate((sin(this.rate*4))*-20);
			fill(255,197,71,this.fade*this.dress);
			triangle(0,1,-1.5,3,1.5,3);
			triangle(0,1,-0.75,0,0.75,0);
			quad(0,1,-1.5,-1,-3.625,-1.4375,-7.25,1.125);
			quad(0,1,1.5,-1,3.625,-1.4375,7.25,1.125);
			stroke(66,64,157,this.fade);
			strokeWeight(4);
			point(-5,3);
			point(5,3);
			stroke(255,197,71,this.fade*this.dress);
			strokeWeight(1.5);
			rotate(this.handSpin);
			line(-16-this.handMove,8,-16-this.handMove,-8);
			rotate(-this.handSpin+(sin(this.rate*4))*20);
			line(16,8,16,-8);
			rotate((sin(this.rate*4))*-20-this.completeSpin);
		break;
		case "Unimaginable":
			noStroke();
			fill(this.colors[0][0],this.colors[0][1],this.colors[0][2],this.fade);
			ellipse(6+random(-5,5),((sin(this.rate*4))*-9)+random(-5,5),14+random(-5,5),14+random(-5,5));
			fill(this.colors[1][0],this.colors[1][1],this.colors[1][2],this.fade);
			ellipse(-6+random(-5,5),((sin(this.rate*4))*9)+random(-5,5),14+random(-5,5),14+random(-5,5));
			fill(this.colors[2][0],this.colors[2][1],this.colors[2][2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(-18+random(-5,5),random(-5,5),16+random(-5,5),16+random(-5,5));
			fill(this.colors[3][0],this.colors[3][1],this.colors[3][2],this.fade);
			ellipse(18+random(-5,5),random(-5,5),16+random(-5,5),16+random(-5,5));
			rotate((sin(this.rate*4))*-20);
			fill(this.colors[4][0],this.colors[4][1],this.colors[4][2],this.fade);
			ellipse(random(-5,5),random(-5,5),30+random(-5,5),30+random(-5,5));
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5+random(-5,5),2+random(-5,5));
			point(5+random(-5,5),2+random(-5,5));
			strokeWeight(3);
			line(-5+random(-5,5),9+random(-5,5),5+random(-5,5),9+random(-5,5));
		break;
		case "Cracked Core":
			noStroke();
			fill(this.colors[0][0],this.colors[0][1],this.colors[0][2],this.fade);
			ellipse(0,0,30,30);
			fill(0,this.fade);
			ellipse(0,0,27,27);
			fill(this.colors[2][0],this.colors[2][1],this.colors[2][2],this.fade);
			ellipse(-5,-2,10,10);
			fill(this.colors[3][0],this.colors[3][1],this.colors[3][2],this.fade);
			ellipse(6,1,8,8);
			fill(0,this.fade);
			ellipse(-5,-2,7,7);
			ellipse(6,1,5,5);
		break;
		case "Envisioned":
			this.randoms = [random(0.9,1.1),random(0.9,1.1),random(-5,5)];
			scale(this.randoms[0],this.randoms[1]);
			rotate(this.randoms[2]);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(10,25,40,this.fade);
			triangle(0,14,7,16,7,12);
			triangle(0,14,-7,16,-7,12);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			stroke(30,30,40,this.fade);
			strokeWeight(2);
			fill(245,245,250,this.fade);
			rect(-9,-1,18,6,2);
			noStroke();
			fill(170,170,175,this.fade);
			rect(-16,-12,32,5,2);
			rect(-10,-21,20,12,2);
			rotate(-this.randoms[2]);
			scale(1/this.randoms[0],1/this.randoms[1]);
		break;
		case "Eschaton":
			stroke(225,115,245,this.fade);
			noFill();
			strokeWeight(5);
			arc(0,-20,48,48,0,180);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,this.handMove,16,16);
			ellipse(18,0,16,16);
			fill(15,25,30,this.fade);
			rect(-20,-8+this.handMove,4,16);
			rect(16,-8,4,16);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			noStroke();
			fill(20,30,40,this.fade);
			arc(0,0,33,33,-180,0);
		break;
		case "Amoral":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			rotate(-60);
			for(k=0;k<5;k++){
				triangle(-2,-14,2,-14,0,-18);
				rotate(30);
			}
			rotate(-90);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(230,240,240,this.fade);
			ellipse(0,0,30,30);
			fill(25,150,190,this.fade);
			ellipse(0,7,12,12);
			fill(10,20,20,this.fade);
			ellipse(0,9,6,6);
			stroke(10,15,25,this.fade);
			noFill();
			strokeWeight(1.5);
			rotate((sin(this.rate*4))*20);
			ellipse(-18,-2,4,4);
			ellipse(-18,2,4,4);
			ellipse(-17,-6,4,4);
			ellipse(-17,6,4,4);
			ellipse(18,-2,4,4);
			ellipse(18,2,4,4);
			ellipse(17,-6,4,4);
			ellipse(17,6,4,4);
			rotate((sin(this.rate*4))*-20);
		break;
		case "Cysian":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(240,125,120,this.fade);
			quad(-20,0,-18,-2,-16,0,-18,2);
			quad(20,0,18,-2,16,0,18,2);
			rotate((sin(this.rate*4))*-20);
			triangle(0,16,-3,14,3,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(255,185,190,this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			stroke(250,120,120,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "PurgeDual": case "PurgeStaff": case "PurgeGun":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			stroke(200,50,255,this.fade/3);
			strokeWeight(4);
			if(this.name === "PurgeGun"){
				point(-5.5,36);
				stroke(200,50,255,this.fade);
				strokeWeight(2);point(-5,.5,36);
				noStroke();
				fill(0,this.fade);
				rect(-8.5,22,6,14,2);
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				rotate((sin(this.rate*4))*20);
				ellipse(18,0,16,16);
				rotate((sin(this.rate*4))*-20);
				ellipse(-6,17,16,16);
			}
			else if(this.name === "PurgeDual"){
				rotate(this.handMove);
				line(-16-this.armMove*2,10-this.armMove*10,-16-this.armMove*22,30-this.armMove*30);
				line(16+this.armMove*2,10-this.armMove*10,16+this.armMove*22,30-this.armMove*30);
				stroke(200,50,255,this.fade);
				strokeWeight(2);
				line(-16-this.armMove*2,10-this.armMove*10,-16-this.armMove*22,30-this.armMove*30);
				line(16+this.armMove*2,10-this.armMove*10,16+this.armMove*22,30-this.armMove*30);
				noStroke();
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				ellipse(-16-this.armMove*2,10-this.armMove*10,16,16);
				ellipse(16+this.armMove*2,10-this.armMove*10,16,16);
				rotate(-this.handMove);
			}
			else{
				line(-16,40+this.handMove,-16,-20+this.handMove);
				strokeWeight(8);
				line(-16,40+this.handMove,-16,30+this.handMove);
				line(-16,-10+this.handMove,-16,-20+this.handMove);
				stroke(200,50,255,this.fade);
				strokeWeight(2);
				line(-16,40+this.handMove,-16,-20+this.handMove);
				strokeWeight(4);
				line(-16,40+this.handMove,-16,30+this.handMove);
				line(-16,-10+this.handMove,-16,-20+this.handMove);
				noStroke();
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				ellipse(-16,10+this.handMove,16,16);
				rotate((sin(this.rate*4))*20);
				ellipse(18,0,16,16);
				rotate((sin(this.rate*4))*-20);
			}
			ellipse(0,0,30,30);
			noFill();
			stroke(220,0,0,this.fade);
			strokeWeight(3);
			line(-8,5,-4,7);
			line(8,5,4,7);
			rotate(-this.extraSpin);
		break;
		case "Flanker":
			if(this.burying>0){
				scale(this.burying);
				noStroke();
				fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
				ellipse(6,((sin(this.rate*4))*-9),14,14);
				ellipse(-6,((sin(this.rate*4))*9),14,14);
				rotate((sin(this.rate*4))*20);
				fill(196,165,60,this.fade);
				ellipse(-18,0,16,16);
				ellipse(18,0,16,16);
				fill(this.color[0],this.color[1],this.color[2],this.fade);
				arc(-18,0,20,20,-90,90);
				arc(18,0,20,20,90,270);
				rotate((sin(this.rate*4))*-20);
				ellipse(0,0,30,30);
				stroke(0,this.fade);
				strokeWeight(3);
				line(-5,9,5,9);
				strokeWeight(4);
				point(-5,2);
				point(5,2);
				scale(1/this.burying);
			}
		break;
		case "Illumina":
			noStroke();
			rotate(this.handSpin+this.completeSpin);
			translate(-18+this.handMoveX,this.handMoveY);
			rotate(this.pointSpin);
			fill(255,230,250,this.fade/2);
			triangle(3,9,-3,9,0,50);
			fill(220,210,220,this.fade);
			rect(-4,5,8,4,2);
			fill(235,225,235,this.fade);
			triangle(2,9,-2,9,0,44);
			rotate(-this.pointSpin);
			translate(18-this.handMoveX,-this.handMoveY);
			rotate(-this.handSpin);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(200,195,195,this.fade);
			ellipse(-5,9,13,13);
			ellipse(5,9,13,13);
			ellipse(-7,14,3,3);
			ellipse(7,14,3,3);
			fill(205,235,215,this.fade*this.armorFade3/255);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.armorFade/255);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(195,185,185,this.fade*this.armorFade/255);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate(this.handSpin);
			ellipse(-18+this.handMoveX,this.handMoveY,16,16);
			rotate((sin(this.rate*4))*20-this.handSpin);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			fill(120,100,125,this.fade*this.armorFade/255);
			rotate(this.handSpin);
			translate(-18+this.handMoveX,this.handMoveY);
			rotate(this.pointSpin);
			rect(-9,-2,18,3);
			rotate(-this.pointSpin);
			translate(18-this.handMoveX,-this.handMoveY);
			rotate((sin(this.rate*4))*20-this.handSpin);
			rect(16,-9,3,18);
			rotate((sin(this.rate*4))*-20);
			fill(255,215,255,this.fade*this.armorFade/255);
			rotate(this.handSpin);
			translate(-18+this.handMoveX,this.handMoveY);
			rotate(this.pointSpin);
			rect(-9,-1,18,1);
			rotate(-this.pointSpin);
			translate(18-this.handMoveX,-this.handMoveY);
			rotate((sin(this.rate*4))*20-this.handSpin);
			rect(17,-9,1,18);
			rotate((sin(this.rate*4))*-20);
			fill(250,225,255,this.fade*this.armorFade/255);
			triangle(-4,14,4,14,0,17);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30); 
			stroke(this.eyeColor[0],this.eyeColor[1],this.eyeColor[2],this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			noStroke();
			fill(110,100,115,this.fade*this.armorFade/255);
			rect(-14,-13,28,5,1);
			triangle(-14,-12,-10,-12,-12,-18);
			triangle(-6,-12,-2,-12,-4,-18);
			triangle(14,-12,10,-12,12,-18);
			triangle(6,-12,2,-12,4,-18);
			rotate(-this.completeSpin);
		break;
		case "Contradiction": case "Quandary":
			noStroke();
			if(this.name === "Quandary"){
				fill(180,145,255,this.fade);
			}
			else{
				fill(255,255,185,this.fade);
			}
			rotate(this.randomSpin);
			for(j=0;j<12;j++){
				rotate(30);
				triangle(-4,0,4,0,0,this.shrike*0.8+20);
			}
			rotate(-this.randomSpin);
			if(this.name === "Quandary"){
				fill(40,25,185,this.fade);
			}
			else{
				fill(175,125,30,this.fade);
			}
			rotate(this.randomSpin);
			for(j=0;j<12;j++){
				rotate(30);
				triangle(-2,0,2,0,0,this.shrike*0.4+10);
			}
			rotate(-this.randomSpin);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			ellipse(-18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			if(this.name === "Quandary"){
				stroke(30,25,50,this.fade);
				strokeWeight(1);
				translate(-15,-16);
				line(15,15,3,9);
				line(9,12,12,3);
				line(15,15,9,27);
				line(12,21,3,24);
				line(15,15,21,21);
				line(21,21,24,27);
				line(21,21,24,18);
				line(18,18,21,6);
				translate(15,16);
				rotate((sin(this.rate*4))*20);
				line(-20,-4,-16,4);
				line(-18,0,-20,7);
				line(24,2,15,0);
				line(15,0,22,-5);
				rotate((sin(this.rate*4))*-20);
				noStroke();
				fill(170,135,255,this.fade);
				ellipse(-5,2,4,4);
				ellipse(5,2,4,4);
				fill(30,20,155,this.fade);
			}
			else{
				fill(170,120,20,this.fade);
			}
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
		break;
		case "Gluckschmerz":
			rotate(this.extraSpin);
			noStroke();
			fill(40,this.fade);
			rect(-8,22,5,10,2);
			fill(this.color[0],this.color[1],this.color[2],this.fade*1/5);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade*3/5);
			ellipse(0,0,30,30);
			rotate((sin(this.rate*4))*20);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(-6,17,16,16);
			fill(255,this.fade*3/5);
			noStroke();
			textSize(32);
			text("?",0,3);
			stroke(this.color2[0],this.color2[1],this.color2[2],this.fade*3/5);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(-this.extraSpin);
		break;
		case "Embodimental Destabilization":
			rotate(this.time*-4);
			translate(-15,-15);
			rotate(this.time*2);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(180,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(this.time*-2);
			translate(30,30);
			rotate(this.time*2+180);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(180,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(this.time*-2-180);
			translate(10,-40);
			rotate(this.time*2+90);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(180,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(this.time*-2-90);
			translate(-50,50);
			rotate(this.time*2+270);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(180,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(this.time*-2-270);
			translate(25,-25);
			rotate(this.time*4);
		break;
		case "Distorted":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,0,14,14);
			ellipse(-6,0,14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			ellipse(0,0,30,30);
			stroke(0,this.fade*4/5);
			strokeWeight(3);
			line(-5,9,5,9);
			stroke(255,125,0,this.fade*4/5);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Entity-C":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate(this.handMove);
			stroke(85,105,140,this.fade);
			strokeWeight(3);
			line(-16-this.armMove*2,10-this.armMove*10,-16-this.armMove*22,30-this.armMove*30);
			line(16+this.armMove*2,10-this.armMove*10,16+this.armMove*22,30-this.armMove*30);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-16-this.armMove*2,10-this.armMove*10,16,16);
			ellipse(16+this.armMove*2,10-this.armMove*10,16,16);
			rotate(-this.handMove);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(-this.extraSpin);
		break;
		case "Giant Edge":
			rotate(this.completeSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(20,this.fade);
			triangle(24+this.handMove[0],this.handMove[1],12+this.handMove[0],this.handMove[1],18+this.handMove[0],this.handMove[1]+50);
			fill(140,this.fade);
			triangle(21+this.handMove[0],this.handMove[1],15+this.handMove[0],this.handMove[1],18+this.handMove[0],this.handMove[1]+25);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18+this.handMove[0],this.handMove[1],16,16);
			ellipse(0,0,30,30);
			fill(0,125,255,this.fade);
			quad(-20,0,-18,-2,-16,0,-18,2);
			quad(20+this.handMove[0],this.handMove[1],18+this.handMove[0],-2+this.handMove[1],16+this.handMove[0],this.handMove[1],18+this.handMove[0],2+this.handMove[1]);
			rotate((sin(this.rate*4))*-20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			rotate(-this.completeSpin);
		break;
		case "Keres":
			rotate(this.completeSpin);
			noStroke();
			fill(235,0,235,this.fade);
			quad(-30,-9,0,-3,30,9,0,3);
			quad(30,-9,0,-3,-30,9,0,3);
			fill(this.color[0]-20,this.color[1]-20,this.color[2]-20,this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*this.dress);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(240,180,200,this.fade);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			fill(this.color2[0]+10,this.color2[1]+10,this.color2[2]+10,this.fade*this.dress);
			ellipse(-5,9,14,14);
			ellipse(5,9,14,14);
			rotate((sin(this.rate*4))*20);
			translate(-this.armMove*18,this.handMove+this.armMove*18);
			fill(230,0,230,this.fade);
			triangle(14,0,22,0,18,32);
			noStroke();
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(18,0,16,16);
			translate(this.armMove*18,-this.handMove-this.armMove*18);
			ellipse(-18,0,16,16);
			fill(230,0,230,this.fade*this.dress);
			rect(-22,-8,2,16,2);
			rect(20-this.armMove*18,-8+this.handMove+this.armMove*18,2,16,2);
			rotate((sin(this.rate*4))*-20);
			fill(230,0,230,this.fade*this.dress);
			triangle(-3,-14,3,-14,0,-16);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(230,0,230,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
			rotate(-this.completeSpin);
		break;
		case "Wide":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-20,0,16,16);
			ellipse(20,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,34,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
		case "Weak Tank":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			rotate((sin(this.rate*4))*20+this.handSpin);
			ellipse(-21,0,22,22);
			ellipse(21,0,22,22);
			rotate((sin(this.rate*4))*-20-this.handSpin);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
			strokeWeight(3);
			line(-5,9,5,9);
		break;
		case "Compact Leviathan":
			rotate(this.extraSpin);
			noStroke();
			fill(65,80,130,this.fade);
			rect(-5,-21,10,10,2);
			fill(235,245,255,this.fade);
			ellipse(0,-16,6,6);
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			fill(165,205,245,this.fade);
			triangle(-3,14,3,14,0,16);
			fill(245,245,255,this.fade);
			triangle(-24,-2,-24,2,-30,-6);
			triangle(-24,-2,-24,2,-30,6);
			triangle(24,-2,24,2,30,-6);
			triangle(24,-2,24,2,30,6);
			fill(25,35,45,this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			fill(10,20,50,this.fade);
			beginShape();
			vertex(-6,-14);
			bezierVertex(-10,-15,-13,-19,-14,-22);
			bezierVertex(-14,-18,-12,-14,-11,-10);
			endShape();
			beginShape();
			vertex(6,-14);
			bezierVertex(10,-15,13,-19,14,-22);
			bezierVertex(14,-18,12,-14,11,-10);
			endShape();
			fill(115,140,180,this.fade);
			quad(-19,0,0,-1,-17,0,0,1);
			quad(19,0,0,-1,17,0,0,1);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(0,0,30,30);
			fill(225,250,255,this.fade);
			arc(-5,2,5,5,30,210);
			arc(5,2,5,5,-30,150);
			rotate(-this.extraSpin);
		break;
		case "Glass Cannon":
			rotate(this.extraSpin);
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade*3/5);
			ellipse(6,((sin(this.rate*4))*-9),12,12);
			ellipse(-6,((sin(this.rate*4))*9),12,12);
			fill(75,80,85,this.fade);
			rect(-7,10,8,18);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade*3/5);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(-10,16,16,16);
			ellipse(0,0,30,30);
			strokeWeight(4);
			stroke(115,120,120,this.fade*4/5);
			point(-5,2);
			point(5,2);
			rotate(-this.extraSpin);
		break;
		case "":
			noStroke();
			fill(this.color2[0],this.color2[1],this.color2[2],this.fade);
			ellipse(6,((sin(this.rate*4))*-9),14,14);
			ellipse(-6,((sin(this.rate*4))*9),14,14);
			rotate((sin(this.rate*4))*20);
			fill(this.color[0],this.color[1],this.color[2],this.fade);
			ellipse(-18,0,16,16);
			ellipse(18,0,16,16);
			rotate((sin(this.rate*4))*-20);
			ellipse(0,0,30,30);
			stroke(0,this.fade);
			strokeWeight(3);
			line(-5,9,5,9);
			strokeWeight(4);
			point(-5,2);
			point(5,2);
		break;
	}
	switch(this.name){
		case "Slow King":
			fill(180,20,120,this.fade/2*this.shieldFade/255);
			stroke(180,20,120,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<7;j++){
				vertex(sin(j*360/7)*28,cos(j*360/7)*28);
			}
			endShape(CLOSE);
			rotate(-this.time*2);
			beginShape();
			for(j=0;j<7;j++){
				vertex(sin(j*360/7)*36,cos(j*360/7)*36);
			}
			endShape(CLOSE);
			rotate(this.time);
		break;
		case "Frost King":
			fill(175,215,255,this.fade/2*this.shieldFade/255);
			noStroke();
			ellipse(0,0,56,56);
		break;
		case "Cyber Sentinel":
			scale(0.8+sin(this.rate)*0.1);
			stroke(132,180,189,this.shieldFade*this.fade/255);
			strokeWeight(2.5);
			noFill();
			ellipse(0,0,90,90);
			ellipse(0,0,60,90);
			ellipse(0,0,30,90);
			ellipse(0,0,90,60);
			ellipse(0,0,90,30);
			line(0,45,0,-45);
			line(45,0,-45,0);
			scale(1/(0.8+sin(this.rate)*0.1));
		break;
		case "Fallen Princess":
			fill(199,0,139,this.fade/2*this.shieldFade/255);
			stroke(199,0,139,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<5;j++){
				vertex(sin(j*72)*30,cos(j*72)*30);
			}
			endShape(CLOSE);
			rotate(-this.time);
		break;
		case "Moon Goddess":
			fill(255,219,255,this.fade/2*this.shieldFade/255);
			stroke(255,179,255,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<5;j++){
				vertex(sin(j*72)*30,cos(j*72)*30);
			}
			endShape(CLOSE);
			rotate(-this.time);
		break;
		case "Elite Raybeamer":
			fill(20,120,180,this.fade/2*this.shieldFade/255);
			stroke(20,120,180,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<7;j++){
				vertex(sin(j*360/7)*28,cos(j*360/7)*28);
			}
			endShape(CLOSE);
			rotate(-this.time*2);
			beginShape();
			for(j=0;j<7;j++){
				vertex(sin(j*360/7)*36,cos(j*360/7)*36);
			}
			endShape(CLOSE);
			rotate(this.time);
		break;
		case "Returned Mage":
			fill(195,35,95,this.fade/2*this.shieldFade/255);
			stroke(195,35,95,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<6;j++){
				vertex(sin(j*60)*28,cos(j*60)*28);
			}
			endShape(CLOSE);
			rotate(-this.time);
		break;
		case "True Vanguard":
			fill(240,240,190,this.fade/2*this.shieldFade/255);
			stroke(240,240,190,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<7;j++){
				vertex(sin(j*360/7)*28,cos(j*360/7)*28);
			}
			endShape(CLOSE);
			rotate(-this.time*2);
			beginShape();
			for(j=0;j<7;j++){
				vertex(sin(j*360/7)*36,cos(j*360/7)*36);
			}
			endShape(CLOSE);
			rotate(this.time);
		break;
		case "Avant Guard": case "Robotic Guard": case "Oppressor":
			fill(240,220,200,this.fade/2*this.shieldFade/255);
			stroke(240,220,200,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<7;j++){
				vertex(sin(j*360/7)*28,cos(j*360/7)*28);
			}
			endShape(CLOSE);
			rotate(-this.time*2);
			beginShape();
			for(j=0;j<7;j++){
				vertex(sin(j*360/7)*36,cos(j*360/7)*36);
			}
			endShape(CLOSE);
			rotate(this.time);
		break;
		case "Shielding Boss": case "Shielder":
			fill(220,230,220,this.fade/2*this.shieldFade/255);
			stroke(220,230,220,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rect(-25,-25,50,50);
		break;
		case "Brilliancy":
			fill(255,255,205,this.fade/2*this.shieldFade/255);
			stroke(255,255,205,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<5;j++){
				vertex(sin(j*72)*30,cos(j*72)*30);
			}
			endShape(CLOSE);
			rotate(-this.time);
		break;
		case "Bonker": case "ChargeBonker":
			fill(255,255,105,this.fade/2*this.bonkAnim/255);
			stroke(255,255,105,this.fade*this.bonkAnim/255);
			strokeWeight(3);
			ellipse(0,0,56,56);
		break;
		case "UberBot":
			fill(105,255,105,this.fade/2*this.bonkAnim/255);
			stroke(105,255,105,this.fade*this.bonkAnim/255);
			strokeWeight(3);
			ellipse(0,0,56,56);
		break;
		case "Burster": case "GiantBurster":
			fill(105,155,255,this.fade/2*this.bonkAnim/255);
			stroke(105,155,255,this.fade*this.bonkAnim/255);
			strokeWeight(3);
			ellipse(0,0,56,56);
		break;
		case "The Collector":
			fill(240,190,230,this.fade/2*this.shieldFade/255);
			stroke(240,190,230,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<5;j++){
				vertex(sin(j*72)*30,cos(j*72)*30);
			}
			endShape(CLOSE);
			rotate(-this.time);
		break;
		case "Councilman":
			fill(190,120,85,this.fade/2*this.shieldFade/255);
			stroke(190,120,85,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<11;j++){
				vertex(sin(j*360/11)*30,cos(j*360/11)*30);
			}
			endShape(CLOSE);
			rotate(-this.time);
		break;
		case "Chaotic Machine":
			fill(175,215,255,this.fade/2*this.shieldFade/255);
			noStroke();
			for(k=0;k<3;k++){
				rotate(120);
				rect(-24,-24,48,48);
			}
		break;
		case "Melting King":
			fill(175,215,255,this.fade/3*this.shieldFade/255);
			noStroke();
			ellipse(0,0,56,56);
		break;
		case "Illumina":
			fill(255,235,255,this.fade/2*this.shieldFade/255);
			stroke(255,235,255,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<5;j++){
				vertex(sin(j*72)*30,cos(j*72)*30);
			}
			endShape(CLOSE);
			rotate(-this.time);
		break;
		case "Keres":
			fill(100,0,100,this.fade/2*this.shieldFade/255);
			stroke(100,0,100,this.fade*this.shieldFade/255);
			strokeWeight(3);
			rotate(this.time);
			beginShape();
			for(j=0;j<5;j++){
				vertex(sin(j*72)*30,cos(j*72)*30);
			}
			endShape(CLOSE);
			rotate(-this.time);
		break;
	}
	if(this.stuns[0]>0){
		rotate(this.x*(this.y+this.rate));
		noStroke();
		fill(150,255,255,this.fade*2/5);
		rect(-20,-20,40,40);
		rotate(-this.x*(this.y+this.rate));
	}
	if(this.stuns[1]>0){
		stroke(255,255,50,this.fade*4/5);
		strokeWeight(5);
		line(random(-20,20),random(-20,20),random(-20,20),random(-20,20));
	}
	if(this.stuns[2]>0){
		stroke(50,255,255,this.fade*4/5);
		strokeWeight(5);
		line(random(-20,20),random(-20,20),random(-20,20),random(-20,20));
	}
	if(this.stuns[3]>0){
		rotate(this.x*(this.y+this.rate));
		noStroke();
		fill(0,255,100+sin(this.rate*10)*100,this.fade*2/5);
		rect(-20,-20,40,40);
		rotate(-this.x*(this.y+this.rate));
	}
	if(this.stuns[4]>0){
		rotate(this.x*(this.y+this.rate));
		noStroke();
		fill(100+sin(this.rate*10)*100,255,0,this.fade*2/5);
		rect(-20,-20,40,40);
		rotate(-this.x*(this.y+this.rate));
	}
	if(this.stuns[5]>0){
		rotate(this.x*(this.y+this.rate));
		noStroke();
		fill(230,200,0,this.fade*4/5);
		rect(-20,-20,40,40);
		rotate(-this.x*(this.y+this.rate));
	}
	if(this.stuns[6]>0){
		rotate(this.x*(this.y+this.rate));
		noStroke();
		fill(255,225,0,this.fade*2/5);
		ellipse(0,0,40,40);
		rotate(-this.x*(this.y+this.rate));
	}
	if(this.stuns[7]>0){
		rotate(this.x*(this.y+this.rate));
		noStroke();
		fill(255,125,175,this.fade*2/5);
		ellipse(0,0,40,40);
		rotate(-this.x*(this.y+this.rate));
	}
	if(this.shock>0){
		stroke(255,0,0);
		strokeWeight(3);
		line(sin(random(0,360))*sqrt(250),cos(random(0,360))*sqrt(250),sin(random(0,360))*sqrt(250),cos(random(0,360))*sqrt(250));
	}
	if(this.SS&&this.shield>0){
		stroke(255,0,0,this.fade);
		strokeWeight(3);
		fill(255,0,0,this.fade/4);
		ellipse(0,0,40,40);
		fill(255,0,0,this.fade);
		noStroke();
		rotate(this.rate);
		for(j=0;j<4;j++){
			rotate(90);
			triangle(-4,-20,4,-20,0,-35);
		}
		rotate(-this.rate);
	}
	scale(1/this.baseSize);
	for(var j in this.bombs){
		if(!this.bombs[j][3]){
			noStroke();
			fill(80,this.fade);
			ellipse(sin(this.bombs[j][0])*this.bombs[j][1],cos(this.bombs[j][0])*this.bombs[j][1],10,10);
			fill(220,0,0,this.fade);
			ellipse(sin(this.bombs[j][0])*this.bombs[j][1],cos(this.bombs[j][0])*this.bombs[j][1],6,6);
		}
	}
	rotate(-this.direction);
	if(this.name === "Lead Balloon"||this.name === "Titanium Balloon"||this.name === "Steel Balloon"){
		rotate(this.extraSpin);
		stroke(100,this.fade);
		strokeWeight(2);
		for(j in this.balloonSpots){
			if(!this.popped[j]){
				line(0,0,this.balloonSpots[j][0],this.balloonSpots[j][1]);
			}
		}
		if(this.name === "Titanium Balloon"){
			fill(70,120,80,this.fade);
		}
		else if(this.name === "Steel Balloon"){
			fill(170,this.fade);
		}
		else{
			fill(120,this.fade);
		}
		noStroke();
		for(j in this.balloonSpots){
			if(!this.popped[j]){
				ellipse(this.balloonSpots[j][0],this.balloonSpots[j][1],24,24);
			}
		}
		if(this.name === "Titanium Balloon"){
			fill(50,100,60,this.fade);
		}
		else if(this.name === "Steel Balloon"){
			fill(140,this.fade);
		}
		else{
			fill(60,this.fade);
		}
		for(j in this.balloonSpots){
			if(!this.popped[j]){
				translate(this.balloonSpots[j][0],this.balloonSpots[j][1]);
				rotate(j*60);
				ellipse(0,0,8,2.5);
				ellipse(-7,0,2.5,8);
				ellipse(7,0,2.5,8);
				ellipse(0,7,2.5,8);
				ellipse(0,-7,2.5,8);
				arc(-7,-7,8,2.5,-90,150);
				arc(-7,7,8,2.5,-150,90);
				arc(7,-7,8,2.5,30,270);
				arc(7,7,8,2.5,90,330);
				rotate(-j*60);
				translate(-this.balloonSpots[j][0],-this.balloonSpots[j][1]);
			}
		}
		rotate(-this.extraSpin);
	}
	else if(this.name === "Templar"&&this.activated){
		scale(1.2);
		rotate(this.time*1.5);
		stroke(255,215,0,this.fade);
		strokeWeight(6);
		noFill();
		for(j=0;j<4;j++){
			rotate(90);
			arc(0,0,56,56,-30,30);
		}
		stroke(125,105,0,this.fade);
		strokeWeight(1);
		rotate(16);
		if(this.life>0){
			for(j=0;j<4;j++){
				rotate(58);
				line(-2,26,-2,30);
				ellipse(1,28,2,4);
				rotate(32);
				line(-2,26,-2,30);
				ellipse(1,28,2,4);
			}
		}
		else{
			for(j=0;j<4;j++){
				rotate(58);
				line(-2,26,-2,30);
				line(-2,26,2,26);
				line(-2,28,2,28);
				line(-2,30,2,30);
				rotate(32);
				line(-2,26,-2,30);
				line(-2,26,2,26);
				line(-2,28,2,28);
				line(-2,30,2,30);
			}
		}
		rotate(-this.time*1.5-16);
		scale(1/1.2);
	}
	else if(this.name === "Awakened Templar"&&this.activated){
		scale(1.2);
		rotate(this.time*1.5);
		stroke(255,215,0,this.fade);
		strokeWeight(6);
		noFill();
		for(j=0;j<4;j++){
			rotate(90);
			arc(0,0,56,56,-30,30);
		}
		stroke(125,105,0,this.fade);
		strokeWeight(1);
		rotate(16);
		if(this.life>0){
			for(j=0;j<4;j++){
				rotate(58);
				line(-3,26,-3,30);
				ellipse(0,28,2,4);
				ellipse(3,28,2,4);
				rotate(32);
				line(-3,26,-3,30);
				ellipse(0,28,2,4);
				ellipse(3,28,2,4);
			}
		}
		else{
			for(j=0;j<4;j++){
				rotate(58);
				line(-2,26,-2,30);
				line(-2,26,2,26);
				line(-2,28,2,28);
				line(-2,30,2,30);
				rotate(32);
				line(-2,26,-2,30);
				line(-2,26,2,26);
				line(-2,28,2,28);
				line(-2,30,2,30);
			}
		}
		rotate(-this.time*1.5-16);
		scale(1/1.2);
	}
	else if((this.name === "Void Reaver"||this.name === "Nuclear Void Reaver")&&this.activated){
		scale(2.4);
		rotate(this.time*1.5);
		stroke(255,215,0,this.fade*this.shieldFade/255);
		strokeWeight(6);
		noFill();
		for(j=0;j<4;j++){
			rotate(90);
			arc(0,0,56,56,-30,30);
		}
		stroke(125,105,0,this.fade*this.shieldFade/255);
		strokeWeight(1);
		rotate(16);
		if(this.life>0){
			for(j=0;j<4;j++){
				rotate(58);
				line(-1.5,26,1.5,26);
				line(1.5,26,0,30);
				rotate(32);
				line(-1.5,26,1.5,26);
				line(1.5,26,0,30);
			}
		}
		else{
			for(j=0;j<4;j++){
				rotate(58);
				line(-2,26,-2,30);
				line(-2,26,2,26);
				line(-2,28,2,28);
				line(-2,30,2,30);
				rotate(32);
				line(-2,26,-2,30);
				line(-2,26,2,26);
				line(-2,28,2,28);
				line(-2,30,2,30);
			}
		}
		rotate(-this.time*1.5-16);
		scale(1/2.4);
	}
	else if(this.name === "White Balloon"){
		rotate(this.extraSpin);
		stroke(200,this.fade);
		strokeWeight(2);
		for(j in this.balloonSpots){
			if(!this.popped[j]){
				line(0,0,this.balloonSpots[j][0],this.balloonSpots[j][1]);
			}
		}
		fill(230,250,250,this.fade);
		noStroke();
		for(j in this.balloonSpots){
			if(!this.popped[j]){
				ellipse(this.balloonSpots[j][0],this.balloonSpots[j][1],22,22);
			}
		}
		fill(200,250,250,this.fade);
		for(j in this.balloonSpots){
			if(!this.popped[j]){
				ellipse(this.balloonSpots[j][0],this.balloonSpots[j][1],12,12);
			}
		}
		rotate(-this.extraSpin);
	}
	else if(this.name === "Zebra Balloon"){
		rotate(this.extraSpin);
		stroke(150,this.fade);
		strokeWeight(2);
		for(j in this.balloonSpots){
			if(!this.popped[j]){
				line(0,0,this.balloonSpots[j][0],this.balloonSpots[j][1]);
			}
		}
		fill(250,250,250,this.fade);
		noStroke();
		for(j in this.balloonSpots){
			if(!this.popped[j]){
				ellipse(this.balloonSpots[j][0],this.balloonSpots[j][1],33,33);
			}
		}
		fill(10,this.fade);
		rotate(-this.extraSpin);
		for(j in this.balloonSpots){
			if(!this.popped[j]){
				arc(sin(this.extraSpin)*-this.balloonSpots[j][1]+cos(this.extraSpin)*this.balloonSpots[j][0]+6,sin(this.extraSpin)*this.balloonSpots[j][0]+cos(this.extraSpin)*this.balloonSpots[j][1],45,33,-186,-174);
				arc(sin(this.extraSpin)*-this.balloonSpots[j][1]+cos(this.extraSpin)*this.balloonSpots[j][0]-5,sin(this.extraSpin)*this.balloonSpots[j][0]+cos(this.extraSpin)*this.balloonSpots[j][1]-5,42,20,-14,0);
				arc(sin(this.extraSpin)*-this.balloonSpots[j][1]+cos(this.extraSpin)*this.balloonSpots[j][0]-5,sin(this.extraSpin)*this.balloonSpots[j][0]+cos(this.extraSpin)*this.balloonSpots[j][1]+5,42,20,0,14);
				arc(sin(this.extraSpin)*-this.balloonSpots[j][1]+cos(this.extraSpin)*this.balloonSpots[j][0]+4,sin(this.extraSpin)*this.balloonSpots[j][0]+cos(this.extraSpin)*this.balloonSpots[j][1]-10,33,12,-180,-160);
				arc(sin(this.extraSpin)*-this.balloonSpots[j][1]+cos(this.extraSpin)*this.balloonSpots[j][0]+4,sin(this.extraSpin)*this.balloonSpots[j][0]+cos(this.extraSpin)*this.balloonSpots[j][1]+10,33,12,-200,-180);
			}
		}
	}
	else if(this.name === "Developer"&&this.activated){
		scale(2);
		rotate(this.time*1.5);
		stroke(255,215,0,this.fade*this.shieldFade/255);
		strokeWeight(6);
		noFill();
		for(j=0;j<4;j++){
			rotate(90);
			arc(0,0,56,56,-30,30);
		}
		stroke(125,105,0,this.fade*this.shieldFade/255);
		strokeWeight(1);
		rotate(16);
		if(this.life>0){
			for(j=0;j<4;j++){
				rotate(58);
				line(-2,26,-2,30);
				line(2,26,2,30);
				line(0,26,2,26);
				line(0,28,2,28);
				line(0,30,2,30);
				rotate(32);
				line(-2,26,-2,30);
				line(2,26,2,30);
				line(0,26,2,26);
				line(0,28,2,28);
				line(0,30,2,30);
			}
		}
		else{
			for(j=0;j<4;j++){
				rotate(58);
				line(-2,26,-2,30);
				line(-2,26,2,26);
				line(-2,28,2,28);
				line(-2,30,2,30);
				rotate(32);
				line(-2,26,-2,30);
				line(-2,26,2,26);
				line(-2,28,2,28);
				line(-2,30,2,30);
			}
		}
		rotate(-this.time*1.5-16);
		scale(1/2);
	}
	else if(this.name === "Balloon"&&!this.popped){
		rotate(this.extraSpin);
		stroke(150,75,0,this.fade);
		strokeWeight(2);
		line(0,0,0,15);
		fill(255,0,0,this.fade);
		noStroke();
		ellipse(0,15,24,24);
		rotate(-this.extraSpin);
	}
	else if(this.name === "Balloon X"&&!this.popped){
		rotate(this.extraSpin);
		stroke(120,60,0,this.fade);
		strokeWeight(2);
		line(0,0,0,15);
		fill(200,0,0,this.fade);
		noStroke();
		ellipse(0,15,24,24);
		rotate(-this.extraSpin);
	}
	else if(this.name === "Camo Balloon"&&!this.popped){
		rotate(this.extraSpin);
		stroke(150,75,0,this.fade);
		strokeWeight(2);
		line(0,0,0,17);
		fill(60,180,20,this.fade);
		noStroke();
		ellipse(0,17,27,27);
		rotate(-this.extraSpin);
		translate(sin(this.extraSpin)*-17,cos(this.extraSpin)*17);
		fill(54,162,18,this.fade);
		ellipse(-5,-4,8,8);
		ellipse(7,1,7,7);
		ellipse(-1,8,6,6);
		fill(66,198,22,this.fade);
		ellipse(4,5,8,8);
		ellipse(-1,-7,7,7);
		ellipse(-8,1,6,6);
		translate(sin(this.extraSpin)*17,cos(this.extraSpin)*-17);
	}
	else if(this.name === "Regen Balloon"&&!this.popped){
		rotate(this.extraSpin);
		stroke(150,75,0,this.fade);
		strokeWeight(2);
		line(0,0,0,17);
		fill(20,60,180,this.fade);
		noStroke();
		rotate(-this.extraSpin);
		translate(sin(this.extraSpin)*-17,cos(this.extraSpin)*17);
		for(k=0;k<2;k++){
			scale(-1,1);
			beginShape();
			vertex(1,-6);
			bezierVertex(-12,-18,-24,0,1,16);
			endShape();
		}
		translate(sin(this.extraSpin)*17,cos(this.extraSpin)*-17);
	}
	scale(this.baseSize/this.size);
	translate(-this.x,-this.y);
}
enemy.prototype.drawLife = function(){
	translate(this.x,this.y);
	if(dist(this.x,this.y,mouseX,mouseY)<50){
		scale(2);
		this.hitTimer = 750;
	}
	noStroke();
	if(dist(this.x,this.y,mouseX,mouseY)<50){
		fill(75,this.fade*min(255,this.hitTimer*3)/255);
		rect(-24,-29,48,7);
		fill(180,this.fade*min(255,this.hitTimer*3)/255);
		ellipse(-20,-16,8,8);
		fill(0,this.fade*min(255,this.hitTimer*3)/255);
		textSize(5);
		text(this.name,0,-25);
		text(ceil(this.defense),-20,-16);
	}
	fill(75,this.fade*min(255,this.hitTimer*3)/255);
	rect(-24,-39,48,7);
	fill(300-max(0,this.life)/this.maxLife*300,-100+max(0,this.life)/this.maxLife*355,0,this.fade*min(255,this.hitTimer*3)/255);
	rect(-24,-39,(max(0,this.life)/this.maxLife)*48,7);
	fill(0,this.fade*min(255,this.hitTimer*3)/255);
	textSize(7);
	if(this.name === "Bruh"&&this.life>9000){
		text("OVER 9000",0,-35);
	}
	else{
		text(amplify(ceil(max(0,this.life)))+"/"+amplify(ceil(this.maxLife)),0,-35);
	}
	if(this.maxShield>0){
		fill(80,this.fade*min(255,this.hitTimer*3)/255);
		rect(-24,-49,48,7);
		if(this.SS||this.name === "Hellrisen"||this.name === "Demonic Summoner"||this.name === "PurgeDual"||this.name === "PurgeGun"||this.name === "PurgeStaff"){
			fill(max(0,this.shield)/this.maxShield*155+100,0,0,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "LPZ"||this.name === "Static"){
			fill(max(0,this.shield)/this.maxShield*205+50,255,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Shielded Mini MOAB"||this.name === "Shielded BRC"){
			fill(max(0,this.shield)/this.maxShield*170,255,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Slow King"){
			fill(75+max(0,this.shield)/this.maxShield*180,0,75+max(0,this.shield)/this.maxShield*180,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Vindicator"){
			fill(0,20+max(0,this.shield)/this.maxShield*50,40+max(0,this.shield)/this.maxShield*100,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Charge"||this.name === "Elite Raybeamer"){
			fill(0,max(0,this.shield)/this.maxShield*150,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Raider"||this.name === "Energized Raider"||this.name === "Hellspeed"||this.name === "Firewall"){
			fill(255,max(0,this.shield)/this.maxShield*255,0,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Frozen"||this.name === "Deep Freeze"||this.name === "Frost King"||this.name === "Melting King"){
			fill(max(0,this.shield)/this.maxShield*175,215,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Lunar Shield"){
			fill(255,max(0,this.shield)/this.maxShield*200,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Cosmil"){
			fill(255,max(0,this.shield)/this.maxShield*200+55,55,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Kugelblitz X"){
			fill(max(0,this.shield)/this.maxShield*100,max(0,this.shield)/this.maxShield*200,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Pure Champion"||this.name === "Dimension Wanderer"||this.name === "Starspeed"){
			fill(max(0,this.shield)/this.maxShield*100+155,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "True Vanguard"||this.name === "Light King"||this.name === "Gilded Berserker"){
			fill(255,255,max(0,this.shield)/this.maxShield*255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Avant Guard"||this.name === "Robotic Guard"||this.name === "Oppressor"){
			fill(255,150+max(0,this.shield)/this.maxShield*105,max(0,this.shield)/this.maxShield*255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Angerspeed"||this.name === "Juggernaut"){
			fill(255,max(0,this.shield)/this.maxShield*255,max(0,this.shield)/this.maxShield*255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Lightspeed"||this.name === "Volt King"||this.name === "Lightning King"){
			fill(max(0,this.shield)/this.maxShield*255,max(0,this.shield)/this.maxShield*255,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Ravager"||this.name === "Ravager X"||this.name === "Chaotic Machine"){
			fill(max(0,this.shield)/this.maxShield*255,255,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Legionship"){
			fill(max(0,this.shield)/this.maxShield*255,max(0,this.shield)/this.maxShield*255,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Kugelblitz Large"){
			fill(255,max(0,this.shield)/this.maxShield*255,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Kugelblitz Overseer"){
			fill(255,max(0,this.shield)/this.maxShield*155+100,max(0,this.shield)/this.maxShield*155+100,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Shielding Boss"||this.name === "Shielder"){
			fill(max(0,this.shield)/this.maxShield*105+150,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Dark Priest"){
			fill(255,255,max(0,this.shield)/this.maxShield*155+100,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Kugelblitz Particle"){
			fill(max(0,this.shield)/this.maxShield*155+100,255,max(0,this.shield)/this.maxShield*155+100,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Kugelblitz Microscopic"){
			fill(255,max(0,this.shield)/this.maxShield*155+100,max(0,this.shield)/this.maxShield*55+200,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Vengeful Speed"){
			fill(0,0,max(0,this.shield)/this.maxShield*200+55,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Morpher"){
			fill(max(0,this.shield)/this.maxShield*100+155,255,max(0,this.shield)/this.maxShield*100+155,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Vengeful Speed X"){
			fill(255,max(0,this.shield)/this.maxShield*105+150,max(0,this.shield)/this.maxShield*105+150,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Watcher"){
			fill(max(0,this.shield)/this.maxShield*100,0,max(0,this.shield)/this.maxShield*100,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Bulwark"){
			fill(55,max(0,this.shield)/this.maxShield*100+105,55,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Thanatophobia"){
			fill(max(0,this.shield)/this.maxShield*50+205,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Tartara"){
			fill(55,max(0,this.shield)/this.maxShield*200+55,255,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Rampart"){
			fill(max(0,this.shield)/this.maxShield*100+105,55,55,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Beast"){
			fill(max(0,this.shield)/this.maxShield*100+50,0,0,this.fade*min(255,this.hitTimer*3)/255);
		}
		else if(this.name === "Broderick"){
			fill(max(0,this.shield)/this.maxShield*50+150,max(0,this.shield)/this.maxShield*50+150,150,this.fade*min(255,this.hitTimer*3)/255);
		}
		rect(-24,-49,(max(0,this.shield)/this.maxShield)*48,7);
		fill(0,this.fade*min(255,this.hitTimer*3)/255);
		textSize(7);
		text(amplify(ceil(max(0,this.shield)))+"/"+amplify(ceil(this.maxShield)),0,-45);
	}
	if(dist(this.x,this.y,mouseX,mouseY)<50){
		scale(1/2);
	}
	translate(-this.x,-this.y);
}